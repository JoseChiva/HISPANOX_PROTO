#<AdxTL>@(#)0.0.0.0 $Revision$
# Calcul des besoins nets et calcul du plan directeur de production
# Issue 107243 GA 04/2015 preformances : find(...) replaced by find(...)<>0
# Issue number 107498/9 - 2016-03-03 by LLC - integration of new demand MT (WIPTYP = 14)
# Issue 107498/13 - 2016-04-29 by BAKHA : create suggestions per project
# Issue 114169 LLC 05/2016 - Wrong calculation of suggestions with coverage and demand close to end of MRP calculation horizon
# Issue 117180 - 2016-06-17 by BAKHA : Was creating extra suggestions for project demands
# Issue 107498/19 - 2016-07-22 by BAKHA : if you have product twice on project demand then
#                                         some WOS/POS are missing.

Gosub ACTION
End

############################################################
$ACTION
Case ACTION
  When "INIT"           : Gosub INIT_CALCBN
  When "CONTROLE"       : Gosub CONTROLE_CALCBN
  When "EXEC"           : Gosub EXEC_CALCBN
  When "TERMINE"        : Gosub TERMINE_CALCBN
  When "INIT_DIA"       : Gosub INIT_DIA_CALCBN
  When "OK"             : Gosub OK_CALCBN
  When "END"            : Gosub END_CALCBN
  When "SORTIE"         : Gosub SORTIE_CALCBN
Endcase
Return
#############################################################
# Fonction de calcul du plan directeur (PARAM(1) = "1")
# Fonction de calcul des besoins nets  (PARAM(1) = "2")
#############################################################
$INIT_CALCBN
GTEMPON = 0  : # FQ 45504 GA 03/2008
Return

#############################################################
$CONTROLE_CALCBN
Return

#############################################################
$EXEC_CALCBN
Call FUNCBN
Return

#############################################################
$TERMINE_CALCBN
GPCBSEL = ""
Return

#############################################################
$INIT_DIA_CALCBN
Local  Integer IFCY

If clalev([F:FCY]) = 0 : Local File FACILITY [FCY] : Endif
If clalev([F:PCB]) = 0 : Local File PARMRP   [PCB] : Endif

If GFCYDEF(0) <> ""
  Read [FCY]FCY0=GFCYDEF(0)
  If fstat = 0
    GSTOFCY = GFCYDEF(0)
    GFCYNAM = [F:FCY]FCYNAM
    GBASPAG    = 1
  Endif
Endif
GPRO    = val(PARAM(1))
If GFONCTION <> "GESABA" : GREFDAT = datesyst : Endif
Case GPRO
  When 1 : GPROTXT = mess(1,737,1)
  When 2 : GPROTXT = mess(2,737,1)
Endcase
If GSERVEUR
  GDSYFLG = 1
Endif
GPCBSEL = num$(GPRO)
Return

#############################################################
$OK_CALCBN
FIN  = 1
Return

#############################################################
$END_CALCBN
GPCBSEL = ""
FIN = 1
Return

#############################################################
$SORTIE_CALCBN
GPCBSEL = ""
Return

#############################################################
Subprog FUNCBN
Local  Char    WMSG(120)
Local  Char    WTIT(30)
Local  Char    WINT0(30)
Local  Integer WFSTAT
Local  Integer WCOM
Local  Integer WGOK
Local  Integer WSLE
Local  Integer WESS
# Détermination nom des états selon traitement
Local  Char    WETAT(20)
Local  Char    WETATP1(20)
Global Char    GPROTXT : GPROTXT = 'Cálculo necesidades netas'
Global Date    GREFDAT : GREFDAT = date$
Global Integer GDSYFLG : GDSYFLG = 1
Global Integer GPRO    : GPRO    = 2
Global Integer GBASPAG : GBASPAG = 2
Global Char    GSTOFCY : GSTOFCY = 'PHISP'
Global Char    GFCYNAM : GFCYNAM = 'HISPANOX ' + nomap
If GSERVEUR
  Onerrgo ERRBATCH
Endif
If GREFDAT = [0/0/0]
  If GSERVEUR
    GREFDAT = date$
  Else
    GREFDAT = datesyst
  Endif
Endif

If GPRO = 1
  WETAT   = "PDPHEA"
Else
  WETAT   = "CBNHEA"
Endif

# Issue number 107498/9 - 2016-03-03 by LLC
Local  Integer WTYPDEM(6) : #  Table des types d'ordres négatifs (demandes)
WTYPDEM(0) = 1
WTYPDEM(1) = 3
WTYPDEM(2) = 6
WTYPDEM(3) = 8
WTYPDEM(4) = 10
WTYPDEM(5) = 14 # Issue number 107498/9 - 2016-03-03 by LLC
# Tables des types d'ordre suggestions
Local  Integer WTYPSUG(5)
WTYPSUG(0) = 2
WTYPSUG(1) = 5
WTYPSUG(2) = 7
WTYPSUG(3) = 9
WTYPSUG(4) = 13

If dim(GLONITM) < 0
  Global Integer GLONITM
  GLONITM = 30
Endif

Local  Integer WPRO                     : # Traitement 1=MPS 2=MRP
Local  Char    WFCY(GLONFCY)            : # Site à  traiter
Local  Char    WART(GLONITM)
Local  Integer IFCY                     : # Indice sites
Local  Integer WCOMMAX  : WCOMMAX = 500 : # Nbre de sous transactions entre 2 commits # GA avant 200
Local  Integer WTRTMAX  : WTRTMAX = 500 : # Nbre de calculs entre 2 commit : # GA avant 20
Local  Integer WSEM     :                 # Premier jour semaine
Local  Integer WBOM     : WBOM    = 100 : # Buffer liens pour traitement mémoire
WBOM = max(func AFNC.ACTIVDOS(GDOSSIER,"BOD"),func AFNC.ACTIVDOS(GDOSSIER,"MFM"),func AFNC.ACTIVDOS(GDOSSIER,"PSM"),100) # Issue 82530 GA 05/2012
Local  Char    WPHAENC(80)              : # Phase en cours
Local  Char    WFILCBD(250)             : # Filtre table [CBD]
Local  Char    WFILCBD1(250)            : # Filtre table [CBD1]
Local  Char    WFILCBH(100)             : # Filtre table [CBH]
Local  Integer I, J, K, L, M, N, O, P, Q, R, S
Local  Char    WTXT(30)
# Ouverture tables
Local File ATABZON    [ATZ]
Local File ADOPAR     [ADP]
Local File ATEXTE     [ATX]
Local File ACODNUM    [ANM]
Local File FACILITY   [FCY]
Local File TABCOUAFF  [TCA]
Local File TABWEEDIA  [TWD]
Local File TABUNAVAIL [TUV]
Local File TABBOMALT  [TBO]
Local File TABUNIT    [TUN]
Local File TABREOPOL  [TRP]
Local File TABLOCTYP  [TLO]
Local File PARMRP     [PCB]
Local File SEASON     [SES]
Local File ITMMASTER  [ITM]
Local File ITMMASTER  [ITM1]
Local File ITMFACILIT [ITF]
Local File ITMFACILIT [ITF1]
Local File ITMCATEG   [ITG]          # FQ 55212 GA 05/2009 pour STKLIB
Local File ITMMVT     [ITV]
Local File ITMBOM     [ITB]
Local File ITMBPS     [ITP]          # llc 03.01 7449
Local File BPARTNER   [BPR]          # llc 08.04 24498
Local File STOCK      [STO]
Local File STOALL     [STA]          # 09.09
Local File STOLOT     [STL]
Local File STOQLYH    [QLH]
Local File STOQLYD    [QLD]
Local File TABSTORUL  [SRU]          # Issue 108013 - 2015-06-22 by GA : ECC for MRP
Local File BOM        [BOH]
Local File BOMD       [BOD]
Local File ORDERS     [ORD]
Local File ORDERS     [ORD1]
Local File CBNWRK     [CBW]
Local File ATYPE      [ATY]    # Pour arrondi des temps

If GMODU(8) = 2
  Local File WORKSTATIO [MWS]
  Local File ROUTING    [ROH]
  Local File ROUOPE     [ROO]
  Local File ROUSCD     [ROS]
  Local File SCHEDULING [SCH]
  Local File PARJAL     [PJA]
  Local File CAPVAR     [CPV]
  Local File MFGHEAD    [MFG]
Endif
If GMODU(5) = 2
    If clalev ([F:SDH]) <= 0 : Local File SDELIVERY  [SDH] : Endif         # 09.06 37574
    If clalev ([F:SDD]) <= 0 : Local File SDELIVERYD [SDD] : Endif         # 09.06 37574
    If clalev ([F:SOQ]) <= 0 : Local File SORDERQ    [SOQ] : Endif         # 09.06 37574
Endif
If GMODU(6) = 2
  Local File PORDER     [POH]
  Local File PORDERP    [POP]
  Local File PORDERQ    [POQ]   # Issue 108577 by GA 07/2015 Shipments
  Local File SHIPMENTD  [SHD]   # Issue 108577 by GA 07/2015 Shipments
  Local File SCOHEAD    [SCO] : # V6 sous-traitance
Endif
If GPRO = 1
  Local File PDPHEA     [CBH]
  Local File PDPHEA     [CBH1]
  Local File PDPDET     [CBD]
  Local File PDPDET     [CBD1]
  Local File PDPDET     [CBD2]
Else
  Local File CBNHEA     [CBH]
  Local File CBNHEA     [CBH1]
  Local File CBNDET     [CBD]
  Local File CBNDET     [CBD1]
  Local File CBNDET     [CBD2]
Endif
# Ouverture masques écrans
Local Mask PCB1 [PCB1]
Local Mask PCB2 [PCB2]
Local Mask PCB3 [PCB3]
Local Mask PCB4 [PCB4]
Local Mask ORDK [ORDK]
If GMODU(8) = 2
  Local Mask OPSS [OPSS]
  Local Mask OPSK [OPSK]
  Local Mask JALK [JALK]
Endif

Gosub TRT_GEN
End

###########################################################
#Traitement principal
$TRT_GEN
Case GPRO
  When 1       : WTIT = mess(1,737,1)
  When 2       : WTIT = mess(2,737,1)
Endcase
If !GSERVEUR
  Call OUVRE_TRACE(WTIT) From LECFIC
Endif
#For IFCY = 0 To dim(GSTOFCY)-1
#  If GSTOFCY(IFCY) <> ""
    WPRO = GPRO
    WFCY = GSTOFCY
    Read [FCY]FCY0=WFCY
    If fstat = 0
      # Issue 222303 - 2020-11-11 by STLIG :
      # retrieve the most appropriate sequence number codes for each site's company/legislation ..
      Raz GSUG, GWSP
      GSOCIETE = [F:FCY]LEGCPY
      Call INIVAR From GLOBSTO
      Call GLOBVAR(WFCY) From WWGLOBSTO
      Gosub TRT_FCY
    Else
      Call ECR_TRACE(WFCY-mess(15,104,1),1) From GESECRAN
    Endif
#  Else
#    Break
#  Endif
#Next IFCY
# traitement fin
If !GSERVEUR
  Call FERME_TRACE From LECFIC
  Call LEC_TRACE   From LECFIC
Endif

Return

############################################################
#Traitement d'un site
$TRT_FCY
Local Integer  WMONO    :     # 1 si environnement mono utilisateur
Local Integer  WITM     :     # Traitement article CBN + PDP
Local Char     WTWD(GLONTWD)  # Numéro schéma de planification
Local Decimal  WALTTYP  :  WALTTYP=2   # Type   alternative nomenclature V6
Local Decimal  WLLCTYP  :  WLLCTYP=2   # Type   code + bas niveau: 2=Production/Sous-traitance
Local Decimal  WBOMALT  :     # Numéro alternative nomenclature
Local Integer  WCAPFCT  :     # Indicateur correction capacités
Local Integer  WANYLTI  :     # Période analyse replanification en semaines
Local Integer  WCAPLTI  :     # Période calcul capacité en semaines
Local Integer  WDAYNBR  :     # Nombre de buckets jours
Local Integer  WWEENBR  :     # Nombre de buckets semaines
Local Integer  WMONNBR  :     # Nombre de buckets mois
Local Integer  WBUCCOR  :     # Code correction buckets
Local Integer  WPHYSTO  :     # Indicateur stock physique
Local Integer  WCTLSTO  :     #            stock sous contrôle
Local Integer  WREJSTO  :     #            stock rejeté
Local Integer  WTRFSTO  :     #            stock transit - transféré
Local Decimal  WTRF, WTRFCAL      # 09.06 37574
Local Char     WITMREF(GLONITM)   # 09.06 37574
Local Integer  WSOSFLG  :     # Indicateur prise en compte SOS
Local Integer  WSOPFLG  :     #                            SOP
Local Integer  WSOFFLG  :     #                            SOF
Local Integer  WTPSFLG  :     # Indicateur prise en compte TPS
Local Integer  WTPPFLG  :     #                            TPP
Local Integer  WTPFFLG  :     #                            TPF
Local Integer  WWOPFLG  :     #                            WOP
Local Integer  WWOFFLG  :     #                            WOF
Local Integer  WPOPFLG  :     #                            POP
Local Integer  WPOFFLG  :     #                            POF
Local Integer  WTRPFLG  :     # Indicateur prise en compte TRP
Local Integer  WTRFFLG  :     #                            TRF
Local Integer  WEOPFLG  :     #                            EOP  V6
Local Integer  WEOFFLG  :     #                            EOF  V6
Local Integer  WMTPFLG  :     # Issue 107498/102 - 2016-04-19 by ALSHE : MTP demand
Local Integer  WMTFFLG  :     # Issue number 107498/9 - 2016-03-03 by LLC
Local Integer  WWOSFCY  :     # Indicateur création sug fab
Local Integer  WWOSFLGI :     #                     sug inter-sites
Local Integer  WPOSFCY  :     #                     sug achat
Local Integer  WEOSFCY  :     #                     sug sous-traitance V6
Local Integer  WHORDEM  :     # Indicateur calcul solde prévisions ds horizon demande
Local Integer  WMAXANY  :     # Indicateur analyse stock maxi
Local Integer  WPRNFLG  :     # Indicateur impression journal
Local Integer  WSECCOV  :     # Indicateur analyse du stock de sécurité (couverture) # Issue 94363 GA 02/2014
Local Integer  WFABLTI  :     # Choix calcul délai fabrication
Local Integer  WGHOSTO  :     # Choix prise en compte stock fantomes
Local Integer  WSAFSTO  :     # Choix ignorer stock sécurité
Local Integer  WCOVFLG  :     # Choix ignorer couverture
Local Integer  WCOVRES  :     # Ressources en couverture
Local Integer  WWAISTO  :     # Indicateur sorties en attente
Local Integer  WSHRFLG  :     # Indicateur ignorer % perte
Local Integer  WITMCOD  :     # Choix traitement exclusif
Local Integer  WPLHDAT  :     # Choix dates dans horizon ferme
Local Char     WSPEPAR(250):  # Paramètres gestion du spécifique
# Stockage dates / calendriers
Local Date     WCALDATW :     # Jour début semaine date début traitement
Local Date     WCALDATD :     # Date début traitement corrigée
Local Date     WCALDATS :     # Date début traitement saisie
Local Date     WCALDATF :     # Date fin   traitement
Local Date     WANADATD :     # Date début analyse
Local Date     WANADATF :     # Date fin   analyse
Local Date     WCAPDATD :     # Date début calcul charge
Local Date     WCAPDATF :     # Date fin   calcul charge
Local Date     WDAT     :     # Stockage date
Local Date     WANAMST  :     #     "      "
Local Date     WDATB    :     # Stockage date besoin
Local Integer  WNBJOU   :     # Nombre de jours traitement
Local Integer  WNBBUC   :     # Nombre de buckets traitement
Local Decimal  WTOT     :     # Nombre de jours ouvrables
Local Decimal  WALLSTO  :     # Allocations ordres pris en charge
Local Integer  WMAXALLQTY  :  # Tenir compte qté allouée # Issue 102933 GA 01/2015
Local Integer  WRET     :     # Code retour SP
Local Integer  WDATGAM  :     # Indicateur date gamme
# Stockage pour correction saisonnalité
Local Integer  WDYNCOV  :     # Valeur paramètre couverture dynamique
Local Integer  WDYNSAF  :     # Valeur paramètre stock sécurité dynamique
Local Decimal  WBAST    :     # Base répartition totale
Local Decimal  WBASL    :     # Base répartition ligne
# Stockage pour CALDATSUG
Local Date     WDATD    :     # Date début  calculée par CALDATSUG
Local Date     WDATF    :     # Date fin    calculée par CALDATSUG
Local Date     WDATR    :     # Date besoin calculée par CALDATSUG
Local Integer  WBUCR    :     # Bucket besoin
Local Integer  WREOCOD  :     # Code type réappro
Local Decimal  WMFGLTI  :     # Délai fabrication
Local Decimal  WPURLTI  :     # Délai achat
Local Decimal  WQUALTI  :     # Délai contrôle qualité
Local Decimal  WLOT     :     # Lot économique
Local Decimal  WCOE     :     # Coefficient délai
Local Integer  WCOR     :     # Arrondi date
Local Integer  WCOD     :     # Type de délai
Local Integer  WRPL     :     # Code replanification
Local Integer  WSTYP    :     # Type   suggestion d'origine
Local Integer  WSSTA    :     # Statut suggestion d'origine
Local Char     WSNUM(GLONVCR) # Numéro suggestion d'origine
Local Integer  NOQUALTI :     # flag délai qualité 11.05 32942
# Stockage ordres clients
Local Integer  WDEMBUC  :     # Bucket demande
Local Decimal  WQSOP    :     # Quantité ordres planifiés
Local Decimal  WQSOF    :     # Quantité ordres fermes
Local Decimal  WQSOS    :     # Quantité ordres prévisions
Local Decimal  WQRST    :     # Quantité de régularisation SOS
# Stockage règles replanification
Local Integer  WRPLTYP(8)   : # types d'ordres à  replanifier
Local Integer  WRPLMOD(8)   : # mode replanification
Local Integer  WRPLBWDLTI(8): # délai amont
Local Integer  WRPLFRWLTI(8): # délai aval
Local Integer  WRPLUPDQTY(8): # replanification quantité
Local Integer  WRPLUPDDAT(8): # replanification date
Local Integer  WWIPPRO      : # protection ordres en cours
Local Integer  WRESBLWLOT   : # diminution en dessous du lot économique
Local Integer  WREOPOLDIS   : # Ignorer politique réappro en replanification
Local Integer  WSAFCOV      : # reconstitution stock sécurité (02.04)
Local Integer  WECART       : # indicateur interne (29321 03.05)
Local Decimal  WRESSRMN     : # variable interne (10.05 32690)
# variables de travail replanification
Local Integer  WSIM         : # indicateur simu
Local Decimal  WDEMQTY      : # Zone travail stock
Local Integer  WMODCAL      : # Mode calcul suggestions
Local Integer  WWRKLTI      : # délai replanif
Local Decimal  WRESSQTY     : # Zone travail stock
Local Integer  WLOOP        : # Boucle conso suggestions
Local Date     WRPLDAT      : # zone travail date
Local Decimal  WRPLQTY      : # zone travail quantité
Local Decimal  WRPLCOV      : # zone travail quantité
Local Integer  WBREAKLOOP   : # zone travail
Local Decimal  WMEMRPL      : # zone travail (01.04)
Local Decimal  WADJUST      : # zone travail (01.04)
Local Integer  XRPLMOD      : # stockage règle pour ordre en cours de traitement
Local Integer  XRPLBWDLTI   : # stockage règle pour ordre en cours de traitement
Local Integer  XRPLFRWLTI   : # stockage règle pour ordre en cours de traitement
Local Integer  XRPLUPDQTY   : # stockage règle pour ordre en cours de traitement
Local Integer  XRPLUPDDAT   : # stockage règle pour ordre en cours de traitement
Local Integer  XRPLNOMESS   : # Issue 92226 GA 09/2013 pas de message replanif / horizon ferme
Local Integer  XRPLCTLSPE   : # Issue 92357 GA 09/2013 before replanning use entry point CTLSPE
Local Decimal  XSAFSTO      : # zone travail (02.04)
Local Integer  XSAFREC      : # zone travail (02.04)
# Stockage calcul suggestions
Local Decimal  WSTO     :     # Zone travail stock progressif
Local Decimal  WSTOWRK  :     # Zone travail stock                     llc 09.02 15867
Local Decimal  WSTOSHR  :     # Zone travail stock progressif pour traitement articles avec pertes
Local Decimal  WSTOSEC  :     #              stock sécurité
Local Decimal  WSAISON  :     #              correction saisonalité
Local Decimal  WBESBUC  :     #              besoin bucket

# Issue 38342 - 2017-09-26 by STLIG : Demand accumulation (for expired stock calculation)
Local Decimal  WCUMDEM

Local Decimal  WBESBUCS :     #              besoin bucket (sauvegarde)
Local Decimal  WBESDEL  :     #              delta du bucket
Local Decimal  WBESIND  :     #              besoin a individualiser
Local Decimal  WBES     :     #              besoin
Local Decimal  WDIS     :     #              disponible
Local Decimal  WSUG     :     #              qte suggestion
Local Decimal  WTOS     :     #              total suggestions corrigé des pertes
Local Integer  WNBR     :     #              nombre de suggestions
Local Decimal  WSUGR    :     #              qté dernière suggestion
Local Date     WDATS    :     # Date besoin
Local Integer  WTYPO    :     # Type origine
Local Integer  WSTAO    :     # Statut origine
Local Char     WNUMO(GLONVCR):# Numéro origine
Local Integer  WLINO    :     # Numéro ligne origine
Local Integer  WSEQO    :     # Numéro sequence origine
Local Char     WPJTO(GLONPJT):# Projet origine
Local Char     WITMO(GLONITM):# article origine (03.05 29395)
Local Char     WBPRO(GLONBPR):# Tiers origine
Local Integer  WTRCFLG  :     # Pour tracage
Local Decimal  WDEL     :     # Délai réappro
Local Decimal  WDELC    :     # Délai corrigé
Local Integer  WBUC     :     # Numéro de bucket
Local Integer  IBUC     :     # Indicateur
Local Decimal  WGLOALL  :     # variable de travail
# Stockage données liens nomenclature
Local Integer  IBOM                : # Indice tables suivantes
Local Char     WCMP(GLONITM)(WBOM) : # Tableau des composants
Local Integer  WCPNTYP(WBOM)       : # Tableau des types composants (normal, sous-produit)
Local Char     WSTU(GLONUOM)(WBOM) : # Tableau unités composants
Local Date     WDTED(WBOM)         : # Tableau dates début liens
Local Date     WDTEF(WBOM)         : # Tableau dates fin   liens
Local Integer  WOFS(WBOM)          : # Délai lien
Local Integer  WQTYC(WBOM)         : # Tableau des code quantité
Local Decimal  WQTYL(WBOM)         : # Tableau des quantités liens
Local Integer  WRND(WBOM)          : # Tableau des codes arrondi
Local Decimal  WSCA(WBOM)          : # Tableau des % perte
Local Integer  WOPE(WBOM)          : # Opération gamme
Local Integer  WTRC(WBOM)          : # flag gestion à  la commande                # 06.05 30834
Local Decimal  WQTYN               : # Quantité besoin net
Local Decimal  WQTYNA              : #    "        "   net arrondi
Local Decimal  WQTYB               : #    "        "   brut
Local Decimal  WQTYBA              : #    "        "   brut arrondi
Local Decimal  WCBDREQ
# Traitement ordres SOF SOP SOS articles à l'affaire - Maj V6 GA 05/2009 selon V5
Local Integer  WPJTSOF             : # Individualisation suggestions pour SOF
Local Integer  WPJTSOP             : #        "               "           SOP
Local Integer  WPJTSOS             : #        "               "           SOS
Local Char     WPAR(20)            : # Pour recherche paramètres
Local Decimal  WMAXSTO             : # Stock maxi
# Issue 108013 - 06/2015 by GA : ECC for MRP - start
Local Integer  WECCFLG             :
Local Integer  WECCNBR             :
# Issue 48236 GH 05/06/2018 - Deletion useless variables WECCSO*
#Local Integer  WECCSOF             : # Individualisation suggestions pour SOF
#Local Integer  WECCSOP             : #        "               "           SOP
#Local Integer  WECCSOS             : #        "               "           SOS
# Issue 108013 - 06/2015 by GA : ECC for MRP - end
# Issue 107498/13 - 04/05/2016 by BEEBE: implementing Project management
Local Integer  WPJTFLAG            : WPJTFLAG=0 # Control for project oriented processing
# Issue 107498/13 end

# Issue 122220 - 2017-05-25 by STLIG : Switch (parameter) coverage mode:
#                                      Reduce stock (Yes=2), maintain stock (No<2)..
Local Integer  WRECOVST

Local Integer  VERSIONS_STOCK        # 97980 : number of versions where stock is available (versioned product)

# Issue 128657 - 2019-03-20 by STLIG : re-plan material requirements
Local Integer  WMWRPLN

# Issue 107866 - 2019-05-30 by STLIG : PROJECT_STARTING_STOCK save outstanding available stock value
Local Decimal WSSTO

# Statistiques
Local Date     ZDATDEB             : # Date  système début traitement
Local Integer  ZHEUDEB             : # Heure système début traitement
Local Date     ZDATFIN             : # Date  système fin   traitement
Local Integer  ZHEUFIN             : # Heure système début traitement
Local Date     ZDATDEBP            : # Date  début phase
Local Integer  ZHEUDEBP            : # Heure début phase
Local Date     ZDATFINP            : # Date  fin phase
Local Integer  ZHEUFINP            : # Heure fin phase
Local Integer  ZPHA(9)             : # Durée des phases en secondes
Local Integer  ZNUF                : # Numéro phase
Local Char     SYMBOLE(50)         : # Symbole pour Lock
Local Integer  WOK                 : # Code Ok
# formule de sélection
Local Char     FORMULE_P(255)        : FORMULE_P = "1=1"
Local Char     FORMULE_S(255)        : FORMULE_S = "1=1"

Local Integer WREOMGT : WREOMGT = 0 # 220549

#---------
# point d'entrée fonctionnement alternatif Replanification
If dim(GREPLANNING) < 0
    Global Char GREPLANNING(20)
Endif
GREPLANNING = "RPL_INIT"
GPOINT = "REPLANNING" : Gosub ENTREE From EXEFNC

#---------
# Test si environnement mono utilisateur
Call PARAM("","MONO",WPAR) From ADOVAL
WMONO = val(WPAR)

# X3-107732 refresh product / product-site supplier control parameters by site ..
If (evalue("dim(GITMBPS)>0"))
  Call PARAM(WFCY,"ITMBPS",WPAR) From ADOVAL
  GITMBPS = val(WPAR)
Endif
If (evalue("dim(GITMBPSFCY)>0"))
  Call PARAM(WFCY,"ITMBPSFCY",WPAR) From ADOVAL
  GITMBPSFCY = val(WPAR)
Endif

#---------
# Lock traitement site
SYMBOLE = GFONCTION+WFCY
Lock =SYMBOLE
If fstat
  WMSG = WFCY+" : "+mess(251,199,1)
  If !GSERVEUR
    Call ERREUR(WMSG) From GESECRAN
  Endif
  Call ECR_TRACE(WMSG,1) From GESECRAN
  Return
Endif

#---------
# Initialisation date/heure début traitement et début de phase
ZDATDEB  = date$
ZHEUDEB  = time
ZDATDEBP = date$
ZHEUDEBP = time
WPHAENC  = mess(1,744,1)
Raz ZPHA

#---------
# message début traitement
WMSG = mess(WPRO,737,1)-WFCY-format$('D:'+GFMDAT4,GREFDAT)  # FQ 63969 GA 04/2010 avant "D:"
Call ECR_TRACE(WMSG,0) From GESECRAN

#---------
Call TEMPON(WMSG) # FQ 45504 GA 03/2008 avant: From GESECRAN
# Lecture paramètres et chargement
Read [PCB]PCB0=WFCY
If fstat
  WMSG = WFCY-mess(12,187,1)
  Call ECR_TRACE(WMSG,1) From GESECRAN
  Goto ERR_TRT_FCY
Endif
# Point d'entrée après lecture paramètres
GPE    = 0
GPOINT = "AFTREAPCB"
Gosub  ENTREE From EXEFNC
If GPE <> 0
  Goto ERR_TRT_FCY
Endif

#---------
# Chargement zones de travail selon MPS ou MRP
Gosub LOA_LOCAL From CBNLIB

# Issue 108013 - 06/2015 by GA : ECC for MRP
If WECCFLG
  If WECCNBR=0   WECCNBR=5            Endif
  Local Char     WECCVALMAJ(GLONICVVAL)(WECCNBR)
  Local Char     WECCVALMIN(GLONICVVAL)(WECCNBR)
  Local Decimal  WECCSTODIS(WECCNBR)
  Local Decimal  WECCBES(WECCNBR)
  Local Decimal  WECCRES(WECCNBR)
  Local Char     WECCVALMAJO(GLONICVVAL)   # used by CRE_UNE_SUG
  Local Char     WECCVALMINO(GLONICVVAL)   # used by CRE_UNE_SUG
  Local Char     WCMPEVLMAJ(GLONEVL)(WBOM) : # Tab components versions
  Local Char     WCMPEVLMIN(GLONEVL)(WBOM) : # Tab components versions
  # Issue 114658 - 2016-03-22 by CCC : variables used for MWS/BWS creation
  Local Char     WECCAVA(2*GLONICVVAL+1)(WECCNBR) # versions available of the product
  Local Date     WECCSTR(WECCNBR)        : # Start of validity period for an available version
  Local Date     WECCEND(WECCNBR)        : # End of validity period for an available version
  Local Date     WEXNDAT(WECCNBR)        : # End of exception period for an available version
  Local Date     WECCSTRMIN              : # First start date of available versions
  Local Date     WECCENDMAX              : # Last end date of available versions

  # Issue 119200 - 2016-11-03 by STLIG : Maintain seperate demand dates per version
  Local Date WECCDATB(WECCNBR)

  # Issue 120673 - 2017-01-09 by STLIG : Safety stock corresponding to (best) version (see also WECCVALMAJ/MIN) ..
  Local Decimal WECCSTOSEC(WECCNBR)

  # Issue 121128 - 2019-01-16 by STLIG : cumulative demand by version ..
  Local Decimal WECCCUMDEM(WECCNBR)

  # Issue 107866 - 2019-05-30 by STLIG : PROJECT_STARTING_STOCK save outstanding available stock value
  Local Decimal WSECCSTODIS(WECCNBR)

Endif

# controle compteur suggestions
Read [ANM]ANM0=GSUG
If fstat | sum([F:ANM]POSLNG(0..dim([F:ANM]POSLNG)-1)) > GLONVCR # FQ 52198 avant 15
  WMSG = WFCY-func AFNC.MES1(mess(220,199,1),num$(GLONVCR))-GSUG
  Call ECR_TRACE(WMSG,1) From GESECRAN
  Goto ERR_TRT_FCY
Endif

#---------
# controle compteur charge et en cours
If WCAPLTI <> 0
  Read [ANM]ANM0=GWSP
  If fstat | sum([F:ANM]POSLNG(0..dim([F:ANM]POSLNG)-1)) > GLONVCR # FQ 52198 avant 15
    WMSG = WFCY-func AFNC.MES1(mess(228,199,1),num$(GLONVCR))-GWSP
    Call ECR_TRACE(WMSG,1) From GESECRAN
    Goto ERR_TRT_FCY
  Endif
Endif
# compteur module stock
Call LECTCA(7,WOK) From SUBTCA
If WOK=0
    WMSG=mess(58,105,1)-mess(7,14,1)-mess(250,199,1)
    Goto ERR_TRT_FCY
Endif
GSTKCPT(8)   =[F:TCA]CODNUM(8)
# controle compteur encours
Call CTRCPT(GSTKCPT(8), GLONVCR+10, WRET) From STKLIB
If WRET <> 0
  WMSG = WFCY-mess(222,199,1)
  Call ECR_TRACE(WMSG,1) From GESECRAN
  Goto ERR_TRT_FCY
Endif

#---------
# Chargement date début de calcul
WCALDATD = GREFDAT
WCALDATS = GREFDAT

#---------
# Correction date début si non travaillée (recherche premier jour ouvré sur un mois)
Read [F:TUV]UVY0=[F:FCY]UVYCOD
If fstat
  Raz [F:TUV]
Endif
fstat = 0
Local Decimal WCAP(31)
WCALDATF = WCALDATS+31
Call LOACAPPLN(WTWD,WCALDATS,WCALDATF,WCAP,WRET) From MFGLIB
If WRET <> 0
  WMSG = WFCY-mess(14,187,1)
  Call ECR_TRACE(WMSG,1) From GESECRAN
  Goto ERR_TRT_FCY
Endif
WCOR = 8
WCOD = 2
WDEL = 0
Call CALDAT("+",WCOR,WCALDATS,WCOD,WDEL,WCAP,WCALDATS,WCALDATD) From CBNLIB

#---------------------------------------------
# 06.08
# PE LOAD_BUCKET
GPE = 0
GPOINT = "LOAD_BUCKET" : Gosub ENTREE From EXEFNC
If !GPE
#---------
#Correction nombre de buckets
Call CORBUC(WBUCCOR,WCALDATD,WSEM,WDAYNBR,WWEENBR,WMONNBR,WCALDATF) From CBNLIB

WNBJOU = (WCALDATF-WCALDATD)+1
Local Decimal WCAP   (WNBJOU)
Local Integer WBUCNUM(WNBJOU)
Local Decimal WQTY   (WNBJOU)
WNBBUC = (WDAYNBR+WWEENBR+WMONNBR)
Local Integer WBUCCAP(WNBBUC)
Local Date    WBUCDEB(WNBBUC)
Local Date    WBUCFIN(WNBBUC)
    Local Integer WBUCTYP(WNBBUC)

#---------
#  (llc 08.00 v130) nouvelle gestion des capacités
Read [F:TUV]UVY0=[F:FCY]UVYCOD
If fstat
  Raz [F:TUV]
Endif
fstat = 0
Call LOACAPPLN(WTWD,WCALDATD,WCALDATF,WCAP,WRET) From MFGLIB
If WRET <> 0
  WMSG = WFCY-mess(14,187,1)
  Call ECR_TRACE(WMSG,1) From GESECRAN
  Goto ERR_TRT_FCY
Endif

#---------
# calcul numéros de buckets chargement tables buckets
# 11.05 33236
Call LOABUC(WCALDATD,WCAP,WBUCNUM,WBUCCAP,WBUCDEB,WBUCFIN,WBUCTYP,WSEM,WDAYNBR,WWEENBR,WMONNBR)
&    From CBNLIB

WCALDATF = WBUCFIN(WNBBUC-1)
Endif

#---------
#Calcul date début semaine traitement
WCOR = 0-WSEM
WCOD = 1
WDEL = 0
WCALDATW = WCALDATD
Call CALDAT("-",WCOR,WCALDATW,WCOD,WDEL,WCAP,WCALDATD,WCALDATW) From CBNLIB

#---------
# calcul date d'analyse
WANADATD = WCALDATW
WANADATF = WCALDATW+(WANYLTI*7)-1

#---------
# calcul date calcul charge
WCAPDATD = WCALDATW
WCAPDATF = WCALDATW+(WCAPLTI*7)-1

#---------
# lecture alternative BOM
# Read [TBO]TBO0=WLLCTYP;WBOMALT : # GH 11/05/12 bug 78125
Read [TBO]TBO0=WALTTYP;WBOMALT
If !fstat
    If ([F:TBO]FCY <> "" & [F:TBO]FCY <> WFCY) |
&      (WPRO = 1 & [F:TBO]MPSUSE <> 2)         |
&      (WPRO = 2 & [F:TBO]MRPUSE <> 2)
        # WMSG = mess(15,187,1)-num$(WBOMALT)-mess(WLLCTYP,224,1)
        WMSG = mess(15,187,1)-num$(WBOMALT)-mess(WALTTYP,224,1)
        Call ECR_TRACE(WMSG,1) From GESECRAN
        Goto ERR_TRT_FCY
    Endif
#Elsif WLLCTYP=2   # Issue 78125 pb si pas de prod ou alt inexistante en prod
#  Read [TBO]TBO0=3;WBOMALT
#  If !fstat
#      If ([F:TBO]FCY <> "" & [F:TBO]FCY <> WFCY) |
#&        (WPRO = 2 & [F:TBO]MRPUSE <> 2)
#          WMSG = mess(15,187,1)-num$(WBOMALT)-mess(3,224,1)
#          Call ECR_TRACE(WMSG,1) From GESECRAN
#          Goto ERR_TRT_FCY
#      Endif
#  Endif
Endif
Gosub DIS_PARAM From CBNLIB

#---------
# Mise à  jour statistiques traitement
ZDATFINP = date$
ZHEUFINP = time
ZNUF     = 0
Call CAL_PHASE(ZNUF,ZPHA,ZDATDEBP,ZHEUDEBP,ZDATFINP,ZHEUFINP,WFCY)
ZDATDEBP = date$
ZHEUDEBP = time
WPHAENC  = mess(2,744,1)

#---------
# Début traitement
GOK = 1

# FQ 70131 GA 12/2010 point d'entrée Delete sans Readlock
If dim(GPENOLOCK) < 0
    Global Shortint GPENOLOCK : Raz GPENOLOCK
Endif
Raz GPE
GPOINT = "NOLOCK" : Gosub ENTREE From EXEFNC
GPENOLOCK = GPE

# FQ 71455 GA 02/2011 pb sur PUR_TABLES_MONO nouvel algo
# FQ 70131 GA 12/2010 point d'entrée Delete sans Readlock
# Purge tables de travail
If GPENOLOCK
  Gosub PUR_TABLES_LOCK
Elsif WMONO <> 0
  Gosub PUR_TABLES_MONO
Else
  Gosub PUR_TABLES
  If GOK = -1
    GOK = 1
    Gosub PUR_TABLES
    If GOK = -1
      WMSG = mess(20,100,1)-GLOCK
      Call ECR_TRACE(WMSG,1) From GESECRAN
      Goto ERR_TRT_FCY
    Endif
  Endif
Endif

#---------
# Purge suggestions résiduelles (articles traités precedemment et absent du traitement)
# Issue 178496 - 2020-04-02 by STLIG : purge all suggestions if MPS and MRP products ..
If (WITMCOD <> 2 | WITM = 2)
  Trbegin [ORD]
  WSLE = 1
  WESS = 0
$TRT_FCY0
  Gosub PUR_SUG
  Case GOK
    When -1 :
      Rollback
      If WESS = 10
        WMSG = mess(20,100,1)-GLOCK
        Call ECR_TRACE(WMSG,1) From GESECRAN
        Goto ERR_TRT_FCY
      Else
        GOK   = 1
        WSLE += 1
        WESS += 1
        Trbegin [ORD]
        Goto TRT_FCY0
      Endif
    When 1 :
      Commit
    When Default :
      Rollback
      WMSG = mess(12,100,1)-"ORDERS"
      Call ECR_TRACE(WMSG,1) From GESECRAN
      Goto ERR_TRT_FCY
  Endcase
Endif

#---------
# Mise à  jour durée purge (phase 1)
ZDATFINP = date$
ZHEUFINP = time
ZNUF     = 1
Call CAL_PHASE(ZNUF,ZPHA,ZDATDEBP,ZHEUDEBP,ZDATFINP,ZHEUFINP,WFCY)
ZDATDEBP = date$
ZHEUDEBP = time
# Test retour Ok
If GOK <> 1
  Goto ERR_TRT_FCY
Endif

#---------
# Génération table de travail entête
Gosub GEN_CBNHEA

# Mise à  jour durée génération table entête (phase 2)
ZDATFINP = date$
ZHEUFINP = time
ZNUF     = 2
Call CAL_PHASE(ZNUF,ZPHA,ZDATDEBP,ZHEUDEBP,ZDATFINP,ZHEUFINP,WFCY)
ZDATDEBP = date$
ZHEUDEBP = time
# Test retour Ok
If GOK <> 1
  Goto ERR_TRT_FCY
Endif

#---------
# Génération table de travail détail
Gosub GEN_CBNDET
# Mise à  jour durée génération table détail (phase 4)
ZDATFINP = date$
ZHEUFINP = time
ZNUF     = 4
Call CAL_PHASE(ZNUF,ZPHA,ZDATDEBP,ZHEUDEBP,ZDATFINP,ZHEUFINP,WFCY)
ZDATDEBP = date$
ZHEUDEBP = time
# Test retour Ok
If GOK <> 1
  Goto ERR_TRT_FCY
Endif

# sr 07.04 demande 23375
GPOINT = "ENDSTEP4" : Gosub ENTREE From EXEFNC

#---------
# Calcul des besoins
Gosub CAL_SUG
# Mise à  jour durée calcul (phase 5)
ZDATFINP = date$
ZHEUFINP = time
ZNUF     = 5
Call CAL_PHASE(ZNUF,ZPHA,ZDATDEBP,ZHEUDEBP,ZDATFINP,ZHEUFINP,WFCY)
ZDATDEBP = date$
ZHEUDEBP = time
# test retour Ok
If GOK <> 1
  Goto ERR_TRT_FCY
Endif

# FQ 69599 GA 12/2010
GPOINT = "ENDSTEP5" : Gosub ENTREE From EXEFNC

#---------
# Mise à  jour fichier en cours
Gosub MAJ_ORDERS From FUNCBNA

# Issue 122597 - 2017-04-24 by STLIG : Remove 'MPS and MRP products' test (moved to $MAJ_GHOST)..
Gosub MAJ_GHOST  From FUNCBNA
#If WITM = 2 : Gosub MAJ_GHOST  From FUNCBNA : Endif        # 04.02 + 12.02

# Mise à  jour durée mise à  jour en cours (phase 6)
ZDATFINP = date$
ZHEUFINP = time
ZNUF     = 6
Call CAL_PHASE(ZNUF,ZPHA,ZDATDEBP,ZHEUDEBP,ZDATFINP,ZHEUFINP,WFCY)
If GOK <> 1
  Goto ERR_TRT_FCY
Endif

# sr 07.04 demande 23375
GPOINT = "ENDSTEP6" : Gosub ENTREE From EXEFNC

Goto FIN_TRT_FCY
############################################################
# Fin anormale traitement site
$ERR_TRT_FCY
# Mise à  jour durée totale
ZDATFIN = date$
ZHEUFIN = time
ZNUF    = 8
Call CAL_PHASE(ZNUF,ZPHA,ZDATDEB,ZHEUDEB,ZDATFIN,ZHEUFIN,WFCY)
Gosub AFF_STAT
# Message fin anormale
Call ECR_TRACE(WPHAENC,1) From GESECRAN
WMSG = mess(WPRO,737,1)-WFCY-mess(17,187,1)
Call ECR_TRACE(WMSG,1) From GESECRAN
Call TEMPOFF # FQ 45504 GA 03/2008 avant: From GESECRAN
Unlock =SYMBOLE
Return
############################################################
#Fin normale traitement site
$FIN_TRT_FCY
# Calcul durée totale (hors impression)
ZDATFIN = date$
ZHEUFIN = time
ZNUF    = 8
Call CAL_PHASE(ZNUF,ZPHA,ZDATDEB,ZHEUDEB,ZDATFIN,ZHEUFIN,WFCY)
############################################################
# Ecriture statistiques dans fichier trace
Gosub AFF_STAT
# Lecture paramètres et chargement date et durée dernier traitement
Trbegin [PCB]
Readlock [PCB]PCB0=WFCY
If fstat = 0
  If WPRO = 1
    [F:PCB]MPSLASDAT = WCALDATS
    [F:PCB]MPSLASLTI = ZPHA(8)/60
  Else
    [F:PCB]MRPLASDAT = WCALDATS
    [F:PCB]MRPLASLTI = ZPHA(8)/60
  Endif
  Rewrite [PCB]
    If fstat
      Rollback
      Call FSTA("PCB") From GLOCK
    Else
      Commit
    Endif
Else
  Rollback
Endif
############################################################
# Ecriture message fin normale
WMSG = mess(WPRO,737,1)-WFCY-mess(16,187,1)
Call ECR_TRACE(WMSG,0) From GESECRAN
Call TEMPOFF # FQ 45504 GA 03/2008 avant: From GESECRAN
############################################################
# Impression journal eventuelle (pas en batch)
If WPRNFLG = 2 & !GSERVEUR
 WETATP1 = mess(498,197,1) : # Site : # GH bug 78125 11/05/12
 Call ETAT(WETAT,GFONCTION,WETATP1,WFCY) From ETAT
Endif
# Deblocage exclusivité
Unlock =SYMBOLE
Return
############################################################
# Purge tables [CBH] [CBD] et [CBW] en mode Mono  utilisateur
$PUR_TABLES_MONO
Call ECR_DEBUG("PUR_TABLES_MONO:"-WFCY)
Lock [CBH]
If fstat
  GOK = 0
  Call FSTA("CBH") From GLOCK
  Goto PUR_TABLES_MONO_FIN
Endif
Lock [CBD]
If fstat
  GOK = 0
  Call FSTA("CBD") From GLOCK
  Goto PUR_TABLES_MONO_FIN
Endif
Lock [CBW]
If fstat
  GOK = 0
  Call FSTA("CBW") From GLOCK
  Goto PUR_TABLES_MONO_FIN
Endif
Lock [ORD]
If fstat
  GOK = 0
  Call FSTA("ORD") From GLOCK
  Goto PUR_TABLES_MONO_FIN
Endif
#
Trbegin [CBH]
Delete [CBH] Where STOFCY = WFCY & evalue(FORMULE_P)
Call ECR_DEBUG("PUR_TABLES_MONO: CBH"-WFCY-num$(adxdlrec)-"rows deleted")
Commit
#
Trbegin [CBD]
Delete [CBD] Where STOFCY = WFCY & evalue(FORMULE_P)
Call ECR_DEBUG("PUR_TABLES_MONO: CBD"-WFCY-num$(adxdlrec)-"rows deleted")
Commit
#
Trbegin [CBW]
Delete [CBW] Where STOFCY = WFCY & evalue(FORMULE_P)
Call ECR_DEBUG("PUR_TABLES_MONO: CBW"-WFCY-num$(adxdlrec)-"rows deleted")
Commit
#
If GMODU(8) = 2
  Trbegin [ORD]
# FQ 43416 GA 10/2007 ajout Hint Key ORD1
# Filter [ORD]ORD1
  For [ORD]ORD1 Hint Key ORD1
&              Where STOFCY  = WFCY          &
&                    FMI     < 2             &
&                    WIPSTA  = 3             &
&                    WIPTYP  = 5             &
&                    evalue(FORMULE_P)
  #For [ORD]
    Call PUR_LOA_SUG([F:ORD]STOFCY,[F:ORD]WIPNUM) From CBNLIBO
  Next
  #Filter [ORD]
Endif
Commit
#
Trbegin [ORD]
# FQ 43416 GA 10/2007 performances
#&                 (WIPTYP=2 | WIPTYP=3 | WIPTYP = 4 | WIPTYP=5 | WIPTYP = 6 | WIPTYP=7 | WIPTYP=9 | WIPTYP=13)
Delete [ORD] Where STOFCY  = WFCY          &
&                  FMI     < 2             &
&                  WIPSTA  = 3             &
&                  find(WIPTYP,2,3,4,5,6,7,9,13)<>0 &
&                  evalue(FORMULE_P)
Call ECR_DEBUG("PUR_TABLES_MONO: ORD"-WFCY-num$(adxdlrec)-"rows deleted")
Commit
#
$PUR_TABLES_MONO_FIN
Unlock [CBH], [CBD], [CBW], [ORD]
Return
############################################################
# Purge tables [CBH] [CBD] et [CBW]
# avec lock global des tables           # FQ 70131 & 71455 #
############################################################
$PUR_TABLES_LOCK
Call ECR_DEBUG("PUR_TABLES_LOCK:"-WFCY)
Lock [CBH]
If fstat
  GOK = 0
  Call FSTA("CBH") From GLOCK
  Goto PUR_TABLES_LOCK_FIN
Endif
Lock [CBD]
If fstat
  GOK = 0
  Call FSTA("CBD") From GLOCK
  Goto PUR_TABLES_LOCK_FIN
Endif
Lock [CBW]
If fstat
  GOK = 0
  Call FSTA("CBW") From GLOCK
  Goto PUR_TABLES_LOCK_FIN
Endif
Lock [ORD]
If fstat
  GOK = 0
  Call FSTA("ORD") From GLOCK
  Goto PUR_TABLES_LOCK_FIN
Endif
#
Filter [CBH] Where [F:CBH]STOFCY=WFCY & evalue(FORMULE_P)
#
Trbegin [CBH]
WCOM = 0
For [CBH]
  WCOM += 1
  Gosub PUR_CBD_LOCK
  If GOK <> 1
    Break
  Endif
  Gosub PUR_CBW_LOCK
  If GOK <> 1
    Break
  Endif
  Gosub PUR_ORD_LOCK
  If GOK <> 1
    Break
  Endif
  Delete [CBH]
  If fstat
    GOK = 0
    Call FSTA("CBH") From GLOCK
    Break
  Endif
  If WCOM >= WCOMMAX
    Break
  Endif
Next
Filter [CBH]
If WCOM <> 0
  If GOK = 1
    Commit
    Call ECR_DEBUG(WFCY-"CBH"-num$(WCOM)-mess(20,133,1))
    Goto  PUR_TABLES_LOCK
  Else
    Rollback
  Endif
Else
  Commit
Endif
$PUR_TABLES_LOCK_FIN
Unlock [CBH], [CBD], [CBW], [ORD]
Return
############################################################
# Purge table détail                   # table déjà lockée #
$PUR_CBD_LOCK
Filter [CBD] Where STOFCY = [F:CBH]STOFCY & ITMREF = [F:CBH]ITMREF
&            Order By Key CBD3
#
For [CBD]CBD3 Hint Key CBD3
    Delete [CBD]
    If fstat
      GOK = 0
      Call FSTA("CBD") From GLOCK
      Break
    Endif
Next
Filter [CBD]
Return
############################################################
# Purge table de travail               # table déjà lockée #
$PUR_CBW_LOCK
Filter [CBW] Where STOFCY = [F:CBH]STOFCY & ITMREF = [F:CBH]ITMREF
&            Order By Key CBW0
#
For [CBW]
  Readlock [CBW]CBW0=[F:CBW]STOFCY;[F:CBW]ITMREF;[F:CBW]RECCOD;[F:CBW]DAT
  Case fstat
    When 1 :
      GOK = -1
      GLOCK = "$CBNWRK"-[F:CBW]STOFCY-[F:CBW]ITMREF-num$([F:CBW]RECCOD)-num$([F:CBW]DAT)
      Break
    When 0 :
      Delete [CBW]
      If fstat
        GOK = 0
        Call FSTA("CBW") From GLOCK
        Break
      Endif
    When Default :
      GOK = 0
      Call FSTA("CBW") From GLOCK
      Break
  Endcase
Next
Filter [CBW]
Return
############################################################
# Purge anciennnes suggestions         # table déjà lockée #
$PUR_ORD_LOCK
WSLE = 1
WESS = 0
$PUR_ORD_LOCK1
For [ORD]ORD4 Hint Key ORD4
&             Where ITMREF  = [F:CBH]ITMREF &
&                   STOFCY  = [F:CBH]STOFCY &
&                   FMI     < 2             &
&                   WIPSTA  = 3             &
&                   find(WIPTYP,2,3,4,5,7,9,13)<>0
  If (WPRO = 1 & [F:ORD]ORI = 5) |
&    (WPRO = 2 & [F:ORD]ORI = 6)
        Call DELSUG From CBNLIB
        If GOK <> 1
          Break
        Endif
  Endif
Next
If GOK = -1
  Sleep WSLE
  If WESS = 10
    Call ECR_TRACE(mess(20,100,1)-"ORDERS"-[F:CBH]ITMREF-[F:CBH]STOFCY,1) From GESECRAN
  Else
    GOK   = 1
    WESS += 1
    WSLE += 1
    Goto PUR_ORD_LOCK1
  Endif
Endif
Return
############################################################
# Purge suggestions résiduelles
$PUR_SUG_LOCK
  For [ORD]ORD1 Hint Key ORD1
&             Where STOFCY  = WFCY          &
&                   FMI     < 2             &
&                   WIPSTA  = 3             &
&                   find(WIPTYP,2,3,4,5,6,7,9,13)<>0 &
&                   evalue(FORMULE_P)
  If (WPRO = 1 & [F:ORD]ORI = 5) |
&    (WPRO = 2 & [F:ORD]ORI = 6)
    Readlock [ORD] Curr
    Case fstat
      When 0 :
        Call DELSUG From CBNLIB
        If GOK <> 1
          Break
        Endif
      When 1 :
        GOK = -1
        GLOCK = "$ORDERS"-[F:ORD]STOFCY-num$([F:ORD]WIPTYP)-[F:ORD]WIPNUM-[F:ORD]ITMREF
        Break
      When 4,5 :
      When Default :
        GOK = 0
        Call FSTA("ORD") From GLOCK
        Break
    Endcase
  Endif
Next
Return
############################################################
# Purge tables [CBH] [CBD] et [CBW]
# avec lock ligne par ligne
############################################################
$PUR_TABLES
Call ECR_DEBUG("PUR_TABLES:"-WFCY)

# Purge table entete
Filter [CBH] Where [F:CBH]STOFCY=WFCY & evalue(FORMULE_P)
#
Trbegin [CBH]
WCOM = 0
For [CBH]
  WCOM += 1
  Readlock [CBH]CBH0=[F:CBH]STOFCY;[F:CBH]ITMREF
  Case fstat
    When 1 :
      GOK = -1
      Break
    When 0 :
      Gosub PUR_CBD
      If GOK <> 1
        Break
      Endif
      Gosub PUR_CBW
      If GOK <> 1
        Break
      Endif
      Gosub PUR_ORD
      If GOK <> 1
        Break
      Endif
      Delete [CBH]
      If fstat
        GOK = 0
        Call FSTA("CBH") From GLOCK
        Break
      Endif
    When Default :
      GOK = 0
      Call FSTA("CBH") From GLOCK
      Break
  Endcase
  If WCOM >= WCOMMAX
    Break
  Endif
Next
Filter [CBH]
If WCOM <> 0
  If GOK = 1
    Commit
    Call ECR_DEBUG(WFCY-"CBH"-num$(WCOM)-mess(20,133,1))
    Goto  PUR_TABLES
  Else
    Rollback
  Endif
Else
  Commit
Endif
Return
############################################################
# Purge table détail
$PUR_CBD
# FQ 43416 GA 22/10/2007 performances CBD0 => CBD3
Filter [CBD] Where STOFCY = [F:CBH]STOFCY & ITMREF = [F:CBH]ITMREF
&            Order By Key CBD3
#
For [CBD]CBD3 Hint Key CBD3
# FQ 43416 performances CBD0 => CBD3
# Readlock [CBD]CBD0=[F:CBD]STOFCY;[F:CBD]ITMREF;[F:CBD]BUC;[F:CBD]REQDAT;
  Readlock [CBD]CBD3=[F:CBD]ITMREF;[F:CBD]STOFCY;[F:CBD]BUC;[F:CBD]REQDAT;
&                    [F:CBD]WIPTYP;[F:CBD]WIPNUM
  Case fstat
    When 1 :
      GOK = -1
      GLOCK = "$CBNDET"-[F:CBD]STOFCY-[F:CBD]ITMREF-num$([F:CBD]BUC)-num$([F:CBD]REQDAT)-
&             num$([F:CBD]WIPTYP)-[F:CBD]WIPNUM
      Break
    When 0 :
      Delete [CBD]
      If fstat
        GOK = 0
        Call FSTA("CBD") From GLOCK
        Break
      Endif
    When Default :
      GOK = 0
      Call FSTA("CBD") From GLOCK
      Break
  Endcase
Next
Filter [CBD]
Return
############################################################
# Purge table de travail
$PUR_CBW
Filter [CBW] Where STOFCY = [F:CBH]STOFCY & ITMREF = [F:CBH]ITMREF
&            Order By Key CBW0
#
For [CBW]
  Readlock [CBW]CBW0=[F:CBW]STOFCY;[F:CBW]ITMREF;[F:CBW]RECCOD;[F:CBW]DAT
  Case fstat
    When 1 :
      GOK = -1
      GLOCK = "$CBNWRK"-[F:CBW]STOFCY-[F:CBW]ITMREF-num$([F:CBW]RECCOD)-num$([F:CBW]DAT)
      Break
    When 0 :
      Delete [CBW]
      If fstat
        GOK = 0
        Call FSTA("CBW") From GLOCK
        Break
      Endif
    When Default :
      GOK = 0
      Call FSTA("CBW") From GLOCK
      Break
  Endcase
Next
Filter [CBW]
Return
############################################################
# Purge anciennnes suggestions
$PUR_ORD
WSLE = 1
WESS = 0
$PUR_ORD1
# FQ 43416 GA 10/2007 performances + ajout ajout Hint Key ORD4
#&                 (WIPTYP=2 | WIPTYP=5 | WIPTYP=7 | WIPTYP=9 | WIPTYP=13)
#Filter [ORD]ORD4
For [ORD]ORD4 Hint Key ORD4
&             Where ITMREF  = [F:CBH]ITMREF &
&                   STOFCY  = [F:CBH]STOFCY &
&                   FMI     < 2             &
&                   WIPSTA  = 3             &
&                   find(WIPTYP,2,3,4,5,7,9,13)<>0
#For [ORD]
  # Issue 178496 - 2020-04-02 by STLIG : purge all suggestions if MPS and MRP products
  # regardless of source / current process ..
  If (WPRO = 1 & [F:ORD]ORI = 5) |
&    (WPRO = 2 & [F:ORD]ORI = 6) |
&    (WITM = 2 & find([F:ORD]ORI,5,6))
    Readlock [ORD] Curr
    Case fstat
      When 0 :
        Call DELSUG From CBNLIB
        If GOK <> 1
          Break
        Endif
      When 1 :
        GOK = -1
        Break
      When Default :
        GOK = 0
        Call FSTA("ORD") From GLOCK
        Break
    Endcase
  Endif
Next
#Filter [ORD]
If GOK = -1
  Sleep WSLE
  If WESS = 10
    Call ECR_TRACE(mess(20,100,1)-"ORDERS"-[F:CBH]ITMREF,1) From GESECRAN
  Else
    GOK   = 1
    WESS += 1
    WSLE += 1
    Goto PUR_ORD1
  Endif
Endif
Return
############################################################
# Purge suggestions résiduelles
$PUR_SUG
# FQ 43416 GA 10/2007 performances  + ajout ORD1 sur le For
#                     (WIPTYP=2 | WIPTYP=5 | WIPTYP = 6 | WIPTYP=7 | WIPTYP=9 | WIPTYP=13)
#                     avant: Filter [ORD]ORD1 Where ... + For [ORD]
# FQ 45960 GA 02/2008 Where STOFCY  = [F:CBH]STOFCY &
# Issue 107243 GA 03/2015 improve performance: find(...)<>0
  For [ORD]ORD1 Hint Key ORD1
&             Where STOFCY  = WFCY          &
&                   FMI     < 2             &
&                   WIPSTA  = 3             &
&                   find(WIPTYP,2,3,4,5,6,7,9,13)<>0 &
&                   evalue(FORMULE_P)
  # Issue 178496 - 2020-04-02 by STLIG : purge all suggestions if MPS and MRP products
  # regardless of source / current process ..
  If (WPRO = 1 & [F:ORD]ORI = 5) |
&    (WPRO = 2 & [F:ORD]ORI = 6) |
&    (WITM = 2 & find([F:ORD]ORI,5,6))
    # Issue 107243 GA 03/2015 improve performance ORD0=WIPTYP+WIPNUM+ITMREF primary key
    #Readlock [ORD]  Curr
    Readlock [ORD]ORD0=[F:ORD]WIPTYP;[F:ORD]WIPNUM;[F:ORD]ITMREF
    Case fstat
      When 0 :
        Call DELSUG From CBNLIB
        If GOK <> 1
          Break
        Endif
      When 1 :
        GOK = -1
        GLOCK = "$ORDERS"-[F:ORD]STOFCY-num$([F:ORD]WIPTYP)-[F:ORD]WIPNUM-[F:ORD]ITMREF
        Break
      When 4,5 :
      When Default :
        GOK = 0
        Call FSTA("ORD") From GLOCK
        Break
    Endcase
  Endif
Next
#Filter [ORD]
Return
############################################################
# Génération table de travail (entete)
$GEN_CBNHEA
WART = ""
# FQ 44106 GA 11/2007
Gosub SET_FIRST From TRTFIRST
$GEN_CBNHEA1
Trbegin [CBH]
WCOM = 0
Local Integer WSCO : WSCO = 1 # FQ 58893 GA 10/2009

#220549: entry point - set WREOMGT = 1 to ignore products 'not managed' ..
GPOINT = "REOMGT" : Gosub ENTREE From EXEFNC
If (WREOMGT = 1)
  FORMULE_S = "[F:ITF]REOMGTCOD>1"
Endif

Link [ITF] With [ITM]ITM0=[F:ITF]ITMREF As [ITX]
&          Where [F:ITF]STOFCY = WFCY  &
&                [F:ITF]ITMREF > WART  &
&                [F:ITM]ITMSTA < 4     &
&                ([F:ITM]LIFSTRDAT = [0/0/0] | [F:ITM]LIFSTRDAT <= WCALDATF) &
&                ([F:ITM]LIFENDDAT = [0/0/0] | [F:ITM]LIFENDDAT >= WCALDATD) &
&                evalue(FORMULE_S)
&          Order By Key ITF1

# FQ 69505 GA 12/2010
GPE=0 : GPOINT = "NOHINT"
Gosub ENTREE From EXEFNC
If !GPE
  For [ITX]
    Gosub TRT_ITX
    If GOK=0 | WCOM >= WCOMMAX : Break : Endif
  Next
Else
  For [ITX] With Nohint   # FQ 69505 GA 12/2010
    Gosub TRT_ITX
    If GOK=0 | WCOM >= WCOMMAX : Break : Endif
  Next
Endif
# Issue 106003 GA 02/2015 not the correct moment to test that !
#If WSCO=2    # FQ 58893 GA 10/2009 si réappro sous-traitance
#    # Vérifier alternative de nomenclature sinon pb de cohérence des données
#    Local Integer  WBOMALTTYP : WBOMALTYP = 3
#    Read [TBO]TBO0=WBOMALTYP;WBOMALT
#    If fstat
#       # Alternative de nomenclature inexistante !
#        WMSG = mess(154,193,1)-num$(WBOMALT)-mess(WBOMALTYP,224,1)
#        Call ECR_TRACE(WMSG,1) From GESECRAN
#    Elsif ([F:TBO]FCY <> "" & [F:TBO]FCY <> WFCY) |
#&      (WPRO = 1 & [F:TBO]MPSUSE <> 2)         |
#&      (WPRO = 2 & [F:TBO]MRPUSE <> 2)
#        WMSG = mess(15,187,1)-num$(WBOMALT)-mess(WBOMALTYP,224,1)
#        Call ECR_TRACE(WMSG,1) From GESECRAN
#    Endif
#Endif
If GOK = 1
    Commit
    If WCOM <> 0
       Call ECR_DEBUG(WFCY-"CBH"-num$(WCOM)-mess(103,141,1))
       Goto GEN_CBNHEA1
    Endif

Else
    Rollback
Endif
# FQ 44106 GA 11/2007
Gosub UNSET_FIRST From TRTFIRST
Return
##########################################################################
$TRT_ITX                                           # FQ 69505 GA 12/2010 #
    Call ECR_DEBUG(">>>> "+[F:ITF]STOFCY-[F:ITF]ITMREF-mess([F:ITF]REOCOD,250,1))
    If [F:ITM]LIFSTRDAT = [0/0/0] : [F:ITM]LIFSTRDAT = WCALDATD : Endif
    If [F:ITM]LIFENDDAT = [0/0/0] : [F:ITM]LIFENDDAT = WCALDATF : Endif
    If [F:ITF]REOMGTCOD = 0       : [F:ITF]REOMGTCOD = 1        : Endif
    Raz [F:CBH]
    [F:CBH] = [F:ITM]
    [F:CBH] = [F:ITF]
    WFSTAT = fstat
    # Lecture politique reaprovisionnement
    If [F:ITF]REOPOL <> ""
        Read [TRP]TRP0=[F:ITF]REOPOL
            If fstat  : Raz [F:TRP] : Endif
    Else
        Raz [F:TRP]
    Endif
    [F:CBH] = [F:TRP]

    # Issue 83767 GA 07/2012
    If dim([F:CBH]ITMDES1) > 0
       Call CHARGE_DEFITMDES("DES1AXX",GLANGUE,[F:ITM]ITMREF,[F:CBH]ITMDES1, "[F:ITM]") From TRTX3
    Endif

    Case [F:ITF]REOCOD
      When 5 :                    # Sous-traitance
         [F:CBH]BOMALTTYP = 3   : # V6
         WSCO = 2                 # FQ 58893 GA 10/2009
      When Default :              # Fabrication      # FQ 51391 tjs ajouter BOMALTTYP
         [F:CBH]BOMALTTYP = 2   : # V6
         WSCO = 1
    Endcase
    [F:CBH]BOMALT = WBOMALT

   # Prise en compte pourcentage de perte
    If [F:TRP]SHRFLG <> 2 : [F:CBH]SHR = 0 : Endif
    # Modification mode réapro si traitement article PDP + CBN
    If WPRO = 1 & WITM = 2 & [F:CBH]REOMGTCOD = 2 : [F:CBH]REOMGTCOD = 3 : Endif
    If WPRO = 2 & WITM = 2 & [F:CBH]REOMGTCOD = 3 : [F:CBH]REOMGTCOD = 2 : Endif
    # Modification code stock sécurité si paramètre ignorer
    If WSAFSTO = 2 : [F:CBH]SAFSTOCOD = 1 : Endif
    # Modification couverture si paramètre ignorer
    If WCOVFLG = 2 : [F:CBH]DAYCOV = 0    : Endif
    # Forcage pas d'analyse si pas d'analyse en général
    If WANYLTI = 0
&    | (WRPLMOD(0) = 1 & WRPLMOD(1) = 1 & WRPLMOD(2) = 1
&     & WRPLMOD(3) = 1 & WRPLMOD(4) = 1 & WRPLMOD(5) = 1
&     & WRPLMOD(6) = 1 & WRPLMOD(7) = 1 )
        [F:CBH]PLNANYCOD = 1
    Endif
    # Lecture unité de stock
    Read [TUN]TUN0=[F:ITM]STU
    If fstat
        [F:CBH]STUDEC = 0
    Else
        [F:CBH]STUDEC = [F:TUN]UOMDEC
    Endif
    # Lecture article nomenclature pour code plus bas niveau
    Read [ITB]ITB0=[F:ITF]ITMREF;WBOMALT;WLLCTYP
    If fstat
        [F:CBH]LLC = 99
    Else
        [F:CBH]LLC = [F:ITB]LLC
    Endif
    fstat = WFSTAT
    # Calcul date fin horizon ferme
    If [F:ITF]PLH = 0
        [F:CBH]PLHENDDAT = WCALDATD-1
    Else
        WCOR = 0
        WCOD = [F:ITF]PLHUOT
        WDEL = [F:ITF]PLH
        Call CALDAT("+",WCOR,WCALDATD,WCOD,WDEL,WCAP,WCALDATD,[F:CBH]PLHENDDAT)
&                From CBNLIB
        If [F:CBH]PLHENDDAT > WCALDATF : [F:CBH]PLHENDDAT = WCALDATF : Endif
    Endif
    # Calcul date fin horizon demande arrondi fin semaine
    If [F:ITF]FOH = 0 | WHORDEM <> 2
        [F:CBH]FOHENDDAT = WCALDATD-1
    Else
        If WSEM = 1
            WCOR = 7
        Else
            WCOR = WSEM-1
        Endif
        WCOD = [F:ITF]FOHUOT
        WDEL = [F:ITF]FOH
        Call CALDAT("+",WCOR,WCALDATW,WCOD,WDEL,WCAP,WCALDATD,[F:CBH]FOHENDDAT)
&            From CBNLIB
        If [F:CBH]FOHENDDAT > WCALDATF : [F:CBH]FOHENDDAT = WCALDATF : Endif
    Endif
    # Détermination stock de départ
    # Calculate initial stock
    WFSTAT = fstat
    # FQ 43416 GA 10/2007 performances
    #Read [ITV]ITV1=[F:ITF]STOFCY;[F:ITF]ITMREF
    Read [ITV]ITV0=[F:ITF]ITMREF;[F:ITF]STOFCY
    If fstat  : Raz [F:ITV] : Endif
    fstat = WFSTAT
    [F:CBH]PHYSTO = [F:ITV]PHYSTO
    [F:CBH]CTLSTO = [F:ITV]CTLSTO
    [F:CBH]REJSTO = [F:ITV]REJSTO
    [F:CBH]INTSTO = [F:ITV]PHYSTO    + [F:ITV]CTLSTO     + [F:ITV]REJSTO
    [F:CBH]PLFSTO = [F:ITV]PLFPHYSTO + [F:ITV]PLFCTLSTO  + [F:ITV]PLFREJSTO
    [F:CBH]BPRSTO = [F:ITV]BPRPHYSTO + [F:ITV]BPRCTLSTO  + [F:ITV]BPRREJSTO
    [F:CBH]SCOSTO = [F:ITV]SCOPHYSTO + [F:ITV]SCOCTLSTO  + [F:ITV]SCOREJSTO
    [F:CBH]ALLSTO = [F:ITV]PHYALL    + [F:ITV]CTLALL     + [F:ITV]REJALL
    [F:CBH]GLOALL = [F:ITV]GLOALL
    [F:CBH]DETSHT = [F:ITV]DETSHT   # Issue 95567 GA 10/2014
    [F:CBH]GLOSHT = [F:ITV]GLOSHT   # Issue 95567 GA 10/2014
    [F:CBH]SALSTO = [F:ITV]SALSTO
    [F:CBH]TRFSTO = [F:ITV]TRFSTO
    [F:CBH]TRASTO = [F:ITV]TRASTO
    [F:CBH]ORDSTO = [F:ITV]ORDSTO
    [F:CBH]WAISTO = [F:ITV]WAISTO
    [F:CBH]STRSTO = 0

    If (WPRO = 1 & [F:CBH]REOMGTCOD = 3) |
&      (WPRO = 2 & [F:CBH]REOMGTCOD = 2)
        # 04.06 Révision calcul du stock de départ
        If WPHYSTO = 2
            [F:CBH]STRSTO += [F:ITV]PHYSTO
            [F:CBH]STRSTO += [F:ITV]PLFPHYSTO
            [F:CBH]STRSTO -= [F:ITV]PHYALL
            [F:CBH]STRSTO -= [F:ITV]GLOALL
            [F:CBH]STRSTO += [F:ITV]SCOPHYSTO
            [F:CBH]STRSTO -= [F:ITV]SCOPHYALL
        Endif
        Case WCTLSTO
            When 2 :    [F:CBH]STRSTO += [F:ITV]CTLSTO
                        [F:CBH]STRSTO += [F:ITV]PLFCTLSTO
                        [F:CBH]STRSTO += [F:ITV]SCOCTLSTO
                        [F:CBH]STRSTO -= [F:ITV]CTLALL
                        [F:CBH]STRSTO -= [F:ITV]SCOCTLALL

                        # Issue 118553 - 2018-12-11 by STLIG : for quality control stock (by date) -
                        # process version product in CTL_STO_ECC
            When 3 :    If (!WECCFLG | [F:ITM]ECCFLG <> 2)
                          Gosub CTL_STO
                        Endif

        Endcase
        If WREJSTO = 2
            [F:CBH]STRSTO += [F:ITV]REJSTO
            [F:CBH]STRSTO += [F:ITV]PLFREJSTO
            [F:CBH]STRSTO += [F:ITV]SCOREJSTO
            [F:CBH]STRSTO -= [F:ITV]SCOREJALL
            [F:CBH]STRSTO -= [F:ITV]REJALL
        Endif
        If WTRFSTO = 2
            # 09.06 37574
            WITMREF = [F:CBH]ITMREF
            WTRF = [F:ITV]TRFSTO
            #Gosub TRT_TRANSIT From CNSSPRSTD
            Gosub TRT_TRFSTO # Issue 95682 GA 01/2014
            [F:CBH]STRSTO += WTRFCAL
        Endif

        # Issue 229247 - 2021-04-12 by STLIG : process pending issues
        If WWAISTO = 2 & [F:ITV]WAISTO
          Gosub GEN_PENDING_ISSUES
          If GOK <> 1
            Return
          Endif
        Endif

        If dim(GSTODISSCO) > 0 & GSTODISSCO = 1
            If WPHYSTO = 2
                [F:CBH]STRSTO -= [F:ITV]SCOPHYSTO
                [F:CBH]STRSTO += [F:ITV]SCOPHYALL
            Endif
            If WCTLSTO = 2
                [F:CBH]STRSTO -= [F:ITV]SCOCTLSTO
                [F:CBH]STRSTO += [F:ITV]SCOCTLALL
            Endif
            If WREJSTO = 2
                [F:CBH]STRSTO -= [F:ITV]SCOREJSTO
                [F:CBH]STRSTO += [F:ITV]SCOREJALL
            Endif
        Endif

        # Calcul stocks périmés et stockage à  date dans CBW
        # Estimate expired stock qty and write it in CBW
        [F:CBH]EXYSTOFLG = 1
        If [F:ITM]EXYMGTCOD <> 1 & WPHYSTO = 2 : Gosub EXP_STO : Endif

        # Issue 85397 GA 11/2012 Only when WPHYSTO=Yes + new Entry Point NOADJUST
        # Issue 80411 GA 02/2012 Only when WSOFFLG=Yes
        GPE=0 : GPOINT = "NOADJUST" : Gosub ENTREE From EXEFNC
        If !GPE & WSOFFLG=2 & WPHYSTO=2
          # 09.09
          Gosub ADJUST_QTYDLVSHT

          # Issue 80405 GA 03/2012
          # Issue 244233 - 2021-05-13 by STLIG : ignore subcontract delivery allocations..
          # (re-engineer function)
          [F:CBH]STRSTO += func FUNCBN.ADJUST_SRGQTYSTU

        Endif

        GPOINT = "STRSTO"
        Gosub ENTREE From EXEFNC
    Endif
    # Flag optimisation
    [F:CBH]ORDFLG = 1
    Look [ORD]ORD1=[F:CBH]STOFCY;[F:CBH]ITMREF
    If !fstat : [F:CBH]ORDFLG = 2 : Endif
    If WECCFLG
       # is stock main issue rule flagged "Version exclusive" ?
       Case [F:CBH]BOMALTTYP
          When 2  : # Production
            Call LECSRU([F:CBH]STOFCY,[F:ITM]TCLCOD, 6, "", "",WRET) From STKLIB
          When 3  : # Subcontracting
            Call LECSRU([F:CBH]STOFCY,[F:ITM]TCLCOD, 29, "", "",WRET) From STKLIB
          When Default : Raz [F:SRU]
       Endcase
       [F:CBH]ECCSTO=[F:ITM]ECCSTO
       [F:CBH]ORDVER=[F:SRU]ORDVER
       If [F:ITF]REOCOD>1 [F:CBH]ORDVER=2 Endif # use version if there is one
    Endif
    [F:CBH]CREUSR = GUSER
    [F:CBH]CREDAT = date$
    [F:CBH]EXPNUM = [C]EXPORT
    WPHAENC  = mess(2,744,1)-[F:CBH]ITMREF-[F:CBH]ITMDES1
    GPOINT = "BEFWRICBH"
    Gosub ENTREE From EXEFNC
    Write [CBH]
    If fstat
        GOK = 0
        Call FSTA("CBH") From GLOCK
        Return
    Endif
    WCOM += 1
    WART  = [F:ITF]ITMREF
Return

# Issue 229247 - 2021-04-12 by STLIG : process pending issues
$GEN_PENDING_ISSUES
  If clalev([F:STJ]) = 0 : Local File STOJOU [STJ] : Endif

  Filter [STJ] Where ITMREF = [F:CBH]ITMREF and
&                    STOFCY = WFCY and
&                    TRSTYP = 4 and
&                    STA = "" and
&                    QTYSTU < 0
  For [STJ]
    Raz [F:ORD] : [F:ORD] = [F:STJ]

    Call NUMERO(GSUG,WFCY,WCALDATD,"",[F:ORD]WIPNUM,WRET) From SUBANM
    If WRET <> 0
      Call ECR_TRACE(mess(66,187,1),1) From GESECRAN
      GOK = 0
      Break
    Endif

    [F:ORD]WIPTYP    = 1
    [F:ORD]WIPSTA    = 1
    [F:ORD]STRDAT    = WCALDATD
    [F:ORD]ENDDAT    = [F:ORD]STRDAT
    [F:ORD]RMNEXTQTY = abs([F:STJ]QTYSTU)
    [F:ORD]MRPMES    = 1
    Gosub TRT_ORD
    If GOK <> 1
      Break
    Endif
  Next
  Filter [STJ]

Return

############################################################
# Traitement du stock sous contrôle à  date
$CTL_STO
If [F:ITV]CTLSTO > 0
    Filter [STO] Where STOFCY       = [F:ITF]STOFCY &
&                      ITMREF       = [F:ITF]ITMREF &
&                      QTYSTUACT    > 0             &
&                      left$(STA,1) = "Q"
&                Order By Key STO3
    For [STO]
        If [F:STO]QLYCTLDEM = ""
            [F:CBH]STRSTO += [F:STO]QTYSTUACT - [F:STO]CUMALLQTA - [F:STO]CUMWIPQTA                    # 04.06 révision stock départ
        Else
            Link [QLD] With [QLH]QLH0=28;[F:QLD]VCRNUM As [QLX]
&                      Where VCRNUM   =[F:STO]QLYCTLDEM
&                          & ITMREF   =[F:ITF]ITMREF
&                          & STOFCY   =[F:ITF]STOFCY
&                          & LOT      =[F:STO]LOT
&                          & SLO      =[F:STO]SLO
&                          & PALNUM   =[F:STO]PALNUM
&                          & CTRNUM   =[F:STO]CTRNUM
&                          & STA      =[F:STO]STA
&                          & LOC      =[F:STO]LOC
&                          & PCU      =[F:STO]PCU
&                          & PCUSTUCOE=[F:STO]PCUSTUCOE
&                          & SERNUM   =[F:STO]SERNUM
&                          & OWNER    =[F:STO]OWNER
&                      Order By Key QLD1
            For [QLX]
                If fstat
                    [F:CBH]STRSTO += [F:STO]QTYSTUACT - [F:STO]CUMALLQTA - [F:STO]CUMWIPQTA            # 04.06 révision stock départ
                Else
                    If [F:QLH]ENDCTLDAT <= WCALDATF
                        If [F:QLH]ENDCTLDAT <= WCALDATD
                            [F:CBH]STRSTO += [F:STO]QTYSTUACT - [F:STO]CUMALLQTA - [F:STO]CUMWIPQTA    # 04.06 révision stock départ
                            Break    # Issue 103058 GA 12/2014 only one time for each QA control
                        Else
                            # Ecriture ressource diverse
                            Raz [F:CBD]
                            [F:CBD]           = [F:CBH]
                            [F:CBD]WIPTYP     = 11
                            [F:CBD]WIPSTA     = 1
                            Call NUMERO(GSUG,WFCY,WCALDATD,"",[F:CBD]WIPNUM,WRET) From SUBANM
                            If WRET <> 0
                                Call ECR_TRACE(mess(66,187,1),1) From GESECRAN
                                GOK = 0
                                Break 2
                            Endif
                            [F:CBD]REQQTY     = [F:STO]QTYSTUACT - [F:STO]CUMALLQTA - [F:STO]CUMWIPQTA  # 04.06 révision stock départ
                            [F:CBD]RMNEXTQTY  = [F:CBD]REQQTY
                            [F:CBD]STRDAT     = [F:QLH]ENDCTLDAT
                            [F:CBD]ENDDAT     = [F:QLH]ENDCTLDAT
                            If [F:CBD]ENDDAT < WCALDATD
                                [F:CBD]REQDAT   = WCALDATD
                            Else
                                [F:CBD]REQDAT   = [F:CBD]ENDDAT
                            Endif
                            I = [F:CBD]REQDAT - WCALDATD
                            If I < 0          : I = 0          : Endif
                            If I > WNBJOU - 1 : I = WNBJOU - 1 : Endif
                            [F:CBD]BUC = WBUCNUM(I)
                            # 11.05 33236
                            # Si que des buckets 'mois' bucket demande = mois
                            Case WBUCTYP([F:CBD]BUC)
                                When 1,2:    [F:CBD]DEMBUC = (year([F:CBD]REQDAT)*1000)+(WBUCTYP([F:CBD]BUC)*100)+week([F:CBD]REQDAT)
                                When 3:      [F:CBD]DEMBUC = (year([F:CBD]REQDAT)*1000)+(WBUCTYP([F:CBD]BUC)*100)+month([F:CBD]REQDAT)
                            Endcase
                            [F:CBD]CREUSR     = GUSER
                            [F:CBD]CREDAT     = date$
                            [F:CBD]CREDATTIM = datetime$    # 108577
                            [F:CBD]UPDUSR     = GUSER
                            #[F:CBD]UPDDAT    = date$
                            [F:CBD]UPDDATTIM = datetime$    # 108577
                            [F:CBD]EXPNUM     = [C]EXPORT

Call ECR_DEBUG("CTL_STO Write CBD Itm="+[F:CBD]ITMREF-"WipTyp="+num$([F:CBD]WIPTYP)
&                            -num$([F:CBD]REQDAT)-num$([F:CBD]STRDAT)-num$([F:CBD]ENDDAT)-[F:CBD]WIPNUM)

                            # Issue 38521 - 2017-10-06 by STLIG : Add the CTLSTO entry point
                            GPE=0
                            GPOINT = "CTLSTO" : Gosub ENTREE From EXEFNC
                            If (GOK<1)
                              Break 2
                            Elsif (GPE=0)
                              Write [CBD]
                              If fstat
                                GOK = 0
                                Call FSTA("CBD") From GLOCK
                                Break 2
                              Endif
                            Endif

                        Endif
                    Endif
                Endif
            Next
        Endif
    Next
    Filter [STO]
Endif
Return

############################################################
# déduction de la somme des ruptures sur livraison du stock de départ
# 09.09
$ADJUST_QTYDLVSHT
Local Decimal WSHTQTYDLV : WSHTQTYDLV = 0
Local Shortint W_SCO : W_SCO=1   # Issue 87764 GA 02/2013 ligne manquante

# Issue 80405 GA 03/2012 tenir compte des bons de prépa en rupture VCRTYP=3
# FQ 77924 GA 11/2011 il manque le site + perf utiliser l'index STA0
# somme des ruptures sur livraison pour l'article
#For [STA]STA2 Where ITMREF = [F:ITF]ITMREF & VCRTYP = 4 & ALLTYP = 4
For [STA]STA0 Where STOFCY = [F:ITF]STOFCY & ITMREF = [F:ITF]ITMREF & find(VCRTYP,3,4)<>0 & ALLTYP = 4
    # Issue 86370 GA 01/2013 seulement si sous-traitance=transfert d'emplacement
    Gosub CTRL_SUBCONTRACT
    If W_SCO=2
       WSHTQTYDLV += [F:STA]QTYSTUACT
    Endif
Next

[F:CBH]STRSTO -= WSHTQTYDLV
Return

############################################################
# somme des prépa et liv non validées allouées
# pour l'article-site courant (manquants sous-traitance)
############################################################
# Issue 244233 - 2021-05-13 by STLIG :
# (re-engineer function)
Funprog ADJUST_SRGQTYSTU
Local Decimal LSRGQTYSTU : LSRGQTYSTU = 0
Local Shortint W_SCO : W_SCO=1

# Issue 80405 GA 03/2012
# Issue X3-38549 - 2017-07-28 by STLIG : Find reorder plan (34) allocations..
For [STA]STA0 Where STOFCY = [F:CBH]STOFCY & ITMREF = [F:CBH]ITMREF & find(VCRTYP,3,4,34)<>0 & ALLTYP <> 4
    # Issue 86370 GA 01/2013 seulement si sous-traitance=transfert d'emplacement
    Gosub CTRL_SUBCONTRACT
    # Issue X3-38549 - 2017-07-28 by STLIG : Reorder plan (34) allocations adjust starting stock..
    If W_SCO = 2
      LSRGQTYSTU += [F:STA]QTYSTUACT
    Elsif [F:STA]VCRTYP = 34
      LSRGQTYSTU += [F:STA]QTYSTUACT
    Endif
Next

End LSRGQTYSTU

############################################################
# BL/BP de sous-traitance ?
############################################################
$CTRL_SUBCONTRACT
If !clalev([F:SDH]) : Local File SDELIVERY  [SDH] : Endif
If !clalev([F:PRE]) : Local File STOPRED    [PRE]  : Endif
Case [F:STA]VCRTYP
   When 4 : # BL
       Read [SDH]SDH0=[F:STA]VCRNUM
       If fstat : Raz [F:SDH] : Endif
       # Issue 158525 - 2019-09-03 by STLIG : delivery category = 'For subcontract'
       If ([F:SDH]SDHCAT = 3)
         W_SCO = 2
       Endif
   When 3 : # BP
       Read [PRE]PRE0=[F:STA]VCRNUM;[F:STA]VCRLIN
       If fstat : Raz [F:PRE] : Endif
       # Valeurs du menu local 2747 - 'Origine préparation'
       # 1 - Commande
       # 2 - Commande de prêt
       # 3 - Réappro s-traitant
       # 4 - Manquant s-traitant
       If [F:PRE]ORITYP>2 W_SCO=2 Endif
Endcase
Return



############################################################
# Calcul stocks périmés dans période de calcul
$EXP_STO
# FQ 58687 GA 10/2009 test déplacé pour performances ...
# --------------------------------------------------------------------------
# Les stocks périmés ne sont pris en compte que si le stock Sous contrôle
# et/ou Stock rejeté non pris en compte au niveau du paramétrage CBN
# --------------------------------------------------------------------------
# Issue 105935 - 2015-09-28 by BEEBE : Setting of VDS-Values
#                EXYSTA has the length 1 so the statement "left" is not needed to use
  If ([F:ITM]EXYSTA = "Q" & WCTLSTO = 1) |
&    ([F:ITM]EXYSTA = "R" & WREJSTO = 1)
    WGLOALL = [F:CBH]GLOALL
    Filter [STL] Where ITMREF = [F:ITF]ITMREF &
&                      SHLDAT < WCALDATF
&                Order By Key STL2
    For [STL]
      Gosub LEC_LOTPER
    Next
    Filter [STL]

  Endif
Return
############################################################
# Lecture lignes stock lot périmés
$LEC_LOTPER
# Issue 105935 - 2015-09-28 by BEEBE : Setting of VDS-Values
#                reading Q-Stock when EXYSTA="R" and Q-Stock has to be considered at
#                "Yes at date end control" and "Yes in starting stock" (CTLSTO="3", "2")
Local Char CRITISSTA(100)

If ([F:ITM]EXYSTA       =  "R" &
&   find(WCTLSTO, 3, 2) <> 0)
    CRITISSTA = "find(left$([F:STO]STA,1), 'A', 'Q')<>0"
Else
    CRITISSTA = "find(left$([F:STO]STA,1), 'A')<>0"
Endif
If [F:STL]SLO<>"" # FQ 58687 GA 10/2009
  Filter [STO] Where ITMREF = [F:STL]ITMREF    &
&                    STOFCY = WFCY             &
&                    LOT    = [F:STL]LOT       &
&                    SLO    = [F:STL]SLO       &
&                    evalue(CRITISSTA)         &
&                    QTYSTU > 0
&              Order By Key STO3
Else
  Filter [STO] Where ITMREF = [F:STL]ITMREF    &
&                    STOFCY = WFCY             &
&                    LOT    = [F:STL]LOT       &
&                    evalue(CRITISSTA)         &
&                    QTYSTU > 0
&              Order By Key STO3
Endif
For [STO]
# FQ 58687 GA 10/2009 test déplacé
#  If (left$([F:ITM]EXYSTA,1) = "Q" & WCTLSTO = 1) |
#&    (left$([F:ITM]EXYSTA,1) = "R" & WREJSTO = 1)
    If [F:STL]SHLDAT < WCALDATD
      WDAT = WCALDATD
    Else
      WDAT = [F:STL]SHLDAT
    Endif
    Read [CBW]CBW0=WFCY;[F:STL]ITMREF;0;WDAT
    Case fstat
      When 0 :
        If (WGLOALL < [F:STO]QTYSTUACT - [F:STO]CUMALLQTA - [F:STO]CUMWIPQTA)
            [F:CBW]QTYSTU += [F:STO]QTYSTUACT - [F:STO]CUMALLQTA - [F:STO]CUMWIPQTA - WGLOALL
            WGLOALL = 0
        Else
            WGLOALL -= [F:STO]QTYSTUACT - [F:STO]CUMALLQTA - [F:STO]CUMWIPQTA
        Endif
        Rewrite [CBW]
          If fstat : GOK = 0 : Call FSTA("CBW") From GLOCK : Break : Endif
      When 4,5 :
        Raz [CBW]
        [F:CBW]STOFCY = WFCY
        [F:CBW]ITMREF = [F:STL]ITMREF

        # Issue 121128 - 2019-01-14 by STLIG : record version - if applicable
        [F:CBW]ECCVALMAJ = [F:STL]ECCVALMAJ
        [F:CBW]ECCVALMIN = [F:STL]ECCVALMIN

        [F:CBW]RECCOD = 0
        [F:CBW]DAT    = WDAT
        If (WGLOALL < [F:STO]QTYSTUACT - [F:STO]CUMALLQTA - [F:STO]CUMWIPQTA)
            [F:CBW]QTYSTU = [F:STO]QTYSTUACT - [F:STO]CUMALLQTA - [F:STO]CUMWIPQTA - WGLOALL
            WGLOALL = 0
        Else
            WGLOALL -= [F:STO]QTYSTUACT - [F:STO]CUMALLQTA - [F:STO]CUMWIPQTA
        Endif
        If [F:CBW]QTYSTU > 0
            Write [CBW]
            If fstat : GOK = 0 : Call FSTA("CBW") From GLOCK : Break : Endif
# Ecriture besoin fictif à  la même date quantité zéro
            Raz [F:CBD]
            [F:CBD]           = [F:CBH]

            # Issue 121128 - 2019-01-14 by STLIG : record version - if applicable
            [F:CBD]ECCVALMAJ = [F:STL]ECCVALMAJ
            [F:CBD]ECCVALMIN = [F:STL]ECCVALMIN

            [F:CBD]WIPTYP     = 6
            [F:CBD]WIPSTA     = 3
            Call NUMERO(GSUG,WFCY,WCALDATD,"",[F:CBD]WIPNUM,WRET) From SUBANM
            If WRET <> 0
              Call ECR_TRACE(mess(66,187,1),1) From GESECRAN
              GOK = 0
              Break
            Endif
            [F:CBD]REQQTY     = 0
            [F:CBD]STRDAT     = [F:CBW]DAT
            [F:CBD]ENDDAT     = [F:CBW]DAT
            If [F:CBD]ENDDAT < WCALDATD
              [F:CBD]REQDAT   = WCALDATD
            Else
              [F:CBD]REQDAT   = [F:CBD]ENDDAT
            Endif
            I = [F:CBD]REQDAT - WCALDATD
            If I < 0          : I = 0          : Endif
            If I > WNBJOU - 1 : I = WNBJOU - 1 : Endif
            [F:CBD]BUC = WBUCNUM(I)
            # 11.05 33236
            Case WBUCTYP([F:CBD]BUC)
                When 1,2:    [F:CBD]DEMBUC = (year([F:CBD]REQDAT)*1000)+(WBUCTYP([F:CBD]BUC)*100)+week([F:CBD]REQDAT)
                When 3:      [F:CBD]DEMBUC = (year([F:CBD]REQDAT)*1000)+(WBUCTYP([F:CBD]BUC)*100)+month([F:CBD]REQDAT)
            Endcase
            [F:CBD]CREUSR     = GUSER
            [F:CBD]CREDAT     = date$
            [F:CBD]CREDATTIM = datetime$    # 108577
            [F:CBD]UPDUSR    = GUSER
            #[F:CBD]UPDDAT    = date$
            [F:CBD]UPDDATTIM = datetime$    # 108577
            [F:CBD]EXPNUM     = [C]EXPORT

Call ECR_DEBUG("LEC_LOTPER Write CBD Itm="+[F:CBD]ITMREF-"WipTyp="+num$([F:CBD]WIPTYP)
&                            -num$([F:CBD]REQDAT)-num$([F:CBD]STRDAT)-num$([F:CBD]ENDDAT)-[F:CBD]WIPNUM)

            Write [CBD]
            If fstat : GOK = 0 : Call FSTA("CBD") From GLOCK : Break : Endif
            [F:CBH]EXYSTOFLG = 2
        Endif                                                                                # 08.07 42264
      When Default :
        GOK = 0
        Call FSTA("STO") From GLOCK
        Break
    Endcase
    fstat = 0
# FQ 58687 GA 10/2009 test déplacé
#  Endif
Next
Filter [STO]
Return
############################################################
#Génération table de travail (détail)
#Sélection des ordres en-cours selon paramètrage
#Réinitialisation des messages traitement précédent
$GEN_CBNDET
Filter [CBH] Where STOFCY = WFCY &
&                  ORDFLG = 2
&            Order By Key CBH1
#
For [CBH]
  Trbegin [CBH], [CBD]
  GOK  = 1
  WSLE = 1
  WESS = 0
#
$GEN_CBNDET1
  WPHAENC  = mess(5,744,1)-[F:CBH]ITMREF-[F:CBH]ITMDES1
  WFSTAT = fstat
  Gosub LEC_ORD
  fstat = WFSTAT
  Case GOK
    When -1 :
      Rollback
      If WESS = 10
        Call ECR_TRACE(mess(20,100,1)-"ORDERS"-[F:CBH]ITMREF,1) From GESECRAN
        Break
      Else
        Sleep WSLE
        GOK   = 1
        WESS += 1
        WSLE += 1
        Trbegin [CBH], [CBD]
        Goto GEN_CBNDET1
      Endif
    When 1 :
      Commit
    When Default :
      Rollback
      Call ECR_TRACE(mess(12,100,1)-"ORDERS",1) From GESECRAN
      Break
  Endcase
Next
Filter [CBH]
Return
############################################################
#Lecture des ordres effacement des anciens messages de replanif.
$LEC_ORD

Raz WQSOP, WQSOF, WQSOS
Filter [ORD] Where STOFCY  = [F:CBH]STOFCY &
&                  ITMREF  = [F:CBH]ITMREF &
&                  FMI    <  2             &
&                  WIPSTA  < 4
&            Order By Key ORD1
For [ORD]
 # GA 01/2009 FQ 51526 lock uniquement si nécessaire
 # Readlock [ORD] Curr
 # If  fstat = 0
    I = 0
    GPOINT = "LECORD"
    Gosub ENTREE From EXEFNC
    If [F:ORD]ENDDAT <= WCALDATF
      If I = 0
        Gosub TRT_ORD
        If GOK <>1
          Break
        Endif
      Endif
    Endif
  #Else
  #  GOK = -1
  #  Break
  #Endif
Next
Filter [ORD]
#Si correction ordres de prévision
# llc 08.03 18939
#If GOK = 1 & WQSOS <> 0 & WHORDEM = 2 & [F:CBH]FOHENDDAT > WCALDATD
If GOK = 1 & WQSOS <> 0 & WHORDEM = 2
  Gosub COR_SOS
Endif

#---------------------------------------------
# PE XTRA_ORD
GPOINT = "XTRA_ORD" : Gosub ENTREE From EXEFNC

Return
############################################################
#Ecriture fichier travail détail
#Effacement flags replanification
$TRT_ORD

# Issue 117180 - Check if a project task exists
Local Char WREQ(255) : WREQ=""
Local Char WPJT(40) : WPJT=""

WPJTFLAG=0

WREQ ="SELECT count(*) From ORDERS"
WREQ -= "where STOFCY_0 = '"+[F:CBH]STOFCY+"'"
WREQ -= "  and ITMREF_0 = '"+[F:CBH]ITMREF + "'"
WREQ -= "  and WIPTYP_0 = 14"

For (Integer VPJTFLAG) From num$(GTYPDBA*2+1) Sql WREQ As [REQ_]
    If VPJTFLAG
        WPJTFLAG=1
    Endif
    Break
Next
# End issue 117180

I = 0
If (WPRO = 1 & [F:CBH]REOMGTCOD = 3) |
&  (WPRO = 2 & [F:CBH]REOMGTCOD = 2)
  Case [F:ORD]WIPTYP
    When 1 :
      Case [F:ORD]WIPSTA
        When 1 : If WSOFFLG = 2 : I = 1 : Endif
        When 2 : If WSOPFLG = 2 : I = 1 : Endif
# Les SOS antérieurs date début ignorés si pas horizon demande
        When 3 : If WSOSFLG = 2 & [F:ORD]ENDDAT >= WCALDATD
                   If [F:CBH]FOHENDDAT = WCALDATD-1
                     I = 1
                   Else
                     If [F:ORD]ENDDAT > [F:CBH]FOHENDDAT
                       I = 1
                     Endif
                   Endif
                 Endif
      Endcase
    When 2 :
      Case [F:ORD]WIPSTA
        When 1 : If WPOFFLG = 2 : I = 1 : Endif
        When 2 : If WPOPFLG = 2 : I = 1 : Endif
      Endcase
    When 3 :
      Case [F:ORD]WIPSTA
        When 1 : If WEOFFLG = 2 : I = 1 : Endif
        When 2 : If WEOPFLG = 2 : I = 1 : Endif
        When 3 :
              # le CBN tient compte des besoins PDP 06.07 41622
              # le PDP tient compte des besoins CBN FQ 66318 GA 03/2011
                 If ([F:ORD]BOMALT = WBOMALT)
&                   | (WPRO = 2 & [F:ORD]ORI = 5 & WITM <> 2)
&                   | (WPRO = 1 & [F:ORD]ORI = 6 & WITM <> 2)
                                  I = 1 : Endif
      Endcase
    When 5,9 :
      Case [F:ORD]WIPSTA
        When 1 : If WWOFFLG = 2 : I = 1 : Endif
        When 2 : If WWOPFLG = 2 : I = 1 : Endif
      Endcase
    When 6 :
      Case [F:ORD]WIPSTA
        When 1 : If WWOFFLG = 2 : I = 1 : Endif
        When 2 : If WWOPFLG = 2 : I = 1 : Endif
        When 3 :
              # le CBN tient compte des besoins PDP 06.07 41622
              # le PDP tient compte des besoins CBN FQ 66318 GA 03/2011
                 If ([F:ORD]BOMALT = WBOMALT)
&                   | (WPRO = 2 & [F:ORD]ORI = 5 & WITM <> 2)
&                   | (WPRO = 1 & [F:ORD]ORI = 6 & WITM <> 2)
                                  I = 1 : Endif
      Endcase
    When 7 :
      Case [F:ORD]WIPSTA
        When 1 : If WTRFFLG = 2 : I = 1 : Endif
        When 2 : If WTRPFLG = 2 : I = 1 : Endif
      Endcase
    When 8 :
      Case [F:ORD]WIPSTA
        When 1 : If WTPFFLG = 2 : I = 1 : Endif
        When 2 : If WTPPFLG = 2 : I = 1 : Endif
        # Issue 107360 by BEEBE 28/05/2015: When MRP and MPS are configured with the "Exclusive Selection"
        #              without "MPS and MRP products", "TPS"-requirements from MPS may not be
        #              considered while processing MRP (and vice versa)
        When 3 : If (WTPSFLG  =  2
&                 & ((WITMCOD <> 2)
&                  | (WITM    =  2)
&                  | (WPRO    =  2 & [F:ORD]ORI = 6)
&                  | (WPRO    =  1 & [F:ORD]ORI = 5))) : I = 1 : Endif
      Endcase
    When 13:   # V6 sous-traitance
      Case [F:ORD]WIPSTA
        When 1 : If WEOFFLG = 2 : I = 1 : Endif
        When 2 : If WEOPFLG = 2 : I = 1 : Endif
      Endcase
    When 14:  # Issue number 107498/9 - 2016-03-03 by LLC : project demand MTF
      Case [F:ORD]WIPSTA
        When 1 : If WMTFFLG = 2 : I = 1 : Endif
        When 2 : If WMTPFLG = 2 : I = 1 : Endif # Issue 107498/102 - 2016-04-19 by ALSHE : project demand MTP
      Endcase
  Endcase
Endif
#Si l'on doit créer
If I = 1 & [F:ORD]ENDDAT <= [F:CBH]LIFENDDAT
  Raz [F:CBD]
  [F:CBD]    = [F:CBH]
  [F:CBD]    = [F:ORD]
# Issue 102933 GA 01/2015 allocated qty may be greater than the need
  Local Decimal WRMNEXTQTY
  If WMAXALLQTY=2 & [F:ORD]RMNEXTQTY<[F:ORD]SHTQTY+[F:ORD]ALLQTY
     WRMNEXTQTY=max([F:ORD]RMNEXTQTY,[F:ORD]SHTQTY+[F:ORD]ALLQTY)
     Call ECR_TRACE([F:ORD]ITMREF-"WARNING: Allocated qty is greater than remaining qty"-num$(WRMNEXTQTY),-1 ) From GESECRAN
  Else
     WRMNEXTQTY=[F:ORD]RMNEXTQTY
  Endif
# Calcul quantité besoin / ressource (déduction allocations ordres clients)
  Case [F:CBD]WIPTYP
    When 1, 3, 6, 8, 14 :     # Issue number 107498/9 - 2016-03-03 by LLC
      If ([F:ORD]ALLQTY + [F:ORD]MTOQTY) > [F:ORD]RMNEXTQTY
        [F:CBD]REQQTY = 0
      Else
        [F:CBD]REQQTY = (WRMNEXTQTY - [F:ORD]ALLQTY - [F:ORD]MTOQTY)
      Endif

    When 5 :
      [F:CBD]REQQTY = [F:ORD]RMNEXTQTY - [F:ORD]MTOQTY
    When Default :
      [F:CBD]REQQTY = [F:ORD]RMNEXTQTY - [F:ORD]MTOQTY
  Endcase

  WSHIQTYSTU = 0  # Issue 108577 by GA 07/2015 Shipments

# analyse problèmatique CQ    (llc 11.03 20261)
# si article soumis à  contrôle -> date dispo OF ajustée, date dispo Achat suivant flag commande
  If find([F:ORD]WIPTYP,2,5,13) & find([F:ORD]WIPSTA,1,2)
      Q = 0

      If (find([F:CBH]QUAFLG,2,3) &
&        ([F:CBH]PLNANYCOD = 1 | !find(WRPLMOD(func CBNLIB.MAPRPL([F:CBD]WIPTYP, [F:CBD]WIPSTA)),2,3)))

          If [F:ORD]WIPTYP = 2
              If [F:ORD]WIPSTA = 2
                  # ajouter délai CQ
                  Q = [F:CBH]QUALTI
              Else
                  Read [POP]POP0=[F:ORD]VCRNUM;[F:ORD]VCRLIN;[F:ORD]VCRSEQ
                  If fstat : Raz [F:POP] : Endif
                  If [F:POP]QUAFLG = 2 : Q = [F:CBH]QUALTI : Else : Q = 0 : Endif
              Endif
          Else
              If find([F:CBH]QUAFLG,2,3) : Q = [F:CBH]QUALTI : Else : Q = 0 : Endif
              # sr 07.05 demande 31219
              GPOINT = "CUSMODLTI" : Gosub ENTREE From EXEFNC
          Endif
      Endif
      If Q > 0
          WCOR = 8
          WCOD = 1
          WDEL = Q
          WDAT = [F:CBD]ENDDAT
          Call CALDAT("+",WCOR,WDAT,WCOD,WDEL,WCAP,WCALDATD,WDAT) From CBNLIB
      Else
          WCOR = 8
          WCOD = 1
          WDEL = 0
          WDAT = [F:CBD]ENDDAT
          Call CALDAT("-",WCOR,WDAT,WCOD,WDEL,WCAP,WCALDATD,WDAT) From CBNLIB
      Endif
      # Issue 108577 by GA 07/2015 Shipments
      Read [POQ]POQ0=[F:ORD]VCRNUM;[F:ORD]VCRLIN;[F:ORD]VCRSEQ
      If fstat : Raz [F:POQ] : Endif
      WSHIQTYSTU=[F:POQ]SHIQTYSTU
  Else
      # Correction date par calendrier
      WCOR = 8
      WCOD = 1
      WDEL = 0
      WDAT = [F:CBD]ENDDAT
      Call CALDAT("-",WCOR,WDAT,WCOD,WDEL,WCAP,WCALDATD,WDAT) From CBNLIB
  Endif
  Gosub DAT2BUCKET # Issue 108577 by GA 07/2015

# GA 10/2007 selon V5
# If [F:CBH]STDFLG = 4
# Issue 107498/13 - management mode by order (=4) or when WPJTFLAG is set
#                   or when management mode available stock but project task
  If ([F:CBH]STDFLG  = 2 &
&     [F:CBD]WIPTYP  = 1 &
&      (([F:CBD]WIPSTA = 1 & WPJTSOF = 2) |
&       ([F:CBD]WIPSTA = 2 & WPJTSOP = 2) |
&       ([F:CBD]WIPSTA = 3 & WPJTSOS = 2))) |
&    (WPJTFLAG) |
&    ([F:CBH]STDFLG = 3 & [F:CBD]WIPTYP  = 14) |
&    ([F:CBH]STDFLG = 4) |
&    (WECCFLG & [F:CBD]ECCVALMAJ<>"")
    # 10.04 26006 cde de vente
    If [F:ORD]VCRTYPORI = 2
        [F:CBD]WIPTYPORI = 1
        [F:CBD]WIPSTAORI = [F:ORD]WIPSTA     # suite FQ 78714 avant [F:CBD]WIPSTA
        [F:CBD]WIPNUMORI = [F:ORD]VCRNUMORI
        [F:CBD]WIPLINORI = [F:ORD]VCRLINORI
        [F:CBD]WIPSEQORI = [F:ORD]VCRSEQORI
    Else
        [F:CBD]WIPTYPORI = [F:CBD]WIPTYP
        [F:CBD]WIPSTAORI = [F:CBD]WIPSTA
        [F:CBD]WIPNUMORI = [F:CBD]VCRNUM
        [F:CBD]WIPLINORI = [F:CBD]VCRLIN
        [F:CBD]WIPSEQORI = [F:CBD]VCRSEQ
    Endif
    [F:CBD]PJT       = [F:ORD]PJT
    [F:CBD]BPRNUM    = [F:ORD]BPRNUM
    [F:CBD]TRCFLG    = 2
  Else
    [F:CBD]WIPTYPORI = 0
    [F:CBD]WIPSTAORI = 0
    [F:CBD]WIPNUMORI = ""
    [F:CBD]WIPLINORI = 0
    [F:CBD]WIPSEQORI = 0
    [F:CBD]PJT       = ""
    [F:CBD]BPRNUM    = ""
    [F:CBD]TRCFLG    = 1
  Endif
  [F:CBD]SUGTYP = [F:CBD]WIPTYP
  [F:CBD]SUGSTA = [F:CBD]WIPSTA
  [F:CBD]SUGNUM = [F:CBD]WIPNUM
  [F:CBD]MRPMES = 1
  [F:CBD]MRPDAT = [0/0/0]
  [F:CBD]MRPQTY = 0
  [F:CBD]WIP    = 1
  [F:CBD]RPLFLG = 1
  # si protection ordres en cours, analyse situation ressource replanifiable (02.04)
  If (WWIPPRO = 2 | (WWIPPRO = 3 & [F:CBH]WIPPRO = 2)) & find([F:CBD]WIPTYP,2,5,7,13) & [F:CBD]WIPSTA = 1
      If (find(WRPLMOD(func CBNLIB.MAPRPL([F:CBD]WIPTYP, [F:CBD]WIPSTA)),2,3))
        Gosub CHECK_WIP
      Endif
  Endif
  # Issue 108013 - 06/2015 by GA : ECC for MRP
  If WECCFLG
    If [F:ITM1]ITMREF<>[F:ORD]ITMREF
      Read [F:ITM1]ITM0=[F:ORD]ITMREF
    Endif

    # Issue 119200 - 2016-11-15 by STLIG : Check product is version managed and
    #                                      default bom type for sub-contracted or manufactured products.
    #[F:CBD]BOMALTTYP=[F:ORD]BOMALTTYP CATUA X3-38274.o
    If [F:ORD]ECCVALMAJ="" & [F:ITM1]ECCFLG>1

      #CATUA X3-38274.sn Discrepancies with BOMALT and BOMALTTYP field
      Local Integer VALBOMALTTYP

      #Commented out setting values directly to [F:CBD] files
      #If ([F:CBD]BOMALTTYP=0)
      #  If ([F:CBH]SCPFLG=2)
      #    [F:CBD]BOMALTTYP=3
      #  Else
      #    [F:CBD]BOMALTTYP=2
      #  Endif
      #Endif

      VALBOMALTTYP=[F:ORD]BOMALTTYP
      If (VALBOMALTTYP=0)
        If ([F:CBH]SCPFLG=2)
          VALBOMALTTYP=3
        Else
          VALBOMALTTYP=2
        Endif
      Endif
      #CATUA X3-38274.en

      # Issue 119200 - 2016-11-14 by STLIG : Get best version from BOM (Manufactured) else
      #                                      from Stock (Bought).
      Local Integer WECCALT : WECCALT=0
      #Call INIECCBOM([F:CBD]ITMREF, [F:CBD]STOFCY, [F:CBD]REQDAT, [F:CBD]BOMALTTYP, [F:CBD]ECCVALMAJ,[F:CBD]ECCVALMIN,WECCALT) From MFGECCLIB  #CATUA X3-38274.o
      Call INIECCBOM([F:CBD]ITMREF, [F:CBD]STOFCY, [F:CBD]REQDAT, VALBOMALTTYP, [F:CBD]ECCVALMAJ,[F:CBD]ECCVALMIN,WECCALT) From MFGECCLIB  #CATUA X3-38274.n
      If WECCALT<>0
        [F:CBD]BOMALT=WECCALT
        [F:CBD]BOMALTTYP = VALBOMALTTYP #CATUA X3-38274.n
      Else
        Local Mask ITM2 [ITM2]
        Call STKINIECC([F:ORD]ITMREF,"","ITM2",1,1,0,2,"","ECCVALMAJ","ECCVALMIN","","",0,"") From STKACT
        [F:CBD]ECCVALMAJ=[M:ITM2]ECCVALMAJ
        [F:CBD]ECCVALMIN=[M:ITM2]ECCVALMIN
      Endif

      Call ECR_DEBUG("CRE_UNE_SUG CBD with ECC Itm="+[F:CBD]ITMREF-"WipTyp="+num$([F:CBD]WIPTYP)-num$(WSUG)
&                            -num$([F:CBD]REQDAT)-num$([F:CBD]STRDAT)-num$([F:CBD]ENDDAT)-[F:CBD]SUGNUM
&                            -"ECCVAL="+[F:CBD]ECCVALMAJ-[F:CBD]ECCVALMIN-num$([F:CBD]BOMALT))
    Else
       [F:CBD]ECCVALMAJ = [F:ORD]ECCVALMAJ
       [F:CBD]ECCVALMIN = [F:ORD]ECCVALMIN
       #[F:CBD]BOMALT    = WBOMALT #CATUA X3-38274.o
       If [F:CBD]BOMALTTYP <> 0 : [F:CBD]BOMALT = WBOMALT : Endif #CATUA X3-38274.n
     Endif

    # Issue 112877 - 2019-02-12 by STLIG : ignore any global allocations (version product)
    If ([F:CBD]ECCVALMAJ <> "")
      If (clalev([F:STA]) = 0) : Local File STOALL [STA] : Endif
      Filter [STA] Where  [STA]STOFCY = [F:CBD]STOFCY &
&                         [STA]ITMREF = [F:CBD]ITMREF &
&                         [STA]VCRNUM = [F:CBD]VCRNUM &
&                         [STA]VCRLIN = [F:CBD]VCRLIN &
&                         [STA]VCRSEQ = [F:CBD]VCRSEQ &
&                         [STA]ALLTYP = 1
      For [STA]
        [F:CBD]REQQTY += [F:STA]QTYSTUACT
      Next
      Filter [STA]
    Endif

  Endif
  # Issue 108577 by GA 07/2015 Shipments - start
  If dim([M:ORDK]SHIPNUM)>0 & WSHIQTYSTU>0
     Local Decimal WPOFQTY : WPOFQTY = [F:ORD]RMNEXTQTY - [F:ORD]MTOQTY
     Local Date    WPOFDAT : WPOFDAT = [F:CBD]ENDDAT
  # case POF with associated Shipments: split the result, one for each Shipment
     Raz [M:ORDK]
     [M:ORDK]VCRNUM = [F:ORD]VCRNUM
     [M:ORDK]VCRLIN = [F:ORD]VCRLIN
     [M:ORDK]VCRSEQ = [F:ORD]VCRSEQ
     If WPOFQTY>0
       [M:ORDK]EXTQTY  = WPOFQTY
       [M:ORDK]CPLQTY  = 0
       Call SHP_WIP From TRTWIP
     Endif
     If [M:ORDK]NBLIG>0
       Local Integer ISHD
       For ISHD=0 To [M:ORDK]NBLIG-1
          [F:CBD]REQQTY = [M:ORDK]SHDQTY(ISHD)
          [F:CBD]REQDAT = [M:ORDK]SHDDAT(ISHD)
          If [F:CBD]REQQTY <> 0
              WDAT=[F:CBD]REQDAT
              Gosub DAT2BUCKET
            #
              [F:CBD]WIPTYPORI = [F:ORD]WIPTYP
              [F:CBD]WIPSTAORI = [F:ORD]WIPSTA
              [F:CBD]WIPNUMORI = [F:ORD]VCRNUMORI
              [F:CBD]WIPLINORI = [F:ORD]VCRLINORI
              [F:CBD]WIPSEQORI = [F:ORD]VCRSEQORI
              [F:CBD]VCRTYP    = 4
              [F:CBD]VCRNUM    = [M:ORDK]SHIPNUM(ISHD)
              [F:CBD]VCRLIN    = [M:ORDK]SHIPLIN(ISHD)
              [F:CBD]VCRSEQ    = 0 # [F:SHD]CTRLIN ?
              Call NUMERO(GSUG,WFCY,WCALDATD,"",[F:CBD]WIPNUM,WRET) From SUBANM
              If WRET <> 0
                Call ECR_TRACE(mess(66,187,1),1) From GESECRAN
                GOK = 0
                Break
              Endif
              [F:CBD]EXTQTY    = [F:CBD]REQQTY
              [F:CBD]RMNEXTQTY = [F:CBD]REQQTY
              [F:CBD]MTOQTY    = 0
              Gosub WRITE_CBD
          Endif
          #WPOFQTY = [M:ORDK]WIPQTY(ISHD) : # Issue 119661 - 2017-02-13 by GH : case of partial pre-receipt
          WPOFQTY += [M:ORDK]WIPQTY(ISHD)
       Next
     Endif
     If GOK & WPOFQTY>0   # Remaining POF qty not shipped ?
        [F:CBD]REQDAT = WPOFDAT
        [F:CBD]REQQTY = WPOFQTY
        [F:CBD]EXTQTY    = [F:ORD]EXTQTY
        [F:CBD]RMNEXTQTY = [F:CBD]REQQTY
        [F:CBD]MTOQTY    = [F:ORD]MTOQTY
        WDAT=[F:CBD]REQDAT
        Gosub DAT2BUCKET
      #
        [F:CBD]WIPTYPORI = 0
        [F:CBD]WIPSTAORI = 0
        [F:CBD]WIPNUMORI = ""
        [F:CBD]WIPLINORI = 0
        [F:CBD]WIPSEQORI = 0
        [F:CBD]VCRTYP    = 14
        [F:CBD]VCRNUM    = [F:ORD]VCRNUM
        [F:CBD]VCRLIN    = [F:ORD]VCRLIN
        [F:CBD]VCRSEQ    = [F:ORD]VCRSEQ
        Call NUMERO(GSUG,WFCY,WCALDATD,"",[F:CBD]WIPNUM,WRET) From SUBANM
        If WRET <> 0
          Call ECR_TRACE(mess(66,187,1),1) From GESECRAN
          GOK = 0
        Endif
        Gosub WRITE_CBD
     Endif
  Else
     Gosub WRITE_CBD
  Endif
  # Issue 108577 by GA 07/2015 Shipments - end
Endif
# Effacement messages replanification (si nécessaire)
# GA 01/2009 FQ 51526 If !(find([F:ORD]WIPTYP,WTYPSUG) & [F:ORD]WIPSTA = 3)
If !(find([F:ORD]WIPTYP,WTYPSUG) & [F:ORD]WIPSTA = 3)& [F:ORD]MRPMES <> 1
  If (WPRO = 1 & [F:CBH]REOMGTCOD = 3) |
&    (WPRO = 2 & [F:CBH]REOMGTCOD = 2)
    # GA 01/2009 FQ 51526 lock uniquement si nécessaire
    Readlock [ORD] Curr
    If fstat : GOK=-1 : Return Endif
    [F:ORD]MRPMES = 1
    [F:ORD]MRPDAT = [0/0/0]
    [F:ORD]MRPQTY = 0
    Rewrite [ORD]
    If fstat
      GOK = 0
      Call FSTA("ORD") From GLOCK
    Endif
  Endif
Endif
Return
#
$DAT2BUCKET
  # Détermination numéro bucket
  If WDAT < WCALDATD
      [F:CBD]REQDAT = WCALDATD
  Else
      [F:CBD]REQDAT = WDAT
  Endif
  I = [F:CBD]REQDAT - WCALDATD
  If I < 0          : I = 0          : Endif
  If I > WNBJOU - 1 : I = WNBJOU - 1 : Endif
  [F:CBD]BUC = WBUCNUM(I)
# 11.05 33236
  Case WBUCTYP([F:CBD]BUC)
    When 1,2:    [F:CBD]DEMBUC = (year([F:CBD]REQDAT)*1000)+(WBUCTYP([F:CBD]BUC)*100)+week([F:CBD]REQDAT)
    When 3:      [F:CBD]DEMBUC = (year([F:CBD]REQDAT)*1000)+(WBUCTYP([F:CBD]BUC)*100)+month([F:CBD]REQDAT)
  Endcase
Return
# Issue 108577 by GA 07/2015 Shipments
$WRITE_CBD
  [F:CBD]CREUSR = GUSER
  [F:CBD]CREDAT = date$
  [F:CBD]CREDATTIM = datetime$    # 108577
  [F:CBD]UPDUSR    = GUSER
  #[F:CBD]UPDDAT    = date$
  [F:CBD]UPDDATTIM = datetime$    # 108577
  [F:CBD]EXPNUM = [C]EXPORT
  GPOINT = "BEFWRICBD"
  Gosub ENTREE From EXEFNC

  Call ECR_DEBUG("TRT_ORD Write CBD Itm="+[F:CBD]ITMREF-"WipTyp="+num$([F:CBD]WIPTYP)
&                            -num$([F:CBD]REQDAT)-num$([F:CBD]STRDAT)-num$([F:CBD]ENDDAT)-[F:CBD]SUGNUM)

  Write [CBD]
  If fstat
    GOK = 0
    Call FSTA("CBD") From GLOCK
  Endif
  If [F:CBD]WIPTYP = 1
    Case [F:CBD]WIPSTA
      When 1 : WQSOF += [F:CBD]RMNEXTQTY
      When 2 : WQSOP += [F:CBD]RMNEXTQTY
      When 3 : WQSOS += [F:CBD]RMNEXTQTY
    Endcase
  Endif
Return
############################################################
# Intialisation statut WIP
$CHECK_WIP
Case [F:CBD]WIPTYP
    When 2:    # 10.05 32641 si DL, jamais en cours
               If [F:ORD]ABBFIL = "POC" : Return : Endif
               Read [POH]POH0=[F:CBD]VCRNUM
               If fstat : Raz [POH] : Endif
               If [F:POH]RCPFLG  = 2 : [F:CBD]WIP = 2 : Endif
    When 5:    Read [MFG]MFG0=[F:CBD]VCRNUM
               If fstat : Raz [MFG] : Endif
               If [F:MFG]MFGTRKFLG  = 4 : [F:CBD]WIP = 2 : Endif
    When 7:    Case [F:ORD]ABBFIL
                   When "POQ":    Read [POH]POH0=[F:CBD]VCRNUM
                                  If fstat : Raz [POH] : Endif
                                  If [F:POH]RCPFLG  = 2 : [F:CBD]WIP = 2 : Endif
               Endcase
    When 13:   Read [SCO]SCO0=[F:CBD]VCRNUM
               If fstat : Raz [SCO] : Endif
               If [F:SCO]SCOSTA = 1 & [F:SCO]SCOTRKFLG = 4 : [F:CBD]WIP = 2 : Endif
Endcase
Return

############################################################
# Correction des prévisions par des déduction des ordre planifiés et ferme
# dans l'horizon de la demande
$COR_SOS

Raz WQSOP, WQSOF, WQSOS, WDEMBUC
# FQ 43416 performances CBD0 => CBD3
Filter [CBD] Where ITMREF  = [F:CBH]ITMREF &
&                  STOFCY  = [F:CBH]STOFCY &
&                  WIPTYP  = 1             &
&                  ENDDAT  > [F:CBH]FOHENDDAT
&            Order By Key CBD3
Read [CBD]CBD3 First
$COR_SOS1
Case fstat
  When 0   :
    If WDEMBUC <> 0 & WDEMBUC <> [F:CBD]DEMBUC
      Gosub RUP_DEMBUC
      If GOK <> 1
        Goto COR_SOS_FIN
      Endif
      Raz WQSOP, WQSOF, WQSOS
    Endif
    Case [F:CBD]WIPSTA
      When 1 : WQSOF += [F:CBD]RMNEXTQTY
      When 2 : WQSOP += [F:CBD]RMNEXTQTY
      When 3 : WQSOS += [F:CBD]RMNEXTQTY
    Endcase
    WDEMBUC = [F:CBD]DEMBUC
  When 4,5 :
    If WDEMBUC <> 0
      Gosub RUP_DEMBUC
    Endif
    Goto COR_SOS_FIN
  When Default :
    GOK = 0
    Call FSTA("CBD") From GLOCK
    Goto COR_SOS_FIN
Endcase
Read [CBD] Next
Goto COR_SOS1
#
$COR_SOS_FIN
Filter [CBD]
Return
############################################################
# Rupture bucket demande : corection des SOS
$RUP_DEMBUC
If WQSOS <> 0
  WQRST = WQSOP+WQSOF
# FQ 43416 performances CBD0 => CBD3
  Filter [CBD1] Where ITMREF  = [F:CBH]ITMREF &
&                     STOFCY  = [F:CBH]STOFCY &
&                     WIPTYP  = 1             &
&                     WIPSTA  = 3             &
&                     DEMBUC  = WDEMBUC
&              Order By Key CBD3
#  For [CBD1] With Nohint
  For [CBD1]CBD3 Hint Key CBD3
    If WQSOF+WQSOP >= WQSOS
      [F:CBD1]REQQTY = 0
    Else
      If [F:CBD1]REQQTY >= WQRST
        [F:CBD1]REQQTY  -= WQRST
        WQRST = 0
      Else
        WQRST -= [F:CBD1]REQQTY
        [F:CBD1]REQQTY = 0
      Endif
    Endif
    Rewrite [CBD1]
    If fstat : GOK = 0 : Call FSTA("CBD") From GLOCK : Break : Endif
  Next
  Filter [CBD1]
  fstat = 0
Endif

Return
############################################################
# Calcul par code de plus bas niveau et article
$CAL_SUG
WFILCBH = "[F:CBH]STOFCY=WFCY"
If WITMCOD = 2
  If WITM = 2
    WFILCBH += "&([F:CBH]REOMGTCOD=2 | [F:CBH]REOMGTCOD=3)"
  Else
    If WPRO = 1
      WFILCBH += "&[F:CBH]REOMGTCOD=3"
    Else
      WFILCBH += "&[F:CBH]REOMGTCOD=2"
    Endif
  Endif
Endif
#
Link [CBH] With [ITF]ITF1=[F:CBH]STOFCY;[F:CBH]ITMREF
&          As [LNK]
&          Where evalue(WFILCBH)
&          Order By Key CBH1
Trbegin [CBH], [CBD]
GOK  = 1
WTRT = 0
For [LNK]
  If WITMCOD = 2
  # FQ 43416 GA 10/2007 Performances
#&                      (WIPTYP = 3 | WIPTYP = 4 | WIPTYP = 6) &
    Delete [CBD] Where ITMREFORI = [F:CBH]ITMREF &
&                      STOFCY    = [F:CBH]STOFCY &
&                      find(WIPTYP,3,4,6)<>0     &
&                      WIPSTA    = 3
    fstat = 0
  Endif
  WPHAENC  = [F:CBH]STOFCY-mess(6,744,1)-[F:CBH]ITMREF-[F:CBH]ITMDES1
  If GDSYFLG = 2
    Call TEMPON(WPHAENC) # FQ 45504 GA 03/2008 avant: From GESECRAN
  Endif
  If [F:CBH]PHAFLG = 2
    If WGHOSTO = 2
      Gosub TRT_FANTOME_STO
    Else
      Gosub TRT_FANTOME
    Endif
  Else
    Gosub TRT_SUGITM
  Endif
  If GOK <> 1
    Rollback
    Break
  Else
    If WTRT >= WTRTMAX
      Commit
      Trbegin [CBH], [CBD]
      WTRT = 0
    Else
      WTRT += 1
    Endif
  Endif
  fstat = 0
Next
#
If GOK = 1
  Commit
Endif
Return
############################################################
# Traitement des articles fantomes avec épuisement du stock
# Et création de suggestions correspondantes selon politique réapro.
$TRT_FANTOME_STO
WSTO    = [F:CBH]STRSTO
WSTOSHR = [F:CBH]STRSTO
#
# llc 05.03 l'index CBD2 est essentiel !! (on doit parcourir par statut)
# FQ 43416 performances
#Filter [CBD]
#&                  (WIPTYP = 3 | WIPTYP = 6)
#&      Order By Key CBD2
For [CBD]CBD3 Hint Key CBD2
&            Where ITMREF = [F:CBH]ITMREF &
&                  STOFCY = [F:CBH]STOFCY &
&                  find(WIPTYP,3,6)<>0
#For [CBD]
  Readlock [CBD] Curr
  If fstat
    GOK = 0
    Call FSTA("CBD") From GLOCK
    Break
  Endif
  If [F:CBD]WIPSTA = 1 : WSTOWRK =  [F:CBD]REQQTY : Else : WSTOWRK =  [F:CBD]EXTQTY :  Endif

  If WSTOWRK > WSTO
      If WSTO > 0
          WBES = WSTOWRK - WSTO
      Else
          WBES = WSTOWRK
      Endif
      # 11.05 33207 si perte, on l'applique ici
      If [F:CBH]REOCOD = 3 & [F:CBH]SHR > 0
          # Issue 94878 GA 02/2014 # Issue 89551 GA 07/2013
          #WBES = arr(WBES * ((100+[F:CBH]SHR)/100),10^-[F:CBH]STUDEC)
          Call CAL_QTY_SHR("+",WBES,[F:CBH]SHR,[F:CBH]STU)
      Endif
      Call QTESUG(WBES,WSUG,WNBR,WSUGR,WRET,WTOS) From CBNLIB
      WDATS   = [F:CBD]REQDAT
      WITMO   = [F:CBD]ITMREFORI            # 03.05 29395
      WTYPO   = [F:CBD]WIPTYPORI
      WSTAO   = [F:CBD]WIPSTAORI
      WNUMO   = [F:CBD]WIPNUMORI
      WLINO   = [F:CBD]WIPLINORI
      WSEQO   = [F:CBD]WIPSEQORI
      WPJTO   = [F:CBD]PJT
      If find([F:CBH]REOCOD,3,5) : WBPRO   = [F:CBD]BPRNUM : Else : WBPRO = "" : Endif
      WTRCFLG = [F:CBD]TRCFLG
      WSTO    = 0
      Gosub CRE_SUG
      If GOK <> 1
          Break
      Endif
  Else
      WSTO -= WSTOWRK
  Endif
  fstat = 0
Next
#Filter [CBD]

# Génération des besoins (Pas d'analyse pour fantomes)
# Issue 156827 - 2019-10-28 by STLIG : don't expand bom / generate component suggestions for ..
# intersite and purchase suggestion type
If find([F:CBH]SUGTYP,2,4) & !find([F:CBH]REOCOD,2,4) & GOK = 1
  Gosub GEN_TRACES From FUNCBNA
Endif
Return
############################################################
# Traitement des articles fantomes sans prise en compte du stock
# Et création de suggestions correspondantes selon politique réapro.
$TRT_FANTOME
WSTOSHR = 0
# FQ 43416 performances CBD0 => CBD3
Filter [CBD] Where ITMREF = [F:CBH]ITMREF &
&                  STOFCY = [F:CBH]STOFCY &
&                  find(WIPTYP,3,6)<>0    &
&                  WIPSTA = 3
&            Order By Key CBD3
#For [CBD] With Nohint
For [CBD]CBD3 Hint Key CBD3
  Readlock [CBD] Curr
  If fstat
    GOK = 0
    Call FSTA("CBD") From GLOCK
    Break
  Endif
  WBES = [F:CBD]EXTQTY
  # 11.05 33207 si perte, on l'applique ici
  If [F:CBH]REOCOD = 3 & [F:CBH]SHR > 0
      # Issue 94878 GA 02/2014 # Issue 89551 GA 07/2013
      #WBES = arr(WBES * ((100+[F:CBH]SHR)/100),10^-[F:CBH]STUDEC)
      Call CAL_QTY_SHR("+",WBES,[F:CBH]SHR,[F:CBH]STU)
  Endif
  Call QTESUG(WBES,WSUG,WNBR,WSUGR,WRET,WTOS) From CBNLIB
  WDATS   = [F:CBD]REQDAT
  WITMO   = [F:CBD]ITMREFORI            # 03.05 29395
  WTYPO   = [F:CBD]WIPTYPORI
  WSTAO   = [F:CBD]WIPSTAORI
  WNUMO   = [F:CBD]WIPNUMORI
  WLINO   = [F:CBD]WIPLINORI
  WSEQO   = [F:CBD]WIPSEQORI
  WPJTO   = [F:CBD]PJT
  If find([F:CBH]REOCOD,3,5) : WBPRO   = [F:CBD]BPRNUM : Else : WBPRO = "" : Endif
  WTRCFLG = [F:CBD]TRCFLG
  WSTO -= WTOS
  Gosub CRE_SUG
  If GOK <> 1
    Break
  Endif
  fstat = 0
Next
Filter [CBD]

# Génération des besoins (Pas d'analyse pour fantomes)
# Issue 156827 - 2019-10-28 by STLIG : don't expand bom / generate component suggestions for ..
# intersite and purchase suggestion type
If find([F:CBH]SUGTYP,2,4) & !find([F:CBH]REOCOD,2,4) & GOK = 1
  Gosub GEN_TRACES From FUNCBNA
Endif
Return

############################################################
# Calcul suggestions d'un article
$TRT_SUGITM

Local Char WREQ(255) : WREQ="" : # Issue 107498/13
Local Char WPJT(40) : WPJT=""  : # Issue 107498/13

GPE = 0
GREPLANNING = "RPL_TRTSUGITM"
GPOINT = "REPLANNING" : Gosub ENTREE From EXEFNC
If GPE <> 0 : Return : Endif

# Issue 120673 - 2017-01-18 by STLIG : Determine the starting stock for all versions ...
If [F:ITM]ITMREF<>[F:CBH]ITMREF
   Read [F:ITM]ITM0=[F:CBH]ITMREF
Endif
If (WECCFLG & [F:ITM]ECCFLG>1)
  Gosub STARTING_STOCK_ECC

  # Issue 49364 - 2017-10-13 by STLIG : If STARTSTOCKECC EP failure ..
  If (GOK<>1) : Return : Endif

Endif

WSTO    = [F:CBH]STRSTO
WSTOSHR = [F:CBH]STRSTO
WBESBUC = 0

# Issue 38342 - 2017-09-26 by STLIG : Demand accumulation (for expired stock calculation)
WCUMDEM = 0

# Issue 121128 - 2019-01-16 by STLIG : reset cumulative demand by version between products ..
If (WECCFLG)
  Raz WECCCUMDEM
Endif

WBESIND = 0
WBESDEL = 0
WBUC    = 0
WDATB   = [0/0/0]
WDEMQTY = 0
WMODCAL = 1
XSAFREC = 0                # (02.04)
WRESSQTY = 0
# Issue 114401 - 2016-02-17 by CCC : This part of process is identical to what is done in FUNCBNA.$BALANCE
#                                   => creation of common process FUNCBN.$FILL_BUCKETS
 ## Issue 108013 - 06/2015 by GA : ECC for MRP - start
 #If [F:ITM]ITMREF<>[F:CBH]ITMREF
 #   Read [F:ITM]ITM0=[F:CBH]ITMREF
 #Endif
 ## Issue 108013 - 2015-08-28 by GA : suite code review
 #If WECCFLG
 #  # Issue 108013 - 2015-06-22 by GA : ECC for MRP
 #  #For I=0 To WECCNBR-1
 #  #   Raz WECCVALMAJ(I),WECCVALMIN(I)
 #  #   Raz WECCSTODIS(I),WECCBES(I),WECCRES(I)
 #  #Next
 #  Raz WECCVALMAJ,WECCVALMIN,WECCSTODIS,WECCBES,WECCRES
 #  Raz WECCVALMAJO,WECCVALMINO
 #Endif
 #If WECCFLG & [F:ITM]ECCFLG>1
 #
 #  Filter [CBD] Where STOFCY = [F:CBH]STOFCY &
 #&                    ITMREF = [F:CBH]ITMREF
 #&              Order By Key CBD3
 #  For [CBD]CBD3 Hint Key CBD3
 #    If WBUC <> [F:CBD]BUC
 #      Gosub RUP_BUCKET
 #    Endif
 #    # mainly when stock issue stock rule is flagged "Version exclusive"
 #    If [F:CBH]ORDVER=2
 #       Gosub CUM_STODIS_ECCVAL
 #    Else
 #       Gosub CUM_STODIS
 #    Endif
 #    WBUC = [F:CBD]BUC
 #  Next
 #  Gosub RUP_BUCKET
 ## Issue 108013 - 06/2015 by GA : ECC for MRP - end
 #
 ## Traitement fichier détail avec rupture par bucket sans couverture
 #Elsif [F:CBH]DAYCOV = 0
 ## FQ 43416 performances CBD0 => CBD3
 #  Filter [CBD] Where STOFCY = [F:CBH]STOFCY &
 #&                    ITMREF = [F:CBH]ITMREF
 #&              Order By Key CBD3
 #  For [CBD]CBD3 Hint Key CBD3
 #    If WBUC <> [F:CBD]BUC
 #      Gosub RUP_BUCKET
 #    Endif
 #    Gosub CUM_STODIS
 #    WBUC = [F:CBD]BUC
 #  Next
 #  Gosub RUP_BUCKET
 ## Traitement fichier détail avec rupture par bucket avec couverture
 #Else
 #  Gosub CAL_BES_COUVERTURE
 ## FQ 43416 performances CBD0 => CBD3
 #  Filter [CBD] Where STOFCY = [F:CBH]STOFCY &
 #&                    ITMREF = [F:CBH]ITMREF
 #&              Order By Key CBD3
 #  Read [CBD]CBD3 First
 #$TRT_SUGITM1
 #  If fstat = 0
 #    If WBUC = [F:CBD]BUC
 #      Gosub CUM_STODIS
 #      Read [CBD] Next
 #      Goto TRT_SUGITM1
 #    Else
 #      Gosub RUP_BUCKET
 #      WBUC += 1
 #      Goto TRT_SUGITM1
 #    Endif
 #  Endif
 #  While WBUC < WNBBUC
 #    Gosub RUP_BUCKET
 #    WBUC += 1
 #  Wend
 #Endif
 #Filter [CBD]

# Issue 107498/13 - Check for product site, whether a project task exists => by order
WPJTFLAG=0
If func AFNC.ACTIV("PJM")
  If GPRO = 1
      WREQ ="SELECT count(*) From PDPDET"
  Else
      WREQ ="SELECT count(*) From CBNDET"
  Endif
  WREQ -= "where STOFCY_0 = '"+[F:CBH]STOFCY+"'"
  WREQ -= "  and ITMREF_0 = '"+[F:CBH]ITMREF + "'"
  WREQ -= "  and WIPTYP_0 = 14"

  For (Integer VPJTFLAG) From num$(GTYPDBA*2+1) Sql WREQ As [REQ_]
      If VPJTFLAG
          WPJTFLAG=1
      Endif
      Break
  Next

  # Issue 107498/13 - Check for product site, whether detail row is assigned to a project
  #                   and management mode for product is by order
  If (!WPJTFLAG)
    If GPRO = 1
        WREQ ="SELECT count(*) From PDPDET"
    Else
        WREQ ="SELECT count(*) From CBNDET"
    Endif
    WREQ -= "where STOFCY_0 =  '"+[F:CBH]STOFCY+"'"
    WREQ -= "  and ITMREF_0 =  '"+[F:CBH]ITMREF + "'"
    WREQ -= "  and PJT_0    <> ' '"
    WREQ -= "  and WIPTYP_0 <> 14"

    For (Integer VPJTFLAG) From num$(GTYPDBA*2+1) Sql WREQ As [REQ_]
        # Detail row with loaded PJT found and Manage Mode= "by order"
        # PJT-handling is TRUE
        If VPJTFLAG & [F:CBH]STDFLG=4
            WPJTFLAG=1
        Endif
        Break
    Next
  Endif
Endif

# Issue 107498/13 - create suggestions per project
If WPJTFLAG

# Issue 107866 - 2019-05-13 by STLIG : process starting stock by project ..
  Gosub PROJECT_STARTING_STOCK
#    # Issue 97980 - 2018-08-21 by STLIG : Apportion available stock (starting stock)..
#    Gosub APPORTION_STARTING_STOCK

    # Issue 76634 - 2018-03-07 by STLIG :
    # 1. Process pjt = blank (if 'available stock' then include material requirements see FILL_BUCKETS)
    # with starting stock..
    WPJT = ""
    Gosub FILL_BUCKETS

    # 2. Process pjt <> blank
    # with starting stock = 0..
    If GPRO = 1
        WREQ ="SELECT distinct PJT_0 From PDPDET"
    Else
        WREQ ="SELECT distinct PJT_0 From CBNDET"
    Endif
    WREQ -= "where STOFCY_0 = '"+[F:CBH]STOFCY+"'"
    WREQ -= "  and ITMREF_0 = '"+[F:CBH]ITMREF+"'"
    WREQ -= "  and PJT_0 <> ' '"                    # 76634 : pjt <> blank
    WREQ -= "order by PJT_0"

    For (Char VPJT(40)) From num$(GTYPDBA*2+1) Sql WREQ As [REQ_]
        WBUC    = 0
        WPJT = [REQ_]VPJT
        # Issue 82661 - 2018-03-19 by STLIG : Start process next demand with
        #                                     cumulative stock = safety stock
        #                                     rather than simply 0..
        WSTO = WSTOSEC
        If (WECCFLG & [F:ITM]ECCFLG>1)
          For I=0 To WECCNBR-1
            WECCSTODIS(I) = WECCSTOSEC(I)
          Next
        Endif

        #WSTO = 0
        WSTOSHR = 0

        Gosub FILL_BUCKETS
    Next
Else
    Gosub FILL_BUCKETS
Endif

# End issue 107498/13

If GOK <> 1 : Return : Endif

If [F:CBH]PLNANYCOD = 2

  Gosub REPLANNING From FUNCBNA

  # Issue 59610 - 2017-10-19 by STLIG : If MTOFLT EP failure
  If (GOK<>1) : Return : Endif

  If XSAFREC = 2 : XSAFREC = 3 : Endif    # (02.04)
  Gosub BALANCE

  # Issue 49364 - 2017-10-13 by STLIG : If STARTSTOCKECC EP failure ..
  If (GOK<>1) : Return : Endif

Endif

# 107498/15 - re-initialize Flag for further processing
WPJTFLAG=0

# 57469 point d'entrée CHECK_CBNDET
GPOINT = "CHECK_CBNDET"
Gosub  ENTREE From EXEFNC

If [F:ITF]MAXSTO <> 0 & WMAXANY = 2
  Gosub TRT_MAXSTO From FUNCBNA
Endif

# Issue 156827 - 2019-10-28 by STLIG : don't expand bom / generate component suggestions for ..
# intersite and purchase suggestion type
If find([F:CBH]SUGTYP,2,4) & !find([F:CBH]REOCOD,2,4) & GOK = 1
  Gosub GEN_TRACES From FUNCBNA
Endif

# Issue 229247 - 2021-04-12 by STLIG : process pending issues..
# delete pseudo demands
If [F:ITV]ITMREF <> [F:CBH]ITMREF
  Read [F:ITV]ITV0=[F:CBH]ITMREF;[F:CBH]STOFCY
Endif
If WWAISTO = 2 & [F:ITV]WAISTO
  Delete [CBD] Where ITMREF = [F:CBH]ITMREF &
&                    STOFCY = [F:CBH]STOFCY &
&                    VCRTYP = 4 &
&                    WIPTYP = 1 &
&                    WIPSTA = 1
Endif

Return

############################################################
# Create CBD for suggestions
$FILL_BUCKETS

If [F:CBH]DAYCOV <> 0
    Gosub CAL_BES_COUVERTURE
Endif

# Issue 120673 - 2017-01-18 by STLIG : Lookup [F:ITM]ITMREF in FILL_BUCKETS calling routine ...
#If [F:ITM]ITMREF<>[F:CBH]ITMREF
#   Read [F:ITM]ITM0=[F:CBH]ITMREF
#Endif

# Issue 107498/13 - added check for Project PJT, when project has to be selected
If WPJTFLAG

  # Issue 76634 - 2018-03-07 by STLIG :
  # If 'available stock' then include material requirements in pjt = blank process..
  Local Char FILTER_MWS(255)
  If ([F:CBH]STDFLG = 3)
    If (WPJT="")
      FILTER_MWS = "(PJT=WPJT | WIPTYP=6)"
    Else
      FILTER_MWS = "(PJT=WPJT & WIPTYP<>6)"
    Endif
  Else
    FILTER_MWS = "(PJT=WPJT)"
  Endif
  Filter [CBD] Where STOFCY = [F:CBH]STOFCY &
&                    ITMREF = [F:CBH]ITMREF &
&                    evalue(FILTER_MWS)
&              Order By Key CBD3
#Filter [CBD] Where STOFCY = [F:CBH]STOFCY &
#&                      ITMREF = [F:CBH]ITMREF &
#&                      PJT    = WPJT
#&                Order By Key CBD3

Else
    Filter [CBD] Where STOFCY = [F:CBH]STOFCY &
&                      ITMREF = [F:CBH]ITMREF
&            Order By Key CBD3
Endif

For [CBD]

  # Issue 129402 - 2019-08-19 by STLIG : ignore MWS/MSS if ..
  # exclusive selection = yes (WITMCOD) and
  # mps and mrp products = no (WITM) and
  # reorder mode (material) <> reorder mode (finished goods).
  If (WITMCOD = 2 & WITM = 1 & find([F:CBD]WIPTYP,3,6) & [F:CBD]WIPSTA = 3)
    Read [ITF1]ITF0=[F:CBD]ITMREFORI;[F:CBD]STOFCY
    If ([F:ITF1]REOMGTCOD <> [F:CBH]REOMGTCOD)
      Goto NEXT_CBD
    Endif
  Endif

    If WBUC <> [F:CBD]BUC
        While WBUC <> [F:CBD]BUC
            Gosub RUP_BUCKET
            If [F:CBH]DAYCOV = 0
                WBUC = [F:CBD]BUC
            Else
                WBUC += 1
            Endif
        Wend
        If WECCFLG
            # Issue 119200 - 2016-11-07 by STLIG : Don't reset WECCVALMAJ/MIN between buckets -
            #                                      New versions retrieve available stock (again).
            # Raz WECCVALMAJ, WECCVALMIN

            # Issue 119421 - 2016-11-22 by STLIG : Don't reset WECCSTODIS between buckets -
            #                                      Carry over positive demand / no suggestion (bucket).
            # Raz WECCSTODIS,WECCBES,WECCRES

            # Issue 120673 - 2017-01-31 by STLIG : Reset WECCBES between buckets -
            #                                      Used by product 'by order' process $CAL_SUGCOMECC.
            Raz WECCBES, WECCRES

            Raz WECCVALMAJO,WECCVALMINO

            # Issue 119200 - 2016-11-03 by STLIG : Maintain seperate demand dates per version
            Raz WECCDATB

        Endif
    Endif
    # mainly when stock issue stock rule is flagged "Version exclusive"
    If WECCFLG & [F:ITM]ECCFLG>1 & [F:CBH]ORDVER=2
        Gosub CUM_STODIS_ECCVAL
    Else
        Gosub CUM_STODIS
    Endif

$NEXT_CBD

Next
While WBUC < WNBBUC
    Gosub RUP_BUCKET
    If [F:CBH]DAYCOV = 0
        WBUC = WNBBUC
    Else
        WBUC += 1
    Endif
Wend
Filter [CBD]
If WECCFLG

    # Issue 83325 - 2018-04-24 by STLIG : for pjm this is not end of product therefore
    #                                     reset wecc.. arrays at start of product i.e. starting_stock_ecc
    Raz WECCBES,WECCRES
#    Raz WECCVALMAJ,WECCVALMIN,WECCSTODIS,WECCBES,WECCRES

    Raz WECCVALMAJO,WECCVALMINO

    # Issue 119200 - 2016-11-03 by STLIG : Maintain seperate demand dates per version
    Raz WECCDATB

Endif
Return

############################################################
# Calculate available stock for bucket
$CUM_STODIS
GPE = 0
GREPLANNING = "RPL_CUMSTODIS"
GPOINT = "REPLANNING" : Gosub ENTREE From EXEFNC
If GPE <> 0 : Return : Endif

# Besoins
WCBDREQ = [F:CBD]REQQTY

If [F:CBH]REOCOD = 3 & [F:CBD]WIPTYP=5 & [F:CBH]SHR > 0
    # Issue 94878 GA 02/2014 # Issue 89551 GA 07/2013
    #Call COR_PERTE([F:CBD]WIPTYP,[F:CBD]WIPSTA,[F:CBD]REQQTY,WSTOSHR)
    Call CAL_QTY_SHR("-",[F:CBD]REQQTY,[F:CBH]SHR,[F:CBH]STU)
Endif
If find([F:CBD]WIPTYP,WTYPDEM)
  If [F:CBD]TRCFLG = 2
     WBESIND += [F:CBD]REQQTY
  Endif
  WBESBUC  += [F:CBD]REQQTY

  # Issue 38342 - 2017-09-26 by STLIG : Demand accumulation (for expired stock calculation)
  WCUMDEM += [F:CBD]REQQTY

  WBESDEL  -= [F:CBD]REQQTY

  # Issue 97980 - 2018-08-21 by STLIG :
  # Project: Apply outstanding demand to cumulative stock total..
  If ([F:CBD]STOQTY > 0)
    WSTO -= ([F:CBD]REQQTY - [F:CBD]STOQTY)
  Else
    WSTO -= [F:CBD]REQQTY
  Endif

  #######################################################
  #  Issue - 113226 -  MRP : Suggestion bad positionned
  #  JAMCC 4th March 2016
  #
    #If WDATB = [0/0/0]  # Issue 106612 GA 02/2015 requirement date when stock becomes negative
    #If WDATB = [0/0/0] | (WSTO<0 & WSTO+[F:CBD]REQQTY>=0)
    #WDATB = [F:CBD]REQDAT
    #Endif
  If WDATB = [0/0/0]
    WDATB = [F:CBD]REQDAT
  Endif
  #
  #######################################################

# Effacement besoins fictifs (stocks périmés)

  # Issue 128657 - 2019-04-03 by STLIG : Replan material requirements - don't Delete cancelled material requirements,
  # update ORDERS with mrp message..
  If ([F:CBD]REQQTY = 0 &
&   !(find([F:CBD]WIPTYP,3,6) <> 0 & find([F:CBD]WIPSTA,1,2) <> 0 & [F:CBD]MRPMES <> 1))
#  If [F:CBD]REQQTY = 0

    Delete [CBD]
    If fstat
      GOK = 0
      Call FSTA("CBD") From GLOCK
    Endif
  Endif
  Goto CUM_STODIS_FIN
Endif

# Issue 80213 remonté
# FQ 78714 GA 01/2012 (suite)
# Ressources affectées à une Affaire = stock non disponible
If [F:CBD]PJT<>""
&    & (([F:CBD]WIPSTA=1 & WPJTSOF = 2)
&      |([F:CBD]WIPSTA=2 & WPJTSOP = 2)
&      |([F:CBD]WIPSTA=3 & WPJTSOS = 2))
  Goto CUM_STODIS_FIN
Endif

If WMODCAL = 2
    WSTO    += [F:CBD]REQQTY
    WBESDEL += [F:CBD]REQQTY
    Goto CUM_STODIS_FIN
Endif

# Ressources cumul selon règles de replanif. et date fin d'analyse
#If ([F:CBD]WIPTYP = 2  & [F:CBD]WIPSTA = 3)  |
#&  ([F:CBD]WIPTYP = 5  & [F:CBD]WIPSTA = 3)  |
#&  ([F:CBD]WIPTYP = 7  & [F:CBD]WIPSTA = 3)  |
#&  ([F:CBD]WIPTYP = 13 & [F:CBD]WIPSTA = 3)
If find([F:CBD]WIPTYP,2,5,7,13) & [F:CBD]WIPSTA = 3
  Goto CUM_STODIS_FIN
Else
  # llc 05.04 22755 si ressources en couverture, ne pas le prendre en compte 2 fois
  # il faut néanmoins mémoriser la qté pour réajuster la balance après suggestion
  # 09.04 25018 Pas de prise en compte des ressources en couverture si replanification

  If ([F:CBH]PLNANYCOD = 1 |
&     !find(WRPLMOD(func CBNLIB.MAPRPL([F:CBD]WIPTYP, [F:CBD]WIPSTA)),2,3))

      If ([F:CBH]DAYCOV <> 0 & WCOVRES <> 1)
         # Issue 104654 GA 12/2014 93590 raz
         # Issue 93590 GA 10/2013 Le stock doit tenir compte des ressources en couverture (sauf si "Ignorer ressources" coché)
         # WSTO     += [F:CBD]REQQTY
          WRESSQTY += [F:CBD]REQQTY
          Goto CUM_STODIS_FIN
      Endif
  Endif

  If ([F:CBH]PLNANYCOD = 1 |
&     [F:CBD]REQDAT > WANADATF |
&     [F:CBD]WIP = 2)

    WSTO    += [F:CBD]REQQTY
    WBESDEL += [F:CBD]REQQTY
  Else

    If (find(WRPLMOD(func CBNLIB.MAPRPL([F:CBD]WIPTYP, [F:CBD]WIPSTA)),2,3))

# 30015
#      If [F:CBD]REQDAT <= [F:CBH]PLHENDDAT
#        WSTO += [F:CBD]REQQTY
#      Endif
      Goto CUM_STODIS_FIN
    Else
      WSTO += [F:CBD]REQQTY
    Endif
  Endif
Endif
$CUM_STODIS_FIN
[F:CBD]REQQTY = WCBDREQ
Return
############################################################
# Issue 108013 - 06/2015 by GA : ECC for MRP
# Calculate available stock for bucket AND version
$CUM_STODIS_ECCVAL
Local Shortint I,J,K

# Issue 153252 - 2020-01-17 by STLIG : initialise K = -1..
Raz I,J
K = -1

If [F:ITM]ECCMAJ<>""
  For I=0 To WECCNBR-1
    If [F:CBD]ECCVALMAJ-[F:CBD]ECCVALMIN=WECCVALMAJ(I)-WECCVALMIN(I)
       K=I
       Break    # Issue 114401 - 2016-06-15 by CCC : stop if version found
    Elsif WECCVALMAJ(I)="" : Break
    Endif
  Next
  If K=-1  # Version was not found
    K=I

    # Issue 153252 - 2020-01-17 by STLIG : if transaction version exceeds array - log error..
    If (I > WECCNBR -1)
       Call ECR_TRACE(mess([F:CBD]WIPTYP,341,1)+
&                     mess([F:CBD]WIPSTA,342,1)-
&                     [F:CBD]VCRNUM-[F:CBD]ITMREF-[F:CBD]ECCVALMAJ-[F:CBD]ECCVALMIN-
&                     mess(414,177,1),1) From GESECRAN
      Return
    Endif

   # Actual stock for this version

# Issue 120673 - 2017-01-18 by STLIG : Determine the starting stock before process
#                                      (STARTING_STOCK_ECC) ...
#   Call STOECCVAL([F:CBD]ITMREF,[F:CBD]STOFCY,[F:CBD]ECCVALMAJ,[F:CBD]ECCVALMIN,WECCSTODIS(K)) From CBNLIB

    WECCVALMAJ(K) = [F:CBD]ECCVALMAJ
    WECCVALMIN(K) = [F:CBD]ECCVALMIN
  Endif
  If find([F:CBD]WIPTYP,WTYPDEM)    # Demande (Issue)

    # Issue 120508 - 2017-03-02 by STLIG : ALLQTY allocation ignores actual allocation version.
    #WECCSTODIS(K)-= [F:CBD]ALLQTY

    # Issue 97980 - 2018-08-21 by STLIG :
    # Project: Apply outstanding demand to cumulative stock total..
    If ([F:CBD]STOQTY > 0)
      WECCSTODIS(K) -= ([F:CBD]REQQTY - [F:CBD]STOQTY)
    Else
      WECCSTODIS(K)-= [F:CBD]REQQTY
    Endif

    WECCBES(K)   += [F:CBD]REQQTY

    # Issue 119200 - 2016-11-03 by STLIG : Maintain seperate demand dates per version
    If (WECCDATB(K)=[0/0/0])
      WECCDATB(K)=[F:CBD]REQDAT
    Endif

    # Issue 121128 - 2019-01-16 by STLIG : cumulative demand by version ..
    WECCCUMDEM(K) += [F:CBD]REQQTY

  # Issue 118553 - 2018-12-11 by STLIG : process quality control stock (wiptyp = 11) as supply
  Elsif (find([F:CBD]WIPTYP,WTYPSUG) |
&             [F:CBD]WIPTYP = 11)

    # Issue 119200 - 2016-11-03 by STLIG : Ignore resources in phase one when re-planning etc ...
    #                                      Apply CUM_STODIS / WSTO switches to CUM_STODIS_ECCVAL / WECCSTODIS
    Local Integer APPLY_RESOURCE
    If ([F:CBH]PLNANYCOD=1 | [F:CBD]REQDAT>WANADATF | [F:CBD]WIP=2 | WMODCAL=2)
      APPLY_RESOURCE = 1
    Else
      If (find(WRPLMOD(func CBNLIB.MAPRPL([F:CBD]WIPTYP,[F:CBD]WIPSTA)),2,3))
        APPLY_RESOURCE = 0
      Else
        APPLY_RESOURCE = 1
      Endif
    Endif
    If (APPLY_RESOURCE = 1)
      WECCSTODIS(K)+= [F:CBD]REQQTY
    Endif

    WECCRES(K)   += [F:CBD]REQQTY
  Endif
Endif
Gosub CUM_STODIS

Return
############################################################
# 11.05 33207 changement de méthode de gestion de la perte
Subprog OLD_COR_PERTE(LTYP,LSTA,LQTY,LSDE)
Value    Integer LTYP
Value    Integer LSTA
Variable Decimal LQTY
Variable Decimal LSDE
#
Local    Decimal WPER
#
Case LTYP
  When 5 :
      Case LSTA
          When 1, 2, 3 :
           LQTY = arr((LQTY*100)/(100+[F:CBH]SHR),10^-[F:CBH]STUDEC)
      Endcase
  When 1, 6, 8, 10
#      Case LSTA
#          When 1, 2, 3 :
#        If LQTY >= LSDE
#          WPER = (LQTY-LSDE)*((100+[F:CBH]SHR)/100)
#          LQTY = arr(LSDE+WPER,10^-[F:CBH]STUDEC)
#          LSDE = 0
#        Else
#          LSDE -= LQTY
#        Endif
#      Endcase
Endcase
End
############################################################
# Traitement de rupture bucket
# Handling switch to next bucket
$RUP_BUCKET

# Issue 120673 - 2017-01-09 by STLIG
Local Mask ITM2 [ITM2]    # Return ECCVALMAJ/MIN from STKINIECC.
Local Integer VERSION_IDX # Index of version in WECCSTOSEC and WECCVALMAJ/MIN.

WBESBUCS = WBESBUC
# Détermination stock sécurité du bucket

# Issue 198656 - 2021-03-25 by STLIG :
# mps/by mrp or mrp/by mps - ignore safety stock demand i.e. as transaction demand(s) ignored..
WSTOSEC = 0 # reset safety stock
If (WPRO = 1 & [F:CBH]REOMGTCOD = 3) |
&  (WPRO = 2 & [F:CBH]REOMGTCOD = 2)
  If [F:CBH]DAYCOV <> 0
    WSTOSEC = WCOUV(WBUC)-WBESBUC
    # Issue 94363 GA 02/2014 Stock de sécurité en couverture ?
    If WSECCOV=1 & WSTOSEC<0 WSTOSEC=0 Endif # Issue 88831 GA 03/2013
    WBESBUC = 0
  Endif
  If [F:CBH]SAFSTOCOD = 2
    If WDYNSAF = 2 & [F:ITF]SESCOD <> ""
      WDAT = WBUCDEB(WBUC)
      Gosub COR_STOSEC
      WSTOSEC += WSAISON
    Else
      WSTOSEC += [F:ITF]SAFSTO
    Endif
  Endif
Endif

# Consommation eventuelle des stocks périmés
If [F:CBH]EXYSTOFLG = 2
  Gosub TRT_STOPER
Endif
# Determination date du besoin
If WDATB = [0/0/0]
  WDATB = WBUCDEB(WBUC)
Endif
# 01.06 34336 + 10.06 38030
If WDEMQTY = 0 : WDEMQTY = WSTOSEC : Endif

# Issue 120673 - 2017-01-09 by STLIG : Add safety stock to array WECCSTOSEC ..
If (WECCFLG & [F:ITM]ECCFLG>1)

  Raz WECCSTOSEC

  If (WSTOSEC>0)

    # STKINIECC: Determine the 'highest version available in stock' ..

    # Issue 48879 - 2017-08-21 by STLIG : No transaction i.e. demand from safety stock only. Use [F:CBH]ITMREF
    Call STKINIECC([F:CBH]ITMREF,"","ITM2",1,1,0,2,"","ECCVALMAJ","ECCVALMIN","","",0,"") From STKACT

    # Are we processing this version? ..
    For I=0 To WECCNBR-1
      If ([M:ITM2]ECCVALMAJ-[M:ITM2]ECCVALMIN=WECCVALMAJ(I)-WECCVALMIN(I))
        VERSION_IDX=I
        Break
      Elsif (WECCVALMAJ(I)="")
        VERSION_IDX=-1
        Break
      Endif
    Next
    If (VERSION_IDX=-1) # No, version not found ..
      VERSION_IDX=I
      If (VERSION_IDX>WECCNBR-1)
        Return
      Endif
      # Assign safety stock and major/minor version to corresponding WECCSTOSEC and WECCVALMAJ/MIN index ..
      WECCSTOSEC(VERSION_IDX)=WSTOSEC
      WECCVALMAJ(VERSION_IDX)=[M:ITM2]ECCVALMAJ
      WECCVALMIN(VERSION_IDX)=[M:ITM2]ECCVALMIN
    Else                # Yes, version found ..
      # Assign safety stock to corresponding WECCSTOSEC index ..
      WECCSTOSEC(VERSION_IDX)=WSTOSEC
    Endif

  Endif

Endif

# Selon mode de gestion test si existence d'un besoin et création suggestions
Case [F:CBH]STDFLG
  When 2 :
    If WBESIND = 0
      Gosub CAL_SUGSTO
    Else
      Gosub CAL_SUGAFF
    Endif
  When 3 :
    If (WPJTFLAG & WPJT <> "")  # Issue 76634 - 2018-03-07 by STLIG : If pjt <> blank then process WSTO 'by order'
        Gosub CAL_SUGCOM
    Else
        Gosub CAL_SUGSTO
    Endif
  When 4 :
    If WBESIND = 0
      Gosub CAL_SUGSTO
    Else
      Gosub CAL_SUGCOM
    Endif
Endcase
WDATB   = [0/0/0]
WBESIND = 0
#  llc 05.04 22755
WSTO    += WRESSQTY
WRESSQTY = 0
Return
############################################################
# Calcul suggestions articles à  l'affaire
$CAL_SUGAFF
Local Decimal WWTOS # Issue 89551 GA 07/2013
If (WSTO+WBESIND) < WSTOSEC
  WBES = WSTOSEC - (WSTO+WBESIND)
  Call QTESUG(WBES,WSUG,WNBR,WSUGR,WRET,WTOS) From CBNLIB
  WDATS = WDATB
  WTYPO = 0
  WSTAO = 0
  WNUMO = ""
  WLINO = 0
  WSEQO = 0
  WPJTO = ""
  WBPRO = ""
  WTRCFLG = 1
  WSTO += WTOS
  Gosub CRE_SUG
Endif
# Traitement éclatement suggestions par affaires
If WBESIND <> 0
# Issue 107498/13 - create suggestions per project, when WPJTFLAG is set
If WPJTFLAG
  Filter [CBD2] Where ITMREF = [F:CBH]ITMREF &
&                     STOFCY = [F:CBH]STOFCY &
&                     BUC    = WBUC          &
&                     TRCFLG = 2             &
&                     PJT    = WPJT
&              Order By Key CBD3
Else
# FQ 43416 GA 22/10/2007 performances CBD0 => CBD3
  Filter [CBD2] Where ITMREF = [F:CBH]ITMREF &
&                     STOFCY = [F:CBH]STOFCY &
&                     BUC    = WBUC          &
&                     TRCFLG = 2
&              Order By Key CBD3
Endif
  For [CBD2]CBD3 Hint Key CBD3
    # 22617, tenir compte de la perte
    #If [F:CBH]REOCOD = 3 & [F:CBH]SHR > 0
    #  Call COR_PERTE([F:CBD2]WIPTYP,[F:CBD2]WIPSTA,[F:CBD2]REQQTY,WSTOSHR)
    #Endif
    WBES = [F:CBD2]REQQTY
    # 11.05 33207 si perte, on l'applique ici
    If [F:CBH]REOCOD = 3 & [F:CBH]SHR > 0
          # Issue 94878 GA 02/2014 # Issue 89551 GA 07/2013
          #WBES = arr(WBES * ((100+[F:CBH]SHR)/100),10^-[F:CBH]STUDEC)
          Call CAL_QTY_SHR("+",WBES,[F:CBH]SHR,[F:CBH]STU)
    Endif
    # suite FQ 78714 GA 01/2012 article géré à l'affaire
    # Issue 80213 Replace & [F:CBD2]WIPTYPORI=1
    If [F:CBD2]PJT<>"" & find([F:CBD2]WIPTYPORI,WTYPDEM)
&      & (([F:CBD2]WIPSTAORI=1 & WPJTSOF = 2)
&        |([F:CBD2]WIPSTAORI=2 & WPJTSOP = 2)
&        |([F:CBD2]WIPSTAORI=3 & WPJTSOS = 2))
          Gosub FIND_RESPJT
          If WBES<=0 Goto NEXT_SUGAFF Endif  # Issue 79828 case WBES<0, stop
      Endif
    Call QTESUG(WBES,WSUG,WNBR,WSUGR,WRET,WTOS) From CBNLIB
    WDATS = [F:CBD2]REQDAT
    WTYPO = [F:CBD2]WIPTYPORI
    WSTAO = [F:CBD2]WIPSTAORI
    WNUMO = [F:CBD2]WIPNUMORI
    WLINO = [F:CBD2]WIPLINORI
    WSEQO = [F:CBD2]WIPSEQORI
    WPJTO = [F:CBD2]PJT
    If find([F:CBH]REOCOD,3,5) : WBPRO   = [F:CBD2]BPRNUM : Else : WBPRO = "" : Endif
    WTRCFLG = 2
    # 11.05 33207
    If [F:CBH]REOCOD = 3 & [F:CBH]SHR > 0
        If WBES = WTOS
            WSTO += [F:CBD2]REQQTY
        Else
          # Issue 94878 GA 02/2014 # Issue 89551 GA 07/2013
          #WSTO += arr((WTOS*100)/(100+[F:CBH]SHR),10^-[F:CBH]STUDEC)
          WWTOS=WTOS
          Call CAL_QTY_SHR("-",WWTOS,[F:CBH]SHR,[F:CBH]STU)
          WSTO += WWTOS
        Endif
    Else
        WSTO += WTOS
    Endif
    Gosub CRE_SUG
$NEXT_SUGAFF   # suite FQ 78714 GA 01/2012
  Next
  Filter [CBD2]
Endif
Return
############################################################
# Calcul suggestions articles sur stock
$CAL_SUGSTO
GPE = 0
GREPLANNING = "RPL_CALSUGSTO"
GPOINT = "REPLANNING" : Gosub ENTREE From EXEFNC
If GPE <> 0 : Return : Endif
Local Decimal WWTOS # Issue 89551 GA 07/2013
# Reconstitution du stock de sécurité suivant paramètre
XSAFSTO = 0
If [F:CBH]SAFSTOCOD = 2  # Menu local 2741: 2="Au premier besoin", 1="Toujours"
    If WDYNSAF <> 2 | [F:ITF]SESCOD = ""
        If WSAFCOV = 2
            # 35844 02.10
            If WSTO < WSTOSEC : XSAFREC = 2 : Endif
            If XSAFREC = 3
                XSAFREC = 0
            Else
                If XSAFREC <> 2 : XSAFREC = 1 : Endif
            Endif
            # Issue 92672 GA 10/2013 "au 1er besoin" WBESBUC a été Raz si couverture
            # Issue 87376 en mode "premier besoin", le stock de sécurité n'était ignoré que sur le 1er bucket, à tort
            # If WBUC = 0 & WBESBUC = 0
             If WBESBUCS = 0
              # FQ 78388 GA 12/2011 Cas particulier "Au premier besoin"
               GPE = 0 : GPOINT = "CTLSTOSEC" : Gosub ENTREE From EXEFNC
               If !GPE WSTOSEC = 0 Endif
            Endif
        Endif
    Endif
Endif
# Issue 108013 - 2015-06-30 by GA : MRP by ECC version
# Product managed by order with ECC version
# Issue 120508 - 2017-03-02 by STLIG : For versioned products generate suggestions in CAL_SUGECC only.
If WECCFLG  & [F:ITM]ECCFLG>1
  Gosub CAL_SUGECC
Elsif WSTO < WSTOSEC
    WBES = (WSTOSEC - WSTO)

    #------ Point d'entrée MRPQTYSUG
    GPOINT = "MRPQTYSUG" : Gosub ENTREE From EXEFNC                # 02.06 35075

    # 11.05 33207 si perte, on l'applique ici
    If [F:CBH]REOCOD = 3 & [F:CBH]SHR > 0
          # Issue 94878 GA 02/2014 # Issue 89551 GA 07/2013
          #WBES = arr(WBES * ((100+[F:CBH]SHR)/100),10^-[F:CBH]STUDEC)
          Call CAL_QTY_SHR("+",WBES,[F:CBH]SHR,[F:CBH]STU)
    Endif
    # 77765
    # Issue 124128 - 2019-03-27 by STLIG : despite reorder quantity = 'minimum quantity' -
    # when re-planning don't incorporate eoq in suggestion during phase 1
    # for all suggestion types ..
    If [F:CBH]PLNANYCOD = 2 & WMODCAL = 1 & find([F:CBH]REOQTYCOD,2,3)
        WSUG  = WBES
        WNBR  = 1
        WTOS  = WBES
        WSUGR = 0
    Else
        Call QTESUG(WBES,WSUG,WNBR,WSUGR,WRET,WTOS) From CBNLIB
    Endif
    WDATS = WDATB
    WTYPO = 0
    WSTAO = 0
    WNUMO = ""
    WLINO = 0
    WSEQO = 0
    WPJTO = ""
    WBPRO = ""
    WTRCFLG = 1
    # 11.05 33207
    If [F:CBH]REOCOD = 3 & [F:CBH]SHR > 0
        If WBES = WTOS
          WSTO += (WSTOSEC - WSTO + XSAFSTO)
        Else
          # Issue 94878 GA 02/2014 # Issue 89551 GA 07/2013
          #WSTO += arr((WTOS*100)/(100+[F:CBH]SHR),10^-[F:CBH]STUDEC)
          WWTOS=WTOS
          Call CAL_QTY_SHR("-",WWTOS,[F:CBH]SHR,[F:CBH]STU)
          WSTO += WWTOS
        Endif
    Else
        WSTO += WTOS
    Endif
    Gosub CRE_SUG
    WDEMQTY  = -1                    # 10.06 38030
    # si le stock de sécurité a été reconstitué, on en parle plus ...
    If XSAFREC = 1 : XSAFREC = 2 : Endif                            # (02.04)
Endif
Return
############################################################
# Estimation du délai de réappro (extrait de CAL_UNE_SUG
$CAL_SUGLTI

Local Date WDATDT, WDATFT

# FQ 65789 GA 10/2010 seulement si type de suggestion = 3:Fabrication
# FQ 48636 GA 08/2008 <Délai gamme toujours>
#If WFABLTI=3
#& | (WFABLTI=2 & [F:ITF]MFGLTI=0)     # FQ 63304 GA 03/2010 <Délai gamme / article> et pas de délai article
If WREOCOD=3 & ( WFABLTI=3 | (WFABLTI=2 & [F:ITF]MFGLTI=0))

  # Look for a valid routing code
   # Issue 111414 - 2016-02-11 by CCC : Look for a valid route considering versioning
   #Call FIND_ROUTING(1, [F:CBH]BOMALT, WDATS, WSUG) From CBNLIBO
   ## 56745
   #If [F:ROH]ROUALT <> 0
   If func CBNLIBO.FIND_ROUTING2(1, [F:ITF]ITMREF, "", [F:ITF]STOFCY, [F:CBH]BOMALT, WDATS, WSUG) <> 0

     # Issue 159529 - 2019-09-11 by STLIG : determine WDATFT (end date) direct from scheduling
     WDATDT = WDATS
     Call CAL_ROH_LTI(WDATDT,WSUG,WDATFT) From CBNLIBO
     WMFGLTI = WDATFT - WDATDT +1

   Else
       WMFGLTI = [F:ITF]MFGLTI
   Endif

   WPURLTI = [F:ITF]OFS               # FQ 51168 GA 12/2008 avant 0
   WQUALTI = [F:ITF]QUALTI            # FQ 51168 GA 12/2008 avant 0
Elsif WREOCOD=5 & [F:ITM]SCPFLG=2     # Issue 80129 GA 02/2012 find BPRNUM & LTI on associated Service
   Local Char     WSRVITMREF(GLONITM)
   WMFGLTI = 0
   WPURLTI = [F:ITF]OFS
   WQUALTI = [F:ITF]QUALTI
   If [F:CBD1]BPRNUM=""

     # 107310(55934) product-site supplier
     Call FIND_BPRNUM ([F:CBD1]ITMREF,[F:CBH]BOMALT,"",WFCY,[F:CBD1]BPRNUM) From SCOLIB

   Endif
   Call FIND_SCI_LTI([F:CBD1]ITMREF,[F:CBD1]BPRNUM,[F:CBD1]STOFCY,[F:CBH]BOMALT,WSRVITMREF,WPURLTI) From SCOLIB
Else
   WMFGLTI = [F:ITF]MFGLTI
   WPURLTI = [F:ITF]OFS
   WQUALTI = [F:ITF]QUALTI
Endif
Return
############################################################
# Calcul suggestions articles à  la commande
$CAL_SUGCOM
Local Decimal WWTOS # Issue 89551 GA 07/2013

# Issue 120673 - 2017-01-31 by STLIG : For versioned product 'by order' process via CAL_SUGCOMECC not CAL_SUGCOM
# Issue 120508 - 2017-03-02 by STLIG : For versioned products generate suggestions in CAL_SUGCOM only.
If (WECCFLG  & [F:ITM]ECCFLG>1)
  Gosub CAL_SUGCOMECC
Elsif WSTO < WSTOSEC
  WDIS = WBESIND+WSTO-WSTOSEC
# FQ 43416 GA 22/10/2007 performances CBD0 => CBD3
# Issue 107498/13 - create suggestions per project, when WPJTFLAG is set
If WPJTFLAG

  If ([F:CBH]STDFLG = 3)
    # Issue 76634 - 2018-03-07 by STLIG :
    # If 'available stock' then do not include material requirements in WSTO 'by order' process..
    Filter [CBD2] Where ITMREF = [F:CBH]ITMREF &
&                       STOFCY = [F:CBH]STOFCY &
&                       BUC    = WBUC          &
&                       find([F:CBD2]WIPTYP,WTYPDEM) &
&                       WIPTYP <> 6 &
&                       TRCFLG = 2             &
&                       PJT    = WPJT
&                Order By Key CBD3
  Else
    Filter [CBD2] Where ITMREF = [F:CBH]ITMREF &
&                       STOFCY = [F:CBH]STOFCY &
&                       BUC    = WBUC          &
&                       find([F:CBD2]WIPTYP,WTYPDEM) &
&                       TRCFLG = 2             &
&                       PJT    = WPJT
&                Order By Key CBD3
  Endif

Else
    Filter [CBD2] Where ITMREF = [F:CBH]ITMREF &
&                       STOFCY = [F:CBH]STOFCY &
&                       BUC    = WBUC          &
&                       find([F:CBD2]WIPTYP,WTYPDEM) &
&                       TRCFLG = 2
&                Order By Key CBD3
Endif

  For [CBD2]CBD3 Hint Key CBD3

    # Issue 83325 - 2018-04-04 by STLIG : PJM - where WDIS < 0 i.e. safety stock requirement..
    #                                     generate separate suggestion for safety stock
    If (WPJTFLAG & WPJT <> "" & WDIS < 0)
      Gosub CRE_SUG_STOSEC
    Endif

    If [F:CBD2]REQQTY > WDIS                                   # 06.05 30430
      WBES  = ([F:CBD2]REQQTY - WDIS)
      # 11.05 33207 si perte, on l'applique ici
      If [F:CBH]REOCOD = 3 & [F:CBH]SHR > 0
          # Issue 94878 GA 02/2014 # Issue 89551 GA 07/2013
          #WBES = arr(WBES * ((100+[F:CBH]SHR)/100),10^-[F:CBH]STUDEC)
          Call CAL_QTY_SHR("+",WBES,[F:CBH]SHR,[F:CBH]STU)
      Endif
      # suite FQ 78714 GA 01/2012 article géré à la commande et à l'affaire
      # Issue 80213 Replace & [F:CBD2]WIPTYPORI=1
      If [F:CBD2]PJT<>"" & find([F:CBD2]WIPTYPORI,WTYPDEM)
&      & (([F:CBD2]WIPSTAORI=1 & WPJTSOF = 2)
&        |([F:CBD2]WIPSTAORI=2 & WPJTSOP = 2)
&        |([F:CBD2]WIPSTAORI=3 & WPJTSOS = 2))
          Gosub FIND_RESPJT
          If WBES<=0 Goto NEXT_SUGCOM Endif  # Issue 79828 case WBES<0, stop
      Endif
      Call QTESUG(WBES,WSUG,WNBR,WSUGR,WRET,WTOS) From CBNLIB
      WDATS = [F:CBD2]REQDAT
      WTYPO = [F:CBD2]WIPTYPORI
      WSTAO = [F:CBD2]WIPSTAORI
      WNUMO = [F:CBD2]WIPNUMORI
      WLINO = [F:CBD2]WIPLINORI
      WSEQO = [F:CBD2]WIPSEQORI
      WITMO = [F:CBD2]ITMREFORI    # 12.05 33849

      # Issue 198440 (77621,72707) - 2020-07-29 by STLIG :
      # project = blank if available stock and non-project demand..
      If ([F:CBH]STDFLG = 3 & [F:CBD2]WIPTYP <> 14)
        WPJTO = ""
      Else
        WPJTO = [F:CBD2]PJT
      Endif

      # Issue X3-38563 - 2017-06-19 by STLIG : for sub-contract suggestion ([F:CBH]REOCOD=5)
      #                                        BPRNUM = sub-contract supplier (CRE_SUG/FIND_BPRNUM) ..
      If ([F:CBH]REOCOD=3)
        WBPRO = [F:CBD2]BPRNUM
      Else
        WBPRO = ""
      Endif

      WTRCFLG = 2
      # 11.05 33207
      If [F:CBH]REOCOD = 3 & [F:CBH]SHR > 0
          If WBES = WTOS
              WSTO += ([F:CBD2]REQQTY - WDIS)
              WDIS += ([F:CBD2]REQQTY - WDIS)
          Else
              # Issue 94878 GA 02/2014 # Issue 89551 GA 07/2013
              WWTOS=WTOS
              Call CAL_QTY_SHR("-",WWTOS,[F:CBH]SHR,[F:CBH]STU)
              #WSTO += arr((WTOS*100)/(100+[F:CBH]SHR),10^-[F:CBH]STUDEC)
              #WDIS += arr((WTOS*100)/(100+[F:CBH]SHR),10^-[F:CBH]STUDEC)
              WSTO += WWTOS
              WDIS += WWTOS
          Endif
      Else
          WSTO += WTOS
          WDIS += WTOS
      Endif
      WDIS -= [F:CBD2]REQQTY

      # Issue 119200 - 2016-11-14 by STLIG : Apply version to suggestion for Management Mode = "By Order".
#      WECCVALMAJO=[F:CBD2]ECCVALMAJ
#      WECCVALMINO=[F:CBD2]ECCVALMIN

      Gosub CRE_SUG
    Else
      WDIS -= [F:CBD2]REQQTY
    Endif
$NEXT_SUGCOM # FQ 78714 GA 12/2011
  Next
  Filter [CBD2]
Endif
Return

# Issue 120673 - 2017-01-31 by STLIG : Subroutine to process versioned products 'by order ...
$CAL_SUGCOMECC

# For each product version ...
For IECC=0 To WECCNBR-1
  If (WECCVALMAJ(IECC)="") Break Endif
  If (WECCSTODIS(IECC)<WECCSTOSEC(IECC))
    WDIS = WECCBES(IECC)+WECCSTODIS(IECC)-WECCSTOSEC(IECC)
    If (WPJTFLAG)

      If ([F:CBH]STDFLG = 3)
        # Issue 76634 - 2018-03-22 by STLIG :
        # If 'available stock' then do not include material requirements in WSTO 'by order' process..
        Filter [CBD2] Where ITMREF = [F:CBH]ITMREF &
&                           ECCVALMAJ = WECCVALMAJ(IECC) &
&                           ECCVALMIN = WECCVALMIN(IECC) &
&                           STOFCY = [F:CBH]STOFCY &
&                           BUC    = WBUC          &
&                           find([F:CBD2]WIPTYP,WTYPDEM) &
&                           WIPTYP <> 6 &
&                           TRCFLG = 2             &
&                           PJT    = WPJT
&                     Order By Key CBD3
      Else
        Filter [CBD2] Where ITMREF = [F:CBH]ITMREF &
&                           ECCVALMAJ = WECCVALMAJ(IECC) &
&                           ECCVALMIN = WECCVALMIN(IECC) &
&                           STOFCY = [F:CBH]STOFCY &
&                           BUC    = WBUC          &
&                           find([F:CBD2]WIPTYP,WTYPDEM) &
&                           TRCFLG = 2             &
&                           PJT    = WPJT
&                     Order By Key CBD3
      Endif

    Else
      Filter [CBD2] Where ITMREF = [F:CBH]ITMREF &
&                         ECCVALMAJ = WECCVALMAJ(IECC) &
&                         ECCVALMIN = WECCVALMIN(IECC) &
&                         STOFCY = [F:CBH]STOFCY &
&                         BUC    = WBUC          &
&                         find([F:CBD2]WIPTYP,WTYPDEM) &
&                         TRCFLG = 2
&                   Order By Key CBD3
    Endif
    For [CBD2]CBD3 Hint Key CBD3

      # Issue 83325 - 2018-04-04 by STLIG : PJM - where WDIS < 0 i.e. safety stock requirement..
      #                                     generate separate suggestion to cover safety stock
      If (WPJTFLAG & WPJT <> "" & WDIS < 0)
        Gosub CRE_SUG_STOSEC
      Endif

      If ([F:CBD2]REQQTY>WDIS)
        WBES  = ([F:CBD2]REQQTY-WDIS)
        If [F:CBH]REOCOD = 3 & [F:CBH]SHR > 0
          Call CAL_QTY_SHR("+",WBES,[F:CBH]SHR,[F:CBH]STU)
        Endif
        If [F:CBD2]PJT<>"" & find([F:CBD2]WIPTYPORI,WTYPDEM)
&        & (([F:CBD2]WIPSTAORI=1 & WPJTSOF = 2)
&          |([F:CBD2]WIPSTAORI=2 & WPJTSOP = 2)
&          |([F:CBD2]WIPSTAORI=3 & WPJTSOS = 2))
          Gosub FIND_RESPJT
#          If WBES<=0 Goto NEXT_SUGCOM Endif
          If WBES<=0 Goto NEXT_SUGCOMECC Endif
        Endif
        Call QTESUG(WBES,WSUG,WNBR,WSUGR,WRET,WTOS) From CBNLIB
        WDATS = [F:CBD2]REQDAT
        WTYPO = [F:CBD2]WIPTYPORI
        WSTAO = [F:CBD2]WIPSTAORI
        WNUMO = [F:CBD2]WIPNUMORI
        WLINO = [F:CBD2]WIPLINORI
        WSEQO = [F:CBD2]WIPSEQORI
        WITMO = [F:CBD2]ITMREFORI    # 12.05 33849

        WPJTO = [F:CBD2]PJT

        # Issue X3-38563 - 2017-06-19 by STLIG : for sub-contract suggestion ([F:CBH]REOCOD=5)
        #                                        BPRNUM = sub-contract supplier (CRE_SUG/FIND_BPRNUM) ..
        If ([F:CBH]REOCOD=3)
          WBPRO = [F:CBD2]BPRNUM
        Else
          WBPRO = ""
        Endif

        WTRCFLG = 2
        If [F:CBH]REOCOD = 3 & [F:CBH]SHR > 0
          If WBES = WTOS
            WSTO += ([F:CBD2]REQQTY - WDIS)
            WECCSTODIS(IECC) += ([F:CBD2]REQQTY - WDIS)
            WDIS += ([F:CBD2]REQQTY - WDIS)
          Else
            WWTOS=WTOS
            Call CAL_QTY_SHR("-",WWTOS,[F:CBH]SHR,[F:CBH]STU)
            WSTO += WWTOS
            WECCSTODIS(IECC) += WWTOS
            WDIS += WWTOS
          Endif
        Else
          WSTO += WTOS
          WECCSTODIS(IECC)+=WTOS
          WDIS += WTOS
        Endif
        WDIS -= [F:CBD2]REQQTY

        # Issue 119200 - 2016-11-14 by STLIG : Apply version to suggestion for Management Mode = "By Order".
        WECCVALMAJO=[F:CBD2]ECCVALMAJ
        WECCVALMINO=[F:CBD2]ECCVALMIN

        Gosub CRE_SUG
      Else
        WDIS -= [F:CBD2]REQQTY
      Endif
$NEXT_SUGCOMECC
    Next
    Filter [CBD2]
  Endif
Next

Return

############################################################
# Besoin à l'affaire déjà couvert ?  # FQ 78714 GA 12/2011 #
$FIND_RESPJT
    # Issue 80213 Condition BPRNUM cancelled
    For [ORD1]ORD3 Hint Key ORD1
&                  Where ITMREF    = [F:CBH]ITMREF
&                     &  STOFCY    = [F:CBH]STOFCY
&                     &  PJT       = [F:CBD2]PJT
&                     &  find(WIPTYP,WTYPSUG)<>0
      # Issue 80213 Case VCRNUMORI is unknown
      If  [F:ORD1]VCRNUMORI = ""
&       | ( [F:ORD1]VCRNUMORI = [F:CBD2]WIPNUMORI
&         & [F:ORD1]VCRLINORI = [F:CBD2]WIPLINORI
&         & [F:ORD1]VCRSEQORI = [F:CBD2]WIPSEQORI )
           WBES     -= [F:ORD1]RMNEXTQTY
           WRESSQTY += [F:ORD1]RMNEXTQTY
      Endif
    Next

Return

############################################################
# Issue 108013 - 2015-06-30 by GA : MRP by ECC version
# Calcul suggestions articles par version
$CAL_SUGECC
Local Decimal WWTOS,WBESTOT
Local Integer IECC

  WBES = (WSTOSEC - WSTO)
  WDIS = WBESIND+WSTO-WSTOSEC
  For IECC=0 To WECCNBR-1
    If WECCVALMAJ(IECC)="" Break Endif

    # Issue 120673 - 2017-01-12 by STLIG : If processing safety stock and
    #                                         rebuild safety stock = at first requirement and
    #                                         safety stock and
    #                                         no requirement
    #                                      Then clear safety stock
    #                                         i.e. no suggestion for safety stock in this period ...
    If ([F:CBH]SAFSTOCOD=2 & WSAFCOV=2 & WECCSTOSEC(IECC)>0 & WECCSTODIS(IECC)>=0)
      WECCSTOSEC(IECC)=0
      WSTOSEC=0
    Endif

    # Issue 119200 - 2016-11-03 by STLIG : Check (cumulative demand/supply < safety stock)
    # Issue 120673 - 2017-01-10 by STLIG   Assign WBES with safety stock - cumulative demand/supply.
    If (WECCSTODIS(IECC)<WECCSTOSEC(IECC))
      WBES=WECCSTOSEC(IECC)-WECCSTODIS(IECC)

      WECCVALMAJO=WECCVALMAJ(IECC)
      WECCVALMINO=WECCVALMIN(IECC)
      If WBES=0 Goto NEXT_ECC Endif

      #------ Point d'entrée MRPQTYSUG
      GPOINT = "MRPQTYSUG" : Gosub ENTREE From EXEFNC
      If [F:CBH]REOCOD = 3 & [F:CBH]SHR > 0
        Call CAL_QTY_SHR("+",WBES,[F:CBH]SHR,[F:CBH]STU)
      Endif

      # Issue 120673 - 2017-03-02 by STLIG : Code to process 'at first requirement' safety stock for
      #                                      non-versioned product - has no place here...
      # Safety stock: to add in first requirement ?
      #If [F:CBH]SAFSTOCOD = 2 & WSTO+WBES<WSTOSEC
      #  WBES+=WSTOSEC
      #  WSTOSEC=0
      #  If XSAFREC = 1 : XSAFREC = 2 : Endif
      #Endif

      # Issue 124128 - 2019-03-27 by STLIG : despite reorder quantity = 'minimum quantity' -
      # when re-planning don't incorporate eoq in suggestion during phase 1
      # for all suggestion types ..
      If [F:CBH]PLNANYCOD = 2 & WMODCAL = 1 & find([F:CBH]REOQTYCOD,2,3)
        WSUG  = WBES
        WNBR  = 1
        WTOS  = WBES
        WSUGR = 0
      Else
        Call QTESUG(WBES,WSUG,WNBR,WSUGR,WRET,WTOS) From CBNLIB
      Endif

      # Issue 119200 - 2016-11-03 by STLIG : Maintain seperate demand dates per version
      #                                      Assign demand date to suggestion
      WDATS=WECCDATB(IECC)

      # Issue 120673 - 2017-01-10 by STLIG : If no suggestion date e.g. safety stock only demand,
      #                                      then assign bucket start date.
      If (WDATS=[0/0/0])
        WDATS=WBUCDEB(WBUC)
      Endif

      WTYPO = 0
      WSTAO = 0
      WNUMO = ""
      WLINO = 0
      WSEQO = 0
      WPJTO = ""
      WBPRO = ""
      WTRCFLG = 1
      Gosub CRE_SUG

      # Issue 180530 - 2020-03-26 by STLIG : consider suggestions inc. shrinkage when
      # incrementing available stock ..
      If ([F:CBH]REOCOD = 3 & [F:CBH]SHR > 0)
        If (WBES = WTOS)
          WSTO += (WSTOSEC - WSTO)
          WECCSTODIS(IECC) += (WSTOSEC - WECCSTODIS(IECC))
        Else
          WWTOS = WTOS
          Call CAL_QTY_SHR("-",WWTOS,[F:CBH]SHR,[F:CBH]STU)
          WSTO += WWTOS
          WECCSTODIS(IECC) += WWTOS
        Endif
      Else
        WSTO += WTOS
        # Issue 119200 - 2016-11-03 by STLIG : Update cumulative demand with suggestion quantity and
        # Issue 120673 - 2017-01-10 by STLIG   reset demand version date after suggestion
        WECCSTODIS(IECC) += WTOS
      Endif

      WECCDATB(IECC) = [0/0/0]

      If GOK <> 1
        Break
      Endif
      WDEMQTY  = -1
$NEXT_ECC

    Endif

  Next

Return

############################################################
# Issue 95682 GA 01/2014
# Stock en transit ? inspiré de CNSSPRSTD/TRT_TRANSIT
$TRT_TRFSTO
# Pas de stock en transit
WTRFCAL = WTRF
If WTRFCAL=0 Return Endif

If GMODU(5) = 2
   If clalev ([F:SDH]) <= 0 : Local File SDELIVERY  [SDH] : Endif
   If clalev ([F:SDD]) <= 0 : Local File SDELIVERYD [SDD] : Endif
   WFIL = "[F:SDH]CFMFLG=2&[F:SDH]BETFCY=2"
   If WFCY<>""
      WFIL += "&[F:SDH]PRHFCY=WFCY"
   Endif
   Link [SDD] With [SDH]SDH0=[F:SDD]SDHNUM As [SDX]
   # Issue 97589 GA 04/2014
   #For  [SDX] Where evalue(WFIL) & [F:SDD]ITMREF=WITMREF & RCPQTYSTU<QTYSTU
   For  [SDX] Where evalue(WFIL) & [F:SDD]ITMREF=WITMREF & SOHNUM<>"" & RCPQTYSTU<QTYSTU
        WTRFCAL -= [F:SDD]QTYSTU-[F:SDD]RCPQTYSTU
   Next
Endif
If GMODU(6) = 2
   If clalev ([F:PNH]) <= 0 : Local File PRETURN    [PNH] : Endif
   If clalev ([F:PND]) <= 0 : Local File PRETURND   [PND] : Endif
   Local Char WFIL1(100)
   WFIL= "[F:PNH]CFMFLG=2&[F:PNH]BETFCY=2"
   If WFCY<>""
      WFIL += "&[F:PND]LINSTOFCY=WFCY"
   Endif
   Link [PND] With [PNH]PNH0=[F:PND]PNHNUM As [PNX]
   For  [PNX] Where evalue(WFIL) & [F:PND]ITMREF=WITMREF & SRDQTYSTU<QTYSTU
        WTRFCAL -= [F:PND]QTYSTU-[F:PND]SRDQTYSTU
   Next
Endif
If WTRFCAL<0 WTRFCAL=0 Endif
Return

############################################################
# Epuisement à  date des stocks périmés dans la période
$TRT_STOPER

# Issue 38342 - 2017-09-26 by STLIG : Accumulated demand after lot expiry
Local Decimal CUMDEMEXPIRE

Filter [CBW] Where STOFCY  = WFCY          &
&                  ITMREF  = [F:CBH]ITMREF &
&                  RECCOD  = 0             &
&                  DAT    <= WBUCFIN(WBUC)
&            Order By Key CBW0
For [CBW]

Call ECR_DEBUG("FCY/ITM="+[F:CBH]STOFCY+"/"+[F:CBH]ITMREF
&             -"QTYSTU="+num$([F:CBW]QTYSTU)
&             -"WBESBUCS="+num$(WBESBUCS)-"WSTO="+num$(WSTO)
&             -"WBUC="+num$(WBUC)-"WBUCDEB="+num$(WBUCDEB(WBUC))-"WBUCFIN="+num$(WBUCFIN(WBUC))
&             )

  # Issue 38342 - 2017-09-26 by STLIG : Calculate accumulated demand after lot expiry
  CUMDEMEXPIRE = 0

  # Issue 121128 - 2019-01-16 by STLIG : filter by version - if applicable ..
  Filter [CBD1] Where [CBD1]ITMREF = [F:CBH]ITMREF &
&                     [CBD1]ECCVALMAJ = [F:CBW]ECCVALMAJ &
&                     [CBD1]ECCVALMIN = [F:CBW]ECCVALMIN &
&                     find([CBD1]WIPTYP, WTYPDEM) &
&                     [CBD1]BUC = WBUC &
&                     [CBD1]REQDAT > [F:CBW]DAT

  For [CBD1]
    CUMDEMEXPIRE += [F:CBD1]REQQTY
  Next
  Filter [CBD1]

  # Issue 121128 - 2019-01-16 by STLIG : process expired stock by version / not by version ..
  If (WECCFLG & [F:ITM]ECCFLG > 1)
    Local Integer POS

    POS = func FUNCBN.FINDECCVALMAJ([F:CBW]ECCVALMAJ,[F:CBW]ECCVALMIN,WECCVALMAJ,WECCVALMIN,WECCNBR)
    If ((WECCCUMDEM(POS) - CUMDEMEXPIRE) > [F:CBW]QTYSTU)
      WECCCUMDEM(POS) -= [F:CBW]QTYSTU
    Else
      WECCSTODIS(POS) -= ([F:CBW]QTYSTU - (WECCCUMDEM(POS) - CUMDEMEXPIRE))
      Gosub CRE_BESDIV
      WECCCUMDEM(POS) = CUMDEMEXPIRE
      WECCBES(POS) += ([F:CBW]QTYSTU - (WECCCUMDEM(POS) - CUMDEMEXPIRE))
    Endif
  Else
    If ((WCUMDEM - CUMDEMEXPIRE) > [F:CBW]QTYSTU)
      # If accumulated demand before lot expiry > lot then no expired stock, reduce accumulated demand
      WCUMDEM -= [F:CBW]QTYSTU
    Else
      # If accumulated demand before lot expiry <= lot then expired stock
      # Reduce stock balance by expired stock
      WSTO -= ([F:CBW]QTYSTU - (WCUMDEM - CUMDEMEXPIRE))
      # Create VDS transaction for expired stock
      Gosub CRE_BESDIV
      # Set accumulated demand to accumulated demand after lot expiry
      WCUMDEM = CUMDEMEXPIRE
      # Add expired stock to besoin bucket
      WBESBUC += ([F:CBW]QTYSTU - (WCUMDEM - CUMDEMEXPIRE))
    Endif
  Endif

#  # Issue 105935 - 2015-09-28 by BEEBE : Setting of VDS-Values
#  #                The miscellaneous request (VDS) has to be considered in WBESBUC too
#  If WBESBUCS > [F:CBW]QTYSTU
#      WBESBUCS -= [F:CBW]QTYSTU
#      If (WBESBUC > [F:CBW]QTYSTU)
#          WBESBUC -= [F:CBW]QTYSTU
#      Else
#          WBESBUC  = 0
#      Endif
#  Else
#      WSTO     -= ([F:CBW]QTYSTU - WBESBUCS)
#      Gosub CRE_BESDIV
#      WBESBUCS  = 0                            # 10.06 37841
#      WBESBUC   = 0                            # FQ 71849 GA 08/2011
#  Endif

  Delete [CBW]
  If fstat
    GOK = 0
    Call FSTA("CBW") From GLOCK
    Break
  Endif
Next
Filter [CBW]
Return
############################################################
# Ecriture besoin divers (articles périmés)  # VDS #
# Miscellaneous request (obsolete products)  # VDS #
$CRE_BESDIV
Raz [F:CBD1]
[F:CBD1]          = [F:CBH]

# Issue 121128 - 2019-01-14 by STLIG : record version - if applicable
[F:CBD1]ECCVALMAJ = [F:CBW]ECCVALMAJ
[F:CBD1]ECCVALMIN = [F:CBW]ECCVALMIN

[F:CBD1]WIPTYP    = 10
[F:CBD1]WIPSTA    = 3
Call NUMERO(GSUG,WFCY,WCALDATD,"",[F:CBD1]WIPNUM,WRET) From SUBANM
If WRET <> 0
  Call ECR_TRACE(mess(66,187,1),1) From GESECRAN
  GOK = 0
  Return
Endif

# Issue 38342 - 2017-09-26 by STLIG : VDS transaction = expired stock
# Issue 121128 - 2019-01-16 by STLIG : process expired stock by version / not by version ..
If (WECCFLG & [F:ITM]ECCFLG > 1)
  [F:CBD1]REQQTY = [F:CBW]QTYSTU - (WECCCUMDEM(POS) - CUMDEMEXPIRE)
Else
  [F:CBD1]REQQTY = [F:CBW]QTYSTU - (WCUMDEM - CUMDEMEXPIRE)
Endif
#[F:CBD1]REQQTY    = ([F:CBW]QTYSTU - WBESBUCS)

[F:CBD1]RMNEXTQTY = [F:CBD1]REQQTY
[F:CBD1]STRDAT    = [F:CBW]DAT
[F:CBD1]ENDDAT    = [F:CBW]DAT
If [F:CBD1]ENDDAT < WCALDATD
 [F:CBD1]REQDAT  = WCALDATD
Else
 [F:CBD1]REQDAT  = [F:CBD1]ENDDAT
Endif
I = [F:CBD1]REQDAT - WCALDATD
If I < 0          : I = 0          : Endif
If I > WNBJOU - 1 : I = WNBJOU - 1 : Endif
[F:CBD1]BUC = WBUCNUM(I)
# 11.05 33236
Case WBUCTYP([F:CBD]BUC)
    When 1,2:    [F:CBD]DEMBUC = (year([F:CBD]REQDAT)*1000)+(WBUCTYP([F:CBD]BUC)*100)+week([F:CBD]REQDAT)
    When 3:      [F:CBD]DEMBUC = (year([F:CBD]REQDAT)*1000)+(WBUCTYP([F:CBD]BUC)*100)+month([F:CBD]REQDAT)
Endcase
[F:CBD1]CREUSR     = GUSER
[F:CBD1]CREDAT     = date$
[F:CBD1]CREDATTIM  = datetime$    # 108577
[F:CBD1]UPDUSR     = GUSER
#[F:CBD1]UPDDAT    = date$
[F:CBD1]UPDDATTIM  = datetime$    # 108577
[F:CBD1]EXPNUM     = [C]EXPORT

# Issue 96866 GA 03/2014
# Point d'entrée pour modification de la date de suggestion ou autre contrôles
GPE=0 : GPOINT = "BEFWRICBD1" : Gosub ENTREE From EXEFNC
If !GPE
  Call ECR_DEBUG("CRE_BESDIV Write CBD1 Itm="+[F:CBD1]ITMREF-"WipTyp="+num$([F:CBD1]WIPTYP)
&                            -num$([F:CBD1]REQDAT)-num$([F:CBD1]STRDAT)-num$([F:CBD1]ENDDAT)-[F:CBD1]SUGNUM)
  Write [CBD1]
  If fstat
    GOK = 0
    Call FSTA("CBD") From GLOCK
  Endif
Endif
Return
############################################################
#Calcul du tableau des besoins par bucket
$CAL_BES_COUVERTURE
Local Decimal WDAYCOV
Local Decimal WCOUV(WNBBUC)

# Issue 178500 - 2020-03-02 by STLIG : copy starting stock (WSTO)
Local Decimal WSTOCOUV : WSTOCOUV = WSTO

Raz WQTY, WCOUV
#Calcul des besoins jour par jour dans WQTY
# FQ 43416 GA 22/10/2007 performances CBD0 => CBD3
# Issue 107498/13 - select data for each project, when WPJTFLAG is set
If WPJTFLAG
    Filter [CBD] Where ITMREF = [F:CBH]ITMREF &
&                      STOFCY = [F:CBH]STOFCY &
&                      PJT    = WPJT
&                Order By Key CBD3
Else
    Filter [CBD] Where ITMREF = [F:CBH]ITMREF &
&                      STOFCY = [F:CBH]STOFCY
&                Order By Key CBD3
Endif
For [CBD]CBD3 Hint Key CBD3
  If [F:CBD]REQDAT < WCALDATD
    J = 0
  Else
    J = [F:CBD]REQDAT-WCALDATD
  Endif
  If find([F:CBD]WIPTYP,WTYPDEM)

    # Issue 178500 - 2020-03-02 by STLIG : reduce demand by starting stock
    If (WRECOVST=2 & WSTOCOUV > 0)
      If (WSTOCOUV >= [F:CBD]REQQTY)
        WSTOCOUV -= [F:CBD]REQQTY
        [F:CBD]REQQTY = 0
      Else
        WSTOCOUV = 0
        [F:CBD]REQQTY -= WSTOCOUV
      Endif
    Endif

    WQTY(J) += [F:CBD]REQQTY

  Else
      # 09.04 25018 Pas de prise en compte des ressources en couverture si replanification
      If ([F:CBH]PLNANYCOD = 1 | !find(WRPLMOD(func CBNLIB.MAPRPL([F:CBD]WIPTYP, [F:CBD]WIPSTA)),2,3))
          If WCOVRES <> 1
              WQTY(J) -= [F:CBD]REQQTY
          Endif
      Endif
  Endif
Next
Filter [CBD]
############################################################
# Point d'entrée pour calcul spécial de la couverture
# Classes disponibles en entrée
# [CBH] Entête fichier de travail chargé
# [ITF] Article site chargé
# Variables disponibles en entrée
# WNBBUC                   Nombre de buckets
# WNBJOU                   Nombre de jours de traitements (Date fin - date debut +1)
# WBUCDEB(0..WNBBUC-1)     Tableau des dates début de bucket
# WBUCFIN(0..WNBBUC-1)     Tableau des dates fin   de bucket
# WQTY(0..WNBJOU-1)        Tableau des besoins jours par jours
# I                        Indicateur = 0
# Variables à  retourner
# WCOUV(0..WNBBUC-1)       Tableau des couvertures par bucket
# I  = 0                   Si le calcul standard doit être effectué
# I <> 0                   Si le tableau des couvertures a été chargé par le point d'entrée
#
I = 0
GPOINT = "CALCOUV"
Gosub ENTREE From EXEFNC
If I <> 0
  Return
Endif
############################################################
# Calcul de la couverture pour chaque bucket
# Calcul proportionnel pour les bucket fin (couverture en dehors de la periode de calcul)
#
# Selon paramètre correction couverture par courbe de saisonnalité
For I = 0 To WNBBUC-1
  WDAT    = WBUCDEB(I)
  WDAYCOV = [F:CBH]DAYCOV
  If WDYNCOV = 2 & [F:ITF]SESCOD <> ""
    Gosub COR_DAYCOV
  Endif
#
# J = Premier jour pour calcul couverture
# Q = Durée couverture en jours
# K = Dernier jour couverture
# S = Durée bucket en jours
#
  S = (WBUCFIN(I)-WBUCDEB(I)) + 1
  J = (WDAT-WCALDATD)
  Q = (WDAYCOV*7)
# Plafonnement durée bucket si couverture < bucket
  If Q < S
    Q = S
  Endif
  K = (J + Q) - 1
# Proratisation dernière couverture
  R = 0
  If K > WNBJOU-1
    K = WNBJOU-1
    R = K - J
  Endif

  # Issue 114169 LLC 05/2016
  # L = Dernier jour couverture sur le bucket # Issue 84385 GA 10/2012

  # Issue 122220 - 2017-05-25 by STLIG : Switch (parameter) coverage mode:
  #                                      Reduce stock (Yes=2), maintain stock (No<2)..
  If (WRECOVST=2)
    L=min(K,J+S-1)
    If sum(WQTY(0..L))<=sum(WCOUV(0..I)) Goto NEXT_BUCKET Endif
  Endif

  If J < WNBJOU
    WCOUV(I) = sum(WQTY(J..K))

    # Issue 114169 LLC 05/2016
    # If R > 0
    #   WCOUV(I) *= (Q+1)/(R+1)
    # Endif

  Endif
$NEXT_BUCKET
Next I
Return
############################################################
# Correction couverture courbe de saisonnalité
$COR_DAYCOV
WDAYCOV = [F:CBH]DAYCOV
If [F:ITF]SESCOD <> [F:SES]SESCOD
  Read [SES]SES0= [F:ITF]SESCOD
  If fstat
    Return
  Endif
Endif
If [F:SES]SESNBR <> 0
  WBAST = 0
  For N= 0 To [F:SES]SESNBR-1
    # FQ 64224 GA 04/2010 Formule revérifiée: ajout +1 pour que le nb de jours de la période soit juste
    WBAST += ([F:SES]ENDDAT(N)-[F:SES]STRDAT(N)+1)*[F:SES]SESAMT(N)
  Next N
  WBAST = WBAST/[F:SES]SESNBR
  If WBAST <> 0
    For N = 0 To [F:SES]SESNBR-1
      If WDAT >= gdat$(day([F:SES]STRDAT(N)),month([F:SES]STRDAT(N)),year(WDAT))&
&        WDAT <= gdat$(day([F:SES]ENDDAT(N)),month([F:SES]ENDDAT(N)),year(WDAT))
        # FQ 64224 GA 04/2010 Formule revérifiée: ajout +1 pour que le nb de jours de la période soit juste
        WBASL   = ([F:SES]ENDDAT(N)-[F:SES]STRDAT(N)+1)*[F:SES]SESAMT(N)
        WDAYCOV = ([F:CBH]DAYCOV*WBASL)/WBAST
        Break
      Endif
    Next N
  Else
    WDAYCOV = 0
  Endif
Endif
Return
############################################################
# Correction stock sécurité courbe de saisonnalité
# FQ 64224 GA 07/2010 poids de la période en mois au lieu de jours
$COR_STOSEC
Local Integer WNBMONTH    : WNBMONTH=0    # FQ 64224 GA 07/2010
Local Integer WNBMONTHTOT : WNBMONTHTOT=0 # FQ 64224 GA 07/2010

#---------
# point d'entrée pour saisonnalité spécifique 05.06 35734
GPOINT = "COR_STOSEC" : Gosub ENTREE From EXEFNC
If GPE : Return : Endif

WSAISON = [F:ITF]SAFSTO
If [F:ITF]SESCOD <> [F:SES]SESCOD
  Read [SES]SES0= [F:ITF]SESCOD
  If fstat
    Return
  Endif
Endif
If [F:SES]SESNBR <> 0
  WBAST = 0
  For N = 0 To [F:SES]SESNBR-1
    WBAST+=[F:SES]SESAMT(N)
    WNBMONTHTOT+=month([F:SES]ENDDAT(N))-month([F:SES]STRDAT(N))+1
  Next N
  #WBAST = WBAST/[F:SES]SESNBR
  WBAST = WBAST/WNBMONTHTOT
  If WBAST <> 0    # 54687
      For N = 0 To [F:SES]SESNBR-1
        If WDAT >= gdat$(day([F:SES]STRDAT(N)),month([F:SES]STRDAT(N)),year(WDAT))&
&          WDAT <= gdat$(day([F:SES]ENDDAT(N)),month([F:SES]ENDDAT(N)),year(WDAT))
          WNBMONTH=month([F:SES]ENDDAT(N))-month([F:SES]STRDAT(N))+1
          If WNBMONTH>0 WBASL=[F:SES]SESAMT(N)/WNBMONTH Else WBASL = 0 Endif
          WSAISON = ([F:ITF]SAFSTO*WBASL)/WBAST
          Break
        Endif
      Next N
  Else
      WSAISON = 0
  Endif
Endif
Return
############################################################
# Correction stock sécurité courbe de saisonnalité
$OLD_COR_STOSEC
#---------
# point d'entrée pour saisonnalité spécifique 05.06 35734
GPOINT = "COR_STOSEC" : Gosub ENTREE From EXEFNC
If GPE : Return : Endif

WSAISON = [F:ITF]SAFSTO
If [F:ITF]SESCOD <> [F:SES]SESCOD
  Read [SES]SES0= [F:ITF]SESCOD
  If fstat
    Return
  Endif
Endif
If [F:SES]SESNBR <> 0
  WBAST = 0
  For N = 0 To [F:SES]SESNBR-1
    # FQ 64224 GA 04/2010 Formule revérifiée: ajout +1 pour que le nb de jours de la période soit juste
    WBAST += ([F:SES]ENDDAT(N)-[F:SES]STRDAT(N)+1)*[F:SES]SESAMT(N)
  Next N
  WBAST = WBAST/[F:SES]SESNBR
  If WBAST <> 0
      For N = 0 To [F:SES]SESNBR-1
        If WDAT >= gdat$(day([F:SES]STRDAT(N)),month([F:SES]STRDAT(N)),year(WDAT))&
&          WDAT <= gdat$(day([F:SES]ENDDAT(N)),month([F:SES]ENDDAT(N)),year(WDAT))
          # FQ 64224 GA 04/2010 Formule revérifiée: ajout +1 pour que le nb de jours de la période soit juste
          WBASL   = ([F:SES]ENDDAT(N)-[F:SES]STRDAT(N)+1)*[F:SES]SESAMT(N)
          WSAISON = ([F:ITF]SAFSTO*WBASL)/WBAST
          Break
        Endif
      Next N
  Else
      WSAISON = 0
  Endif
Endif
Return
############################################################
# Création suggestions
$CRE_SUG
NOQUALTI = 0

# Entry point for customizing the splitting of suggestions
GPE = 0
GPOINT = "CRE_SUG_SPLIT"
Gosub ENTREE From EXEFNC
If GPE : Return : Endif

While WNBR > 0
  Gosub CRE_UNE_SUG
  If GOK = 1
    WNBR -= 1
    If [F:CBH]SPLCOD <> 2
      WDATS = [F:CBD1]STRDAT
      If [F:CBH]SPLCOD = 3 : NOQUALTI = 1 : Endif        # 11.05 32942
    Endif
  Else
    Break
  Endif
Wend
#Reliquat
If WSUGR <> 0 & GOK = 1
  WSUG = WSUGR
  Gosub CRE_UNE_SUG
Endif
Return

############################################################
# Création une suggestion
$CRE_UNE_SUG
Raz [F:CBD1]
[F:CBD1] = [F:CBH]
# FQ 62465 GA 02/2010 positionner [F:ITM] [F:ITF]
If [F:ITM]ITMREF<>[F:CBD1]ITMREF
   Read [F:ITM]ITM0=[F:CBD1]ITMREF
Endif
If [F:ITF]ITMREF<>[F:CBD1]ITMREF | [F:ITF]STOFCY<>[F:CBD1]STOFCY
   Read [F:ITF]ITF0=[F:CBD1]ITMREF;[F:CBD1]STOFCY
Endif
WREOCOD = [F:ITF]REOCOD

# Issue 108013 - 2015-06-30 by GA : ECC for MRP - [F:CBD1]BOMALTTYP necessary
# choix type de suggestion

#CATUA X3-38274.sn Set values for BOMALT for consistency
#Suggestion Type 2 (Purchase)
#Suggestion Type 3 (Manufacturing)
#Suggestion Type 4 (Intersite)
#Suggestion Type 5 (Subcontracting)

Case WREOCOD
    When 2: [F:CBD1]WIPTYP = 2  : [F:CBD1]BOMALTTYP=0 : [F:CBD1]BOMALT=0
    When 3: [F:CBD1]WIPTYP = 5  : [F:CBD1]BOMALTTYP=2 : [F:CBD1]BOMALT=WBOMALT
    When 4: [F:CBD1]WIPTYP = 7  : [F:CBD1]BOMALTTYP=0 : [F:CBD1]BOMALT=0
    When 5: [F:CBD1]WIPTYP = 13 : [F:CBD1]BOMALTTYP=3 : [F:CBD1]BOMALT=WBOMALT
    When Default :
        # GOK = 0  # Issue 86246 & 85397 GA 12/2012 ne pas sortir en erreur si aucun réappro
        Goto CRE_UNE_SUG_FIN
Endcase
#Numéro suggestion
Call NUMERO(GSUG,WFCY,WCALDATD,"",[F:CBD1]WIPNUM,WRET) From SUBANM
If WRET <> 0
  Call ECR_TRACE(mess(66,187,1),1) From GESECRAN
  GOK = 0
  Goto CRE_UNE_SUG_FIN
Endif
[F:CBD1]WIPSTA    = 3
[F:CBD1]SUGTYP    = [F:CBD1]WIPTYP
[F:CBD1]SUGSTA    = [F:CBD1]WIPSTA
[F:CBD1]SUGNUM    = [F:CBD1]WIPNUM
#CATUA X3-38274.n
Case [F:CBD1]WIPTYP
  When 1:  [F:CBD1]VCRTYP = 2    #SO
  When 2:  [F:CBD1]VCRTYP = 14   #PO
  When 5:  [F:CBD1]VCRTYP = 10   #WO
  When 13: [F:CBD1]VCRTYP = 36   #Subcontract
  When Default : [F:CBD1]VCRTYP = [F:CBD1]WIPTYP
Endcase
[F:CBD1]VCRNUM    = [F:CBD1]WIPNUM
If WTYPO = 0 & WSTAO  = 0 & WNUMO = ""
  [F:CBD1]WIPTYPORI = [F:CBD1]WIPTYP
  [F:CBD1]WIPSTAORI = [F:CBD1]WIPSTA
  [F:CBD1]WIPNUMORI = [F:CBD1]WIPNUM
Else
  [F:CBD1]WIPTYPORI = WTYPO
  [F:CBD1]WIPSTAORI = WSTAO
  [F:CBD1]WIPNUMORI = WNUMO
  [F:CBD1]WIPLINORI = WLINO
  [F:CBD1]WIPSEQORI = WSEQO
  [F:CBD1]ITMREFORI = WITMO                # 03.05 29395
Endif
[F:CBD1]PJT         = WPJTO
[F:CBD1]BPRNUM      = WBPRO
[F:CBD1]TRCFLG      = WTRCFLG
# Issue 108013 - 2015-06-30 by GA : ECC for MRP
If WECCFLG
   [F:CBD1]ECCVALMAJ = WECCVALMAJO
   [F:CBD1]ECCVALMIN = WECCVALMINO
Endif
# FQ 78619 GA 01/2012
Call QTEARR(WSUG,[F:ITM]STU) From TRTDIV
[F:CBD1]EXTQTY    = WSUG
[F:CBD1]RMNEXTQTY = WSUG
[F:CBD1]REQQTY    = WSUG

# Calcul dates début fin et besoin
Gosub CAL_SUGLTI
#
# 11.05 32942
If NOQUALTI : WQUALTI = 0 : Endif

WCOE    = [F:ITF]MIC
If [F:ITF]REOMINQTY <> 0
  WLOT  = [F:ITF]REOMINQTY
Else
  WLOT  = [F:ITF]MFGLOTQTY
Endif
# Point d'entrée pour modification de la date de suggestion
GPOINT = "CRESUG"
Gosub ENTREE From EXEFNC
WDATR   = WDATS
Gosub CALDATSUG

# Issue 171710 - 2020-03-30 by ADSHO : Re-reading the current product after scheduling to ensure the correct versioning flag is being used
If ([F:ITM]ITMREF <> [F:CBH]ITMREF)
  Read [ITM]ITM0 = [F:CBH]ITMREF
Endif

[F:CBD1]STRDAT    = WDATD
[F:CBD1]ENDDAT    = WDATF
[F:CBD1]REQDAT = WDATF
If WRPL = 11
    If [F:CBH]PLHENDDAT > WCALDATD
        [F:CBD1]REQDAT = WDATR
    Endif
Endif
If WRPL = 12
    [F:CBD1]REQDAT = WDATR
    WRPL = 11
Endif
# Issue 108013 - 2015-06-30 by GA : ECC for MRP
If WECCFLG
   If WECCVALMAJO="" & [F:ITM]ECCFLG>1
     Local Integer WECCALT : WECCALT=0
     Call INIECCBOM([F:CBD1]ITMREF, [F:CBD1]STOFCY, WDATD, [F:CBD1]BOMALTTYP, [F:CBD1]ECCVALMAJ,[F:CBD1]ECCVALMIN,WECCALT) From MFGECCLIB
     If WECCALT<>0
        [F:CBD1]BOMALT=WECCALT
     Endif
  Else
     [F:CBD1]ECCVALMAJ = WECCVALMAJO
     [F:CBD1]ECCVALMIN = WECCVALMINO
     #[F:CBD1]BOMALT    = WBOMALT #CATUA X3-38274.o
     If [F:CBD1]BOMALTTYP <> 0 : [F:CBD1]BOMALT = WBOMALT : Endif #CATUA X3-38274.n
   Endif
Call ECR_DEBUG("CRE_UNE_SUG CBD1 with ECC Itm="+[F:CBD1]ITMREF-"WipTyp="+num$([F:CBD1]WIPTYP)-num$(WSUG)
&                            -num$([F:CBD1]REQDAT)-num$([F:CBD1]STRDAT)-num$([F:CBD1]ENDDAT)-[F:CBD1]SUGNUM
&                            -"ECCVAL="+[F:CBD1]ECCVALMAJ-[F:CBD1]ECCVALMIN-num$([F:CBD1]BOMALT))
Else
Call ECR_DEBUG("CRE_UNE_SUG Write CBD1 Itm="+[F:CBD1]ITMREF-"WipTyp="+num$([F:CBD1]WIPTYP)-num$(WSUG)
&                            -num$([F:CBD1]REQDAT)-num$([F:CBD1]STRDAT)-num$([F:CBD1]ENDDAT)-[F:CBD1]SUGNUM)
Endif

[F:CBD1]BUC       = WBUCR
[F:CBD1]MRPMES    = WRPL

If WSAFCOV = 2 & WDEMQTY > 0 & [F:CBH]REOQTYCOD = 1 : [F:CBD1]COVQTY = WDEMQTY : Endif

[F:CBD1]CREUSR    = GUSER
[F:CBD1]CREDAT    = date$
[F:CBD1]CREDATTIM = datetime$    # 108577
[F:CBD1]UPDUSR    = GUSER
#[F:CBD1]UPDDAT    = date$
[F:CBD1]UPDDATTIM = datetime$    # 108577
[F:CBD1]EXPNUM    = [C]EXPORT

# Issue 96866 GA 03/2014
# Point d'entrée pour modification de la date de suggestion ou autre contrôles
GPE=0 : GPOINT = "BEFWRICBD1" : Gosub ENTREE From EXEFNC
If !GPE
  Write [CBD1]
  If fstat
    GOK = 0
    Call FSTA("CBD") From GLOCK
  Endif
Endif
$CRE_UNE_SUG_FIN
Return

############################################################
# Calcul dates suggestions et traces
# WDATR   = date besoin (entrée et sortie)
# WSUG    = Quantité suggestion
# WREOCOD = Code type suggestions
# WMFGLTI = Délai fabrication
# WPURLTI = Délai achat
# WQUALTI = délai contrôle qualité
# WCOE    = Coefficient délai
# WLOT    = Lot économique
# WDATD   = Date début
# WDATF   = Date fin
# WBUCR   = Bucket besoin
# WRPL    = Code replanification
$CALDATSUG

WRPL = 1
# Correction jour ouvré précédent
WCOR = 8
WCOD = 1
WDEL = 0
Call CALDAT("-",WCOR,WDATR,WCOD,WDEL,WCAP,WCALDATD,WDATR) From CBNLIB
# Date antérieure date début traitement
If WDATR < WCALDATD
  WDATR = WCALDATD
  WRPL  = 11
Endif
# Correction date hors calcul
If WDATR > WCALDATF
  WDATR = WCALDATF
Endif
# Calcul numéro bucket
I = WDATR - WCALDATD
If I > WNBJOU - 1 : I = WNBJOU - 1 : Endif
If I <= 0
  WBUCR = 0
Else
  WBUCR = WBUCNUM(I)
Endif
# Calcul date fin et début
Case WREOCOD
  When 3:

    WDATF = WDATR

    If (WQUALTI > 0)
      WCOR = 8
      WCOD = 2
      WDEL = WQUALTI
      Call CALDAT("-",WCOR,WDATR,WCOD,WDEL,WCAP,WCALDATD,WDATF) From CBNLIB
    Endif

    # Issue 92555(159529) - 2018-05-30 by STLIG : Reduce requirement date by quality control lead time
    #                                     (see non-manufacturing suggestion type)
    WDATR = WDATF
    If (WDATR < WCALDATD)
      WDATR = WCALDATD
    Endif

    # point d'entrée pour modification date besoin suggestion (prise en compte délai prépa par exemple)
    GPOINT = "SUGREQAVA" : Gosub ENTREE From EXEFNC
    If WDATF < WCALDATD

      # Issue 58145 - 2017-11-30 by STLIG : Product lead times,
      #                                     End date determines start date (inc. production LT).
      #                                     If start date < today then re-calculate actual start and end dates.
      # WDATF = WCALDATD

       WRPL  = 11
    Endif
    # Issue 105987 GA 02/2015 wrong date when routing lead time with subcontract operation
    If ( WFABLTI=3 | (WFABLTI=2 & [F:ITF]MFGLTI=0))
&    & [F:ROH]ITMREF=[F:ITF]ITMREF & [F:ROH]ROUALT<>0

        Raz [M:JALK]
        [M:JALK]CODORI     = 2
        [M:JALK]CODMAJ     = 2
        [M:JALK]CODTRS     = 0
        [M:JALK]MFGFCY     = [F:ITF]STOFCY
        [M:JALK]ROUNUM     = [F:ROH]ITMREF
        [M:JALK]ROUALT     = [F:ROH]ROUALT
        [M:JALK]REOMINQTY  = WSUG
        [M:JALK]TRTDAT     = WCALDATD
        [M:JALK]STRDAT     = WDATF
        [M:JALK]ENDDAT     = WDATF
        [M:JALK]SCDMOD     = 1     # backward scheduling
        [M:JALK]JAVFLG     = 1     # Issue 110089 08/2015 by GA before 2 (reschedule forward if needed)
        If [F:PJA]MFGFCY <> [F:ITF]STOFCY
            Read [PJA]PJA0=[F:ITF]STOFCY
            If fstat : Raz [PJA] : Endif
        Endif
        Call JALONNE From JALLIB
        WDATD=[M:JALK]STRDAT
        WDATF=[M:JALK]ENDDAT

        # Correction jour ouvré précédent
        WCOR = 8
        WCOD = 1
        WDEL = 0
        Call CALDAT("-",WCOR,WDATD,WCOD,WDEL,WCAP,WCALDATD,WDATD) From CBNLIB

    Else

        WCOR = 8
        WCOD = 2
        WDEL = WMFGLTI
        Call CORDEL(WDEL,WSUG,WCOE,WLOT) From CBNLIB
        Call CALDAT("-",WCOR,WDATF,WCOD,WDEL,WCAP,WCALDATD,WDATD) From CBNLIB
    Endif

   If [F:CBH]PLHENDDAT > WCALDATD & WDATD <= [F:CBH]PLHENDDAT
      If WPLHDAT <> 2
         # ------------------------------------------------------------------------
         # Issue 99888 GA 08/2014 - Start
         # 1er jour ouvré à compter du jour suivant la fin d'horizon ferme
         # first business day after the day following the end of firm horizon
         # ------------------------------------------------------------------------
         # # 11.05 32731
         # Case GLATSUGDAT
         #     When 2:          WCOR = 8
         #                      WCOD = 2   # Correction jour ouvré suivant
         #                      WDEL = 1
         #                      Call CALDAT("+",WCOR,[F:CBH]PLHENDDAT,WCOD,WDEL,WCAP,WCALDATS,WDATD) From CBNLIB
         #                      WDATF = WDATD       # Issue 96296 GA 02/2014 before WDATR
         #     When Default:    WDATF = [F:CBH]PLHENDDAT+1
         #                      WDATD = [F:CBH]PLHENDDAT+1
         # Endcase
          WDATD = [F:CBH]PLHENDDAT
          WCOR = 8
          WCOD = 2   # Correction jour ouvré suivant
          WDEL = 1
          Call CALDAT("+",WCOR,WDATD,WCOD,WDEL,WCAP,WCALDATS,WDATD) From CBNLIB

          # Issue 105987 GA 02/2015 recalculate new end date
          WDATF = WDATD
          If ( WFABLTI=3 | (WFABLTI=2 & [F:ITF]MFGLTI=0))
&          & [F:ROH]ITMREF=[F:ITF]ITMREF & [F:ROH]ROUALT<>0
              Raz [M:JALK]
              [M:JALK]CODORI     = 2
              [M:JALK]CODMAJ     = 2
              [M:JALK]CODTRS     = 0
              [M:JALK]MFGFCY     = [F:ITF]STOFCY
              [M:JALK]ROUNUM     = [F:ROH]ITMREF
              [M:JALK]ROUALT     = [F:ROH]ROUALT
              [M:JALK]REOMINQTY  = WSUG
              [M:JALK]TRTDAT     = WDATD         # Suite Issue 105987 GA 03/2015 [F:CBH]PLHENDDAT+1
              [M:JALK]STRDAT     = WDATD
              [M:JALK]ENDDAT     = WDATD
              [M:JALK]SCDMOD     = 2     # forward scheduling
              [M:JALK]JAVFLG     = 2
              If [F:PJA]MFGFCY <> [F:ITF]STOFCY
                  Read [PJA]PJA0=[F:ITF]STOFCY
                  If fstat : Raz [PJA] : Endif
              Endif
              Call JALONNE From JALLIB
              WDATD=[M:JALK]STRDAT
              WDATF=[M:JALK]ENDDAT

          Else

            # Issue 107070 - 2018-10-24 by STLIG : Check parameter: LATSUGDAT before incorporating lead times
            If (GLATSUGDAT = 2)
              WCOR = 8
              WCOD = 2

              WDEL = WMFGLTI

              Call CORDEL(WDEL,WSUG,WCOE,WLOT) From CBNLIB
              Call CALDAT("+",WCOR,WDATD,WCOD,WDEL,WCAP,WCALDATD,WDATF) From CBNLIB

            Endif

          Endif
          WRPL = 11                 # 03.06 35905
      Endif
    Endif
    If WDATD < WCALDATD

      # Issue 107070 - 2018-10-24 by STLIG : Check parameter: LATSUGDAT before incorporating lead times
      WDATD = WCALDATD
      If (GLATSUGDAT = 1)
        WDATF = WDATR
      Else
        # Issue 58145/87111 - 2017-11-30 by STLIG : Product lead times,
        #                                     Calculate actual start and end dates.
        If (WFABLTI=1 | (WFABLTI=2 & [F:ITF]MFGLTI>0))
          WCOR = 8
          WCOD = 2
          WDEL = WMFGLTI
          Call CORDEL(WDEL,WSUG,WCOE,WLOT) From CBNLIB
          Call CALDAT("+",WCOR,WDATD,WCOD,WDEL,WCAP,WCALDATD,WDATF) From CBNLIB

        Endif
      Endif

      # Issue 58145 - 2017-11-30 by STLIG : Return from CALDATSUG .. maintain demand requirement date and set WRPL = 11.
      #                                     Note: WRPL 11 = delay.
      WRPL = 12
      # WRPL  = 11

    Endif

  When Default :
     # llc 03.01    prise en compte délai CQ pour suggestions achat
     If WQUALTI = 0
       WDATF = WDATR
     Else
       WCOR = 8
       WCOD = 2
       WDEL = WQUALTI
       Call CALDAT("-",WCOR,WDATR,WCOD,WDEL,WCAP,WCALDATD,WDATF) From CBNLIB
     Endif
     WDATR = WDATF
     # Correction date hors calcul
     If WDATR < WCALDATD
       WDATR = WCALDATD
     Endif
     # point d'entrée pour modification date besoin suggestion (prise en compte délai prépa par exemple) 07.04 23067
     GPOINT = "SUGREQAVA" : Gosub ENTREE From EXEFNC
     If WDATF < WCALDATD

       # Issue 58145 - 2017-11-30 by STLIG : End Date determines start date (inc. production LT).
       #                                     If start date < today then re-calculate actual start and end dates.
       # WDATF = WCALDATD

       WRPL  = 11
     Endif
     WCOR = 8
     WCOD = 1
     WDEL = WPURLTI
     Call CORDEL(WDEL,WSUG,WCOE,WLOT) From CBNLIB
     Call CALDAT("-",WCOR,WDATF,WCOD,WDEL,WCAP,WCALDATD,WDATD) From CBNLIB
     # 04.06 35905
     # Correction jour calendaire précédent
     WCOR = 8
     WCOD = 1
     WDEL = 0
     Call CALDAT("-",WCOR,WDATD,WCOD,WDEL,WCAP,WCALDATD,WDATD) From CBNLIB

     # date début achat autorisé dans l'horizon ferme
     If [F:CBH]PLHENDDAT > WCALDATD & WDATF <= [F:CBH]PLHENDDAT
         If WPLHDAT <> 2
             If GLATSUGDAT = 1
                 WDATF = [F:CBH]PLHENDDAT + 1
                 # recalcul date début
                 WCOR = 8
                 WCOD = 1
                 WDEL = WPURLTI
                 Call CORDEL(WDEL,WSUG,WCOE,WLOT) From CBNLIB
                 Call CALDAT("-",WCOR,WDATF,WCOD,WDEL,WCAP,WCALDATD,WDATD) From CBNLIB

                 # Correction jour calendaire précédent
                 WCOR = 8
                 WCOD = 1
                 WDEL = 0
                 Call CALDAT("-",WCOR,WDATD,WCOD,WDEL,WCAP,WCALDATD,WDATD) From CBNLIB
             Else
                 # Issue 61009 GH 03/04/18 - WDATD should be 1 (or more) day after firm horizon on a working day
                 # WDATD = [F:CBH]PLHENDDAT + 1
                 WDATD = [F:CBH]PLHENDDAT
                 WCOR = 8
                 WCOD = 2
                 WDEL = 1
                 Call CALDAT("+",WCOR,WDATD,WCOD,WDEL,WCAP,WCALDATS,WDATD) From CBNLIB

                 WCOR = 8
                 WCOD = 1
                 WDEL = WPURLTI
                 Call CORDEL(WDEL,WSUG,WCOE,WLOT) From CBNLIB
                 Call CALDAT("+",WCOR,WDATD,WCOD,WDEL,WCAP,WCALDATD,WDATF) From CBNLIB

                 # Correction jour calendaire suivant
                 WCOR = 8
                 WCOD = 1
                 WDEL = 0
                 Call CALDAT("+",WCOR,WDATF,WCOD,WDEL,WCAP,WCALDATD,WDATF) From CBNLIB
             Endif
             WRPL = 11
         Endif
     Else
         If WDATD < WCALDATD
             # 09.09 56864
             # affinement de la position de la suggestion (qui pilote la replanification)
             # on passe dans ce code si on est en retard, le réajustement ne tient pas compte du délai CQ,
             # mais seulement du délai d'achat.

             If GLATSUGDAT = 1
                 WDATF = WDATR
             Else
                 WDATD = WCALDATD

                 WCOR = 8
                 WCOD = 1
                 WDEL = WPURLTI
                 Call CORDEL(WDEL,WSUG,WCOE,WLOT) From CBNLIB
                 Call CALDAT("+",WCOR,WDATD,WCOD,WDEL,WCAP,WCALDATD,WDATF) From CBNLIB

                 # Correction jour calendaire suivant
                 WCOR = 8
                 WCOD = 1
                 WDEL = 0
                 Call CALDAT("+",WCOR,WDATF,WCOD,WDEL,WCAP,WCALDATD,WDATF) From CBNLIB

                 If [F:CBH]PLHENDDAT > WCALDATD
                     If (WDATF <= [F:CBH]PLHENDDAT & WPLHDAT <> 2) | (WDATF > [F:CBH]PLHENDDAT & GLATSUGDAT = 1)
                         WDATF = [F:CBH]PLHENDDAT + 1
                         # Correction jour calendaire suivant
                         WCOR = 8
                         WCOD = 1
                         WDEL = 0
                         Call CALDAT("+",WCOR,WDATF,WCOD,WDEL,WCAP,WCALDATD,WDATF) From CBNLIB
                    Endif
                 Endif
             Endif
             WRPL  = 12

      Endif

     Endif
Endcase
# Issue 96866 GA 04/2014 point d'entrée pour contrôle final date besoin suggestion
GPOINT = "CTLDATSUG" : Gosub ENTREE From EXEFNC
Return

############################################################
Subprog CAL_PHASE(LPHA,LTAB,LDDEB,LHDEB,LDFIN,LHFIN,LFCY)
Value    Integer LPHA
Variable Integer LTAB()
Variable Date    LDDEB
Variable Integer LHDEB
Variable Date    LDFIN
Variable Integer LHFIN   # FGR 18/01/2010 : X3SUIVI60986 pas LFFIN
Variable Char    LFCY

Local    Integer WHDEB
Local    Integer WHFIN
If LDFIN >= LDDEB
  WHDEB       = LHDEB
  WHFIN       = LHFIN
  WHFIN      += ((LDFIN-LDDEB)*86400)
  LTAB(LPHA) += (WHFIN-WHDEB)
Endif
Call ECR_TRACE(LFCY-mess(544,200,1)-num$(LPHA),0) From GESECRAN
If GDSYFLG = 2
  Call TEMPON(LFCY-mess(544,200,1)-num$(LPHA)) # FQ 45504 GA 03/2008 avant: From GESECRAN
Endif
End
############################################################
$AFF_STAT
Call ECR_TRACE(mess(29,187,1),0) From GESECRAN
For I = 0 To dim(ZPHA)-1
  WTXT = mess(I+1,744,1)
  If WTXT <> ""
    Call FORTXT(WTXT,30,".") From CBNLIB
    J = mod(ZPHA(I),60)
    K = ZPHA(I)/60
    WMSG = WTXT+" : "+num$(K)-mess(2,301,1)-num$(J)
    Call ECR_TRACE(WMSG,0) From GESECRAN
  Endif
Next I
Return
############################################################
$ERRBATCH
Call ECR_TRACE(errmes$(errn)-num$(errl)-errm,1) From GESECRAN
End

############################################################
Subprog CAL_QTY_SHR(LSENS,LQTY,LSHR,LSTU) # Issue 89551 GA 07/2013
Value    Char    LSENS
Variable Decimal LQTY
Value    Decimal LSHR
Value    Char    LSTU

Case LSENS
  When "+"
  #LQTY = arr(LQTY * ((100+LSHR)/100),10^-[F:CBH]STUDEC) ne pas arrondir directement
   LQTY = LQTY * ((100+LSHR)/100)
   Call QTEARR2(LQTY,LSTU,2) From TRTDIV # arrondi supérieur vu qu'il s'agit de perte
  When "-"
  # Issue 94878 GA 02/2014 2eme formule
  #LQTY = arr((LQTY*100)/(100+LSHR),10^-[F:CBH]STUDEC)
   LQTY = LQTY * 100 / ((100+LSHR))
   Call QTEARR2(LQTY,LSTU,1) From TRTDIV # arrondi inférieur vu qu'il s'agit de perte
Endcase

End


############################################################
Subprog TEMPON(LMSG)
Value Char    LMSG()

# FQ 45504 l'affichage de la fenetre clignote en V5
# Call TEMPON(LMSG) From GESECRAN

# Ouverture de la fenêtre au 1er passage
If clalev([M:VLC])<=0 # | GTEMPON <> 1
 # Calcul en cours ...
 # col1=Phases calcul besoins
 # col2=""
   Call OUVRE_VLC(mess(105,100,1),mess(544,200,1),"") From GESECRAN
   GTEMPON=1
Endif

Call AFF_VLC(LMSG,"") From GESECRAN
End

############################################################
Subprog TEMPOFF

# FQ 45504 l'affichage de la fenetre clignote en V5
# Call TEMPOFF From GESECRAN
Call FERME_VLC From GESECRAN

End

########################################################################
Subprog ECR_DEBUG(LMESS)                                  # GA 11/2010 #
Value Char LMESS
If LMESS<>"" & (find(GUSER,"xADMINxxx","xGAx","xCCC") | GSTOTRACE>3 & GTRACE<>"")
   Call ECR_TRACE(LMESS,0) From GESECRAN
Endif
End

# Issue 107498/19 - Gosub $BALANCE moved from FUNCBNA
#--------------------------------------------------------------------------
# Recalcul suggestions après replanification
# (seules les suggestions non traitées par la replanification)
$BALANCE
# suppression des suggestions
# Issue 80128 ajout EOS
Delete [CBD] Where STOFCY  = [F:CBH]STOFCY    &
&                  ITMREF  = [F:CBH]ITMREF    &
&                  WIPSTA  = 3                &
&                  find(WIPTYP,2,5,7,13)      &
&                  RPLFLG  <> 2               &
&                  COVQTY = 0

# Issue 120673 - 2017-01-18 by STLIG : Determine the starting stock for all versions ...
If [F:ITM]ITMREF<>[F:CBH]ITMREF
   Read [F:ITM]ITM0=[F:CBH]ITMREF
Endif
If (WECCFLG & [F:ITM]ECCFLG>1)
  Gosub STARTING_STOCK_ECC

  # Issue 49364 - 2017-10-13 by STLIG : If STARTSTOCKECC EP failure ..
  If (GOK<>1) : Return : Endif

Endif

WSTO    = [F:CBH]STRSTO
WSTOSHR = [F:CBH]STRSTO
WBESBUC = 0

# Issue 38342 - 2017-09-26 by STLIG : Demand accumulation (for expired stock calculation)
WCUMDEM = 0

# Issue 121128 - 2019-01-16 by STLIG : reset cumulative demand by version between products ..
If (WECCFLG)
  Raz WECCCUMDEM
Endif

WBESIND = 0
WBESDEL = 0
WBUC    = 0
WDATB   = [0/0/0]
WRESSQTY = 0
WMODCAL = 2

# Issue 114401 - 2016-02-17 by CCC : This part of process is identical to what is done in FUNCBN.$TRT_SUGITM
#                                   => creation of common process FUNCBN.$FILL_BUCKETS
 ## Traitement fichier détail avec rupture par bucket sans couverture
 #If [F:CBH]DAYCOV = 0
 #  Filter [CBD] Where ITMREF = [F:CBH]ITMREF &
 #&                    STOFCY = [F:CBH]STOFCY
 #&              Order By Key CBD3
 #  For [CBD]CBD3 Hint Key CBD3
 #    If WBUC <> [F:CBD]BUC
 #      Gosub RUP_BUCKET From FUNCBN
 #    Endif
 #    Gosub CUM_STODIS From FUNCBN
 #    WBUC = [F:CBD]BUC
 #  Next
 #  Gosub RUP_BUCKET From FUNCBN
 ## Traitement fichier détail avec rupture par bucket avec couverture
 #Else
 #  Gosub CAL_BES_COUVERTURE From FUNCBN
 #  Filter [CBD] Where ITMREF = [F:CBH]ITMREF &
 #&                    STOFCY = [F:CBH]STOFCY
 #&              Order By Key CBD3
 #  Read [CBD]CBD3 First
 #$TRT_SUGRPL1
 #  If fstat = 0
 #    If WBUC = [F:CBD]BUC
 #      Gosub CUM_STODIS From FUNCBN
 #      Read [CBD] Next
 #      Goto TRT_SUGRPL1
 #    Else
 #      Gosub RUP_BUCKET From FUNCBN
 #      WBUC += 1
 #      Goto TRT_SUGRPL1
 #    Endif
 #  Endif
 #  While WBUC < WNBBUC
 #    Gosub RUP_BUCKET From FUNCBN
 #    WBUC += 1
 #  Wend
 #Endif
 ##
 #Filter [CBD]

# Issue 107498/19 - create suggestions per project
If (WPJTFLAG)

# Issue 107866 - 2019-05-13 by STLIG : 'process starting stock by project ..'
# done - see $TRT_SUGITM/PROJECT_STARTING_STOCK
# reset remaining starting stock ..
  If (WECCFLG & [F:ITM]ECCFLG > 1)
    For POS = 0 To WECCNBR -1
      If (WECCVALMAJ(POS) = "")
        Break
      Endif
      WECCSTODIS(POS) = WSECCSTODIS(POS)
    Next
  Else
    WSTO = WSSTO
  Endif
#    # Issue 97980 - 2018-08-21 by STLIG : Apportion available stock (starting stock)..
#    Gosub APPORTION_STARTING_STOCK

    # Issue 76634 - 2018-03-07 by STLIG :
    # 1. Process pjt =  blank (if 'available stock' then include material requirements see FILL_BUCKETS)
    # with starting stock..
    WPJT = ""
    Gosub FILL_BUCKETS

    # 2. Process pjt <> blank
    # with starting stock = 0..
    If GPRO = 1
        WREQ ="SELECT distinct PJT_0 From PDPDET"
    Else
        WREQ ="SELECT distinct PJT_0 From CBNDET"
    Endif
    WREQ -= "where STOFCY_0 = '"+[F:CBH]STOFCY+"'"
    WREQ -= "  and ITMREF_0 = '"+[F:CBH]ITMREF+"'"
    WREQ -= "  and PJT_0 <> ' '"                    # 76634 : pjt <> blank
    WREQ -= "order by PJT_0"

    For (Char VPJT(40)) From num$(GTYPDBA*2+1) Sql WREQ As [REQ_]
        WBUC    = 0
        WPJT = [REQ_]VPJT
        # Issue 82661 - 2018-03-19 by STLIG : Start process next demand with
        #                                     cumulative stock = safety stock
        #                                     rather than simply 0..
        WSTO = WSTOSEC
        If (WECCFLG & [F:ITM]ECCFLG>1)
          For I=0 To WECCNBR-1
            WECCSTODIS(I) = WECCSTOSEC(I)
          Next
        Endif

        #WSTO = 0
        WSTOSHR = 0

        Gosub FILL_BUCKETS
    Next
Else
    Gosub FILL_BUCKETS
Endif
# End issue 107498/19

Return

# Issue 120673 - 2017-01-18 by STLIG : Subroutine to determine the starting stock for all versions ...
$STARTING_STOCK_ECC

Local Integer I : I=0
If !(clalev([F:EVL])) : Local File ECCVAL [EVL] : Endif
If !(clalev([F:ECS])) : Local File ECCSTA [ECS] : Endif

# Issue 83325 - 2018-04-24 by STLIG : reset wecc.. arrays at start of product
Raz WECCVALMAJ, WECCVALMIN, WECCSTODIS

# Issue 153252 - 2020-01-17 by STLIG : join ECCVAL and ECCSTA to test status..
Link [EVL] With [ECS]ECS0=[F:EVL]ITMREF;[F:EVL]ECCVALMAJ As [LNKY]
&          Where [EVL]ITMREF=[F:CBH]ITMREF and [EVL]ECCTYP=4 and [ECS]ECCSTA=2
For [LNKY]

  # Issue 118553 - 2018-12-11 by STLIG : process A, R and Q available stock by version
  Gosub STOECCVAL
  # Issue X3-72964 - 2018-02-19 by YARAM : record the version number regardless of starting stock to avoid blank spaces
  WECCVALMAJ(I)=[F:EVL]ECCVALMAJ
  WECCVALMIN(I)=[F:EVL]ECCVALMIN

  I+=1

  If (I=WECCNBR)
    Break
  Endif
Next

# Issue 120508 - 2017-03-02 by STLIG : Determine the Detailed allocations and reduce the starting stock
#                                      by version.
Local Decimal ALLOCATION
Local Char    CURR_MAJ(GLONICVVAL)
Local Char    CURR_MIN(GLONICVVAL)
If !(clalev([F:STO])) : Local File STOCK  [STO] : Endif
If !(clalev([F:STL])) : Local File STOLOT [STL] : Endif

Link [STO] With [STL]STL0=[F:STO]ITMREF;[F:STO]LOT;[F:STO]SLO As [LNK]
&          Where [F:STO]STOFCY=[F:CBH]STOFCY and [F:STO]ITMREF=[F:CBH]ITMREF
For I=0 To WECCNBR-1
  If (WECCVALMAJ(I)="")
    Break
  Endif
  ALLOCATION=0
  For [LNK] Where [F:STL]ECCVALMAJ=WECCVALMAJ(I) and [F:STL]ECCVALMIN=WECCVALMIN(I)

    # Issue 118553 - 2018-12-11 by STLIG : quality control stock allocations processed in STOECCVAL / CTL_STO_ECC
    # Issue 214774 - 2020-10-01 by STLIG : stock status - check for Q*
    If (!(WCTLSTO = 3 & left$([F:STO]STA,1) = "Q"))
      ALLOCATION += [F:STO]CUMALLQTY
    Endif

  Next
  If (ALLOCATION>0)
    WECCSTODIS(I)-=ALLOCATION
  Endif
Next

# Issue 49364 - 2017-10-13 by STLIG : New EP, reorganise starting stock ..
GPOINT="STARTSTOCKECC" : Gosub ENTREE From EXEFNC

Return

# Issue 83325 - 2018-04-04 by STLIG : generate separate suggestion for safety stock
$CRE_SUG_STOSEC

  # safety stock requirement = abs(WDIS)
  WBES = abs(WDIS)

  # apply shrinkage % to suggestion quantity
  If ([F:CBH]REOCOD = 3 & [F:CBH]SHR > 0)
    Call CAL_QTY_SHR("+",WBES,[F:CBH]SHR,[F:CBH]STU)
  Endif

  # (re)calculate suggestion quantity
  Call QTESUG(WBES,WSUG,WNBR,WSUGR,WRET,WTOS) From CBNLIB

  # populate version number suggestion properties
  If (WECCFLG  & [F:ITM]ECCFLG>1)
    WECCVALMAJO = WECCVALMAJ(IECC)
    WECCVALMINO = WECCVALMIN(IECC)
  Endif

  # populate other suggestion properties
  WDATS = WDATB
  WTYPO = 0
  WSTAO = 0
  WNUMO = ""
  WLINO = 0
  WSEQO = 0
  WITMO = ""
  WPJTO = ""
  WBPRO = ""
  WTRCFLG = 1

  WWTOS = WTOS

  # (re)apply shrinkage % to suggestion quantity if necessary
  If ([F:CBH]REOCOD = 3 & [F:CBH]SHR > 0)
    If (WBES <> WWTOS)
      Call CAL_QTY_SHR("-",WWTOS,[F:CBH]SHR,[F:CBH]STU)
    Endif
  Endif

  # if PJM stock for project field unticked (no) then
  # ignore any excess available stock generated (by safety stock demand) for project demand
  If ([F:ITF]PJMSTRSTK < 2)
    If (WWTOS > WBES)
      WWTOS = WBES
    Endif
  Endif

  WDIS += WWTOS
  WSTO += WWTOS

  # generate suggestion
  Gosub CRE_SUG

Return

# Issue 118553 - 2018-12-11 by STLIG : process A, R and Q available stock by version
# Issue 163380 - 2019-12-05 by STLIG : ignore loan stock ..
$STOECCVAL
Local Char CRITERE(200)

WECCSTODIS(I) = 0

If ([F:EVL]ECCVALMAJ = "")
  If ([F:CBH]STOFCY <> [F:ITV]STOFCY | [F:CBH]ITMREF <> [F:ITV]ITMREF)
    Read [ITV]ITV0=[F:CBH]ITMREF;[F:CBH]STOFCY
    If (fstat)
      Return
    Endif
  Endif
  WECCSTODIS(I) = [F:ITV]PHYSTO + [F:ITV]CTLSTO + [F:ITV]REJSTO
&               + [F:ITV]PLFPHYSTO + [F:ITV]PLFCTLSTO + [F:ITV]PLFREJSTO
&               + [F:ITV]BPRPHYSTO + [F:ITV]BPRCTLSTO + [F:ITV]BPRREJSTO
&               + [F:ITV]SCOPHYSTO + [F:ITV]SCOCTLSTO + [F:ITV]SCOREJSTO
Else
  If (clalev([F:STL]) = 0) : Local File STOLOT [STL] : Endif
  If (clalev([F:STO]) = 0) : Local File STOCK [STO] : Endif # 163380

  CRITERE = '[F:STO]ITMREF=[F:CBH]ITMREF&[F:STO]STOFCY=[F:CBH]STOFCY&[F:STL]ECCVALMAJ=[F:EVL]ECCVALMAJ' #163380
  If ([F:EVL]ECCVALMIN <> "")
    CRITERE += '&[F:STL]ECCVALMIN=[F:EVL]ECCVALMIN'
  Endif
  CRITERE += '&[F:STO]LOCCAT<>3' #163380

  # Issue 163380 - 2019-12-05 by STLIG : use STOCK and STOLOT to determine available stock for version..
  Link [STO] With [STL]STL0~=[F:STO]ITMREF;[F:STO]LOT;[F:STO]SLO As [LNK]
&            Where evalue(CRITERE)
  For [LNK]

    # Issue 214774 - 2020-10-01 by STLIG : stock status - check for A*, R* and Q*
    If (left$([F:STO]STA,1) = "A" |
&      (left$([F:STO]STA,1) = "R" & WREJSTO = 2) |
&      (left$([F:STO]STA,1) = "Q" & WCTLSTO = 2))
      WECCSTODIS(I) += [F:STO]QTYSTUACT
    Elsif (left$([F:STO]STA,1) = "Q" & WCTLSTO = 3 & [F:STO]QTYSTUACT > 0)
      Gosub CTL_STO_ECC
    Endif

  Next

Endif

Return

# Issue 118553 - 2018-12-11 by STLIG : process Q available stock by version
$CTL_STO_ECC
Local Integer WRET
Local Integer J

  If ([F:STO]QLYCTLDEM = "")  # no quality control analysis
    WECCSTODIS(I) += [F:STO]QTYSTUACT - [F:STO]CUMALLQTA
  Else
    Link [QLD] With [QLH]QLH0=28;[QLD]VCRNUM As [QLX]
&              Where [QLD]VCRNUM    = [F:STO]QLYCTLDEM &
&                    [QLD]ITMREF    = [F:CBH]ITMREF    &
&                    [QLD]STOFCY    = [F:CBH]STOFCY    &
&                    [QLD]LOT       = [F:STO]LOT       &
&                    [QLD]SLO       = [F:STO]SLO       &
&                    [QLD]PALNUM    = [F:STO]PALNUM    &
&                    [QLD]CTRNUM    = [F:STO]CTRNUM    &
&                    [QLD]STA       = [F:STO]STA       &
&                    [QLD]LOC       = [F:STO]LOC       &
&                    [QLD]PCU       = [F:STO]PCU       &
&                    [QLD]PCUSTUCOE = [F:STO]PCUSTUCOE &
&                    [QLD]SERNUM    = [F:STO]SERNUM    &
&                    [QLD]OWNER     = [F:STO]OWNER
&              Order By Key QLD1
    For [QLX]
      If (fstat)  # failed to read quality control analysis
        WECCSTODIS(I) += [F:STO]QTYSTUACT - [F:STO]CUMALLQTA
      Else
        If ([F:QLH]ENDCTLDAT <= WCALDATF) # quality control analysis end date <= mrp run end date - process
          If ([F:QLH]ENDCTLDAT <= WCALDATD) # quality control analysis end date <= mrp run start date - process as starting stock
            WECCSTODIS(I) += [F:STO]QTYSTUACT - [F:STO]CUMALLQTA
            Break
          Else
            # quality control analysis end date between mrp run start and end dates -
            # process through CBNDET 'supply' record for quality control analysis end date
            Raz [F:CBD]
            [F:CBD] = [F:CBH]
            [F:CBD]ECCVALMAJ = [F:EVL]ECCVALMAJ
            [F:CBD]ECCVALMIN = [F:EVL]ECCVALMIN
            [F:CBD]WIPTYP = 11
            [F:CBD]WIPSTA = 1
            Call NUMERO(GSUG,[F:CBD]STOFCY,WCALDATD,"",[F:CBD]WIPNUM,WRET) From SUBANM
            If (WRET <> 0)
              Call ECR_TRACE(mess(66,187,1),1) From GESECRAN
              GOK = 0
              Break 2
            Endif
            [F:CBD]REQQTY = [F:STO]QTYSTUACT - [F:STO]CUMALLQTA # +
            [F:CBD]RMNEXTQTY = [F:CBD]REQQTY
            [F:CBD]STRDAT = [F:QLH]ENDCTLDAT
            [F:CBD]ENDDAT = [F:QLH]ENDCTLDAT
            If ([F:CBD]ENDDAT < WCALDATD)
              [F:CBD]REQDAT = WCALDATD
            Else
              [F:CBD]REQDAT = [F:CBD]ENDDAT
            Endif
            J = [F:CBD]REQDAT - WCALDATD
            If (J < 0)
              J = 0
            Endif
            If (J > WNBJOU - 1)
              J = WNBJOU - 1
            Endif
            [F:CBD]BUC = WBUCNUM(J)
            Case WBUCTYP([F:CBD]BUC)
              When 1,2: [F:CBD]DEMBUC = (year([F:CBD]REQDAT)*1000)+(WBUCTYP([F:CBD]BUC)*100)+week([F:CBD]REQDAT)
              When 3:   [F:CBD]DEMBUC = (year([F:CBD]REQDAT)*1000)+(WBUCTYP([F:CBD]BUC)*100)+month([F:CBD]REQDAT)
            Endcase
            [F:CBD]CREUSR    = GUSER
            [F:CBD]CREDAT    = date$
            [F:CBD]CREDATTIM = datetime$
            [F:CBD]UPDUSR    = GUSER
            [F:CBD]UPDDATTIM = datetime$
            [F:CBD]EXPNUM    = [C]EXPORT
            Call ECR_DEBUG("CTL_STO_ECC Write CBD Itm="+[F:CBD]ITMREF-"WipTyp="+num$([F:CBD]WIPTYP)
&             -num$([F:CBD]REQDAT)-num$([F:CBD]STRDAT)-num$([F:CBD]ENDDAT)-[F:CBD]WIPNUM) From FUNCBN
            GPE=0
            GPOINT = "CTLSTO" : Gosub ENTREE From EXEFNC
            If (GOK < 1)
              Break 2
            Elsif (GPE = 0)
              Write [CBD]
              If (fstat)
                GOK = 0
                Call FSTA("CBD") From GLOCK
                Break 2
              Endif
            Endif
          Endif
        Endif
      Endif
    Next
  Endif

Return

# Issue 121128 - 2019-01-16 by STLIG : determine position of LMAJOR and LMINOR in LECCVALMAJ and LECCVALMIN
# (add LMAJOR and LMINOR to LECCVALMAJ and LECCVALMIN if necessary) ..
Funprog FINDECCVALMAJ(LMAJOR,LMINOR,LECCVALMAJ,LECCVALMIN,LECCNBR)
Value Char LMAJOR
Value Char LMINOR
Variable Char LECCVALMAJ()
Variable Char LECCVALMIN()
Value Integer LECCNBR

Local Integer I
Local Integer POS : POS = -1

For I = 0 To LECCNBR -1
  If (LMAJOR-LMINOR = LECCVALMAJ(I)-LECCVALMIN(I))
    POS = I
    Break
  Elsif (LECCVALMAJ(I) = "")
    Break
  Endif
Next
If (POS = -1 & I <= LECCNBR -1)
   LECCVALMAJ(I) = LMAJOR
   LECCVALMIN(I) = LMINOR
   POS = I
Endif

End POS

# Issue 107866 - 2019-05-13 by STLIG : process starting stock by project ..
$PROJECT_STARTING_STOCK
  Local Char PROJECT(GLONPJT)
  Local Decimal PROJECT_STOCK
  Local Decimal PROJECT_STOCK_ECC(WECCNBR)
  Local Integer POS

  # determine PROJECTs ..
  If (GPRO = 1)
    WREQ = "SELECT distinct PJT_0 From PDPDET"
  Else
    WREQ = "SELECT distinct PJT_0 From CBNDET"
  Endif
  WREQ -= "where STOFCY_0 = '" +[F:CBH]STOFCY +"'"
  WREQ -= "and ITMREF_0 = '" +[F:CBH]ITMREF +"'"
  WREQ -= "and PJT_0 <> ' '"
  WREQ -= "order by PJT_0"
  For (Char VPJT(40)) From num$(GTYPDBA*2+1) Sql WREQ As [REQ_]

    # determine available stock for project (PROJECT_STOCK / PROJECT_STOCK_ECC) ..
    PROJECT = [REQ_]VPJT
    PROJECT_STOCK = 0
    Raz PROJECT_STOCK_ECC : VERSIONS_STOCK = 0
    Gosub STOCK_FOR_PROJECT

    If (PROJECT_STOCK > 0 | VERSIONS_STOCK > 0)
      Gosub APPORTION_PROJECT_STOCK
    Endif

  Next

  # determine available non project stock (PROJECT_STOCK / PROJECT_STOCK_ECC), and
  # apportion across demands (date order) ..
  PROJECT = ""
  PROJECT_STOCK = 0
  Raz PROJECT_STOCK_ECC : VERSIONS_STOCK = 0

  Gosub STOCK_FOR_PROJECT

  If (WECCFLG & [F:ITM]ECCFLG > 1)
    # Issue 190019 - 2020-04-23 by STLIG : Reset remaining stock (WSTO) when starting stock >= 0
    If (VERSIONS_STOCK > 0)
      Gosub APPORTION_PROJECT_STOCK
    Endif
    # reset remaining starting stock ..
    For POS = 0 To WECCNBR -1
      If (WECCVALMAJ(POS) = "")
        Break
      Endif
      WECCSTODIS(POS) = PROJECT_STOCK_ECC(POS)
    Next
  Else
    # Issue 190019 - 2020-04-23 by STLIG : Reset remaining stock (WSTO) when starting stock >= 0
    If (PROJECT_STOCK > 0)
      Gosub APPORTION_PROJECT_STOCK
    Endif
    # reset remaining starting stock ..
    WSTO = PROJECT_STOCK
  Endif

  # save remaining starting stock for $BALANCE ..
  If (WECCFLG & [F:ITM]ECCFLG > 1)
    For POS = 0 To WECCNBR -1
      If (WECCVALMAJ(POS) = "")
        Break
      Endif
      WSECCSTODIS(POS) = WECCSTODIS(POS)
    Next
  Else
    WSSTO = WSTO
  Endif

Return

# Issue 107866 - 2019-05-13 by STLIG : determine available stock for project (PROJECT <> "") /
# non project (PROJECT = "") ..
$STOCK_FOR_PROJECT

    Filter [STO] Where STOFCY = [F:CBH]STOFCY &
&                      ITMREF = [F:CBH]ITMREF &
&                      PJT = PROJECT
    For [STO]

      # Include stock @ status A, R and Q - depends on mrp parameters ..
      # Issue 214774 - 2020-10-01 by STLIG : stock status - check for *, R* and Q*
      If (left$([F:STO]STA,1) = "A" |
&         (left$([F:STO]STA,1) = "R" & WREJSTO = 2) |
&         (left$([F:STO]STA,1) = "Q" & WCTLSTO = 2))

        If (WECCFLG & [F:ITM]ECCFLG > 1)

          # determine major and minor version (lot) ..
          Read [STL]STL0=[F:STO]ITMREF;[F:STO]LOT;[F:STO]SLO
          If (fstat = 0)

            # determine version array POSition ..
            POS = func FUNCBN.FINDECCVALMAJ([F:STL]ECCVALMAJ,[F:STL]ECCVALMIN,WECCVALMAJ,WECCVALMIN,WECCNBR)
            If (POS >= 0)

              # count versions with stock ..
              If (PROJECT_STOCK_ECC(POS) = 0)
                VERSIONS_STOCK += 1
              Endif

              # accumulate stock ..
              PROJECT_STOCK_ECC(POS) += ([F:STO]QTYSTUACT - [F:STO]CUMALLQTA)
            Endif
          Endif
        Else

          # accumulate stock ..
          PROJECT_STOCK += ([F:STO]QTYSTUACT - [F:STO]CUMALLQTA)
        Endif
      Endif
    Next
    Filter [STO]

    # Issue 190019 - 2020-04-23 by STLIG : calculation of starting stock - consider global allocations..
    If (!(WECCFLG & [F:ITM]ECCFLG > 1) & PROJECT = "")
      If ([F:ITV]ITMREF <> [F:CBH]ITMREF)
        Read [ITV]ITV0=[F:CBH]ITMREF;[F:CBH]STOFCY
      Endif
      PROJECT_STOCK -= [F:ITV]GLOALL
      If (PROJECT_STOCK < 0)
        PROJECT_STOCK = 0
      Endif

      # Issue 244233 - 2021-05-13 by STLIG : ignore subcontract delivery allocations..
      GPE=0 : GPOINT = "NOADJUST" : Gosub ENTREE From EXEFNC
      If !GPE & WSOFFLG=2 & WPHYSTO=2
        PROJECT_STOCK += func FUNCBN.ADJUST_SRGQTYSTU
      Endif

    Endif

Return

# Issue 107866 - 2019-05-13 by STLIG : apportion available stock (project / non project) across demands (date order) ..
$APPORTION_PROJECT_STOCK
  Local Char PROJECT_FILTER(50) : PROJECT_FILTER = "1 = 1"
  Local Decimal OUTSTANDING_QUANTITY

  # filter suitable demands to apportion ..
  If (PROJECT <> "")
    PROJECT_FILTER = "PJT = '" +PROJECT +"'"
  Else
    If ([F:ITF]PJMSTRSTK = 1)
      PROJECT_FILTER = "PJT = ''"
    Endif
  Endif
  Filter [CBD] Where STOFCY = [F:CBH]STOFCY &
&                    ITMREF = [F:CBH]ITMREF &
&                    find([F:CBD]WIPTYP, WTYPDEM) <> 0 &
&                    REQQTY > 0 &
&                    STOQTY < REQQTY &
&                    evalue(PROJECT_FILTER)
&              Order By Key CBD0
  For [CBD]
    OUTSTANDING_QUANTITY = [F:CBD]REQQTY - [F:CBD]STOQTY
    If (WECCFLG & [F:ITM]ECCFLG > 1)

      # determine version array POSition ..
      POS = func FUNCBN.FINDECCVALMAJ([F:CBD]ECCVALMAJ,[F:CBD]ECCVALMIN,WECCVALMAJ,WECCVALMIN,WECCNBR)
      If (POS >= 0)
        If (OUTSTANDING_QUANTITY >= PROJECT_STOCK_ECC(POS))
          [F:CBD]STOQTY += PROJECT_STOCK_ECC(POS)
          PROJECT_STOCK_ECC(POS) = 0
          VERSIONS_STOCK -= 1
        Else
          [F:CBD]STOQTY += OUTSTANDING_QUANTITY
          PROJECT_STOCK_ECC(POS) -= OUTSTANDING_QUANTITY
        Endif
        Rewrite [CBD]
        If (VERSIONS_STOCK = 0)
          Break
        Endif
      Endif
    Else
      If (OUTSTANDING_QUANTITY >= PROJECT_STOCK)
        [F:CBD]STOQTY += PROJECT_STOCK
        PROJECT_STOCK = 0
      Else
        [F:CBD]STOQTY += OUTSTANDING_QUANTITY
        PROJECT_STOCK -= OUTSTANDING_QUANTITY
      Endif
      Rewrite [CBD]
      If (PROJECT_STOCK = 0)
        Break
      Endif
    Endif
  Next
  Filter [CBD]

Return
